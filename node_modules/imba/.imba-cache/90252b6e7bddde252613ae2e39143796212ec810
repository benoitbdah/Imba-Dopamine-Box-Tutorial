{"id":"ej","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) };\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $parent$ = Symbol.for('#parent'), $closestNode$ = Symbol.for('#closestNode'), $parentNode$ = Symbol.for('#parentNode'), $context$ = Symbol.for('#context'), $$inited$ = Symbol.for('##inited'), $getRenderContext$ = Symbol.for('#getRenderContext'), $getDynamicContext$ = Symbol.for('#getDynamicContext'), $insertChild$ = Symbol.for('#insertChild'), $appendChild$ = Symbol.for('#appendChild'), $replaceChild$ = Symbol.for('#replaceChild'), $removeChild$ = Symbol.for('#removeChild'), $insertInto$ = Symbol.for('#insertInto'), $insertIntoDeopt$ = Symbol.for('#insertIntoDeopt'), $removeFrom$ = Symbol.for('#removeFrom'), $removeFromDeopt$ = Symbol.for('#removeFromDeopt'), $replaceWith$ = Symbol.for('#replaceWith'), $replaceWithDeopt$ = Symbol.for('#replaceWithDeopt'), $placeholderNode$ = Symbol.for('#placeholderNode'), $attachToParent$ = Symbol.for('#attachToParent'), $detachFromParent$ = Symbol.for('#detachFromParent'), $placeChild$ = Symbol.for('#placeChild'), $beforeReconcile$ = Symbol.for('#beforeReconcile'), $afterReconcile$ = Symbol.for('#afterReconcile'), $afterVisit$ = Symbol.for('#afterVisit'), $visitContext$ = Symbol.for('#visitContext'), $__init__$ = Symbol.for('#__init__'), $$parent$ = Symbol.for('##parent'), $$up$ = Symbol.for('##up'), $$context$ = Symbol.for('##context'), $domNode$ = Symbol.for('#domNode'), $$placeholderNode$ = Symbol.for('##placeholderNode'), $forNode$ = Symbol.for('#forNode'), $domDeopt$ = Symbol.for('#domDeopt'), $$visitContext$ = Symbol.for('##visitContext'), $isRichElement$ = Symbol.for('#isRichElement'), $src$ = Symbol.for('#src'), $htmlNodeName$ = Symbol.for('#htmlNodeName'), $getSlot$ = Symbol.for('#getSlot'), $ImbaElement$ = Symbol.for('#ImbaElement'), $cssns$ = Symbol.for('#cssns'), $cssid$ = Symbol.for('#cssid');\n\n/*body*/\n// imba$stdlib=1\n\nimport {Flags} from './flags';\nimport {getDeepPropertyDescriptor} from '../utils';\nimport {RenderContext,createRenderContext} from './context';\n\nconst IEvent = window.Event;\nconst IUIEvent = window.UIEvent;\nconst IFocusEvent = window.FocusEvent;\nconst IMouseEvent = window.MouseEvent;\nconst IPointerEvent = window.PointerEvent;\nconst IKeyboardEvent = window.KeyboardEvent;\nconst ICustomEvent = window.CustomEvent;\nconst INode = window.Node;\nconst IComment = window.Comment;\nconst IText = window.Text;\nconst IElement = window.Element;\nconst IHTMLElement = window.HTMLElement;\nconst IHTMLHtmlElement = window.HTMLHtmlElement;\nconst IHTMLSelectElement = window.HTMLSelectElement;\nconst IHTMLInputElement = window.HTMLInputElement;\nconst IHTMLTextAreaElement = window.HTMLTextAreaElement;\nconst IHTMLButtonElement = window.HTMLButtonElement;\nconst IHTMLOptionElement = window.HTMLOptionElement;\nconst IHTMLScriptElement = window.HTMLScriptElement;\nconst ISVGElement = window.SVGElement;\nconst IDocumentFragment = window.DocumentFragment;\nconst IShadowRoot = window.ShadowRoot;\nconst IDocument = window.Document;\nconst IWindow = window.Window;\nconst IcustomElements = window.customElements;\n\nexport {IEvent as Event,IUIEvent as UIEvent,IFocusEvent as FocusEvent,IMouseEvent as MouseEvent,IPointerEvent as PointerEvent,IKeyboardEvent as KeyboardEvent,ICustomEvent as CustomEvent,INode as Node,IComment as Comment,IText as Text,IElement as Element,IHTMLElement as HTMLElement,IHTMLHtmlElement as HTMLHtmlElement,IHTMLSelectElement as HTMLSelectElement,IHTMLInputElement as HTMLInputElement,IHTMLTextAreaElement as HTMLTextAreaElement,IHTMLButtonElement as HTMLButtonElement,IHTMLOptionElement as HTMLOptionElement,IHTMLScriptElement as HTMLScriptElement,ISVGElement as SVGElement,IDocumentFragment as DocumentFragment,IShadowRoot as ShadowRoot,IDocument as Document,IWindow as Window,IcustomElements as customElements};\n\n/*\nexport const {\n\tEvent,\n\tUIEvent,\n\tMouseEvent,\n\tPointerEvent,\n\tKeyboardEvent,\n\tCustomEvent,\n\tNode,\n\tComment,\n\tText,\n\tElement,\n\tHTMLElement,\n\tHTMLHtmlElement,\n\tHTMLSelectElement,\n\tHTMLInputElement,\n\tHTMLTextAreaElement,\n\tHTMLButtonElement,\n\tHTMLOptionElement,\n\tHTMLScriptElement,\n\tSVGElement,\n\tDocumentFragment,\n\tShadowRoot,\n\tDocument,\n\tWindow,\n\tcustomElements\n} = global.window\n*/\n\n\nconst descriptorCache = {};\nfunction getDescriptor(item,key,cache){\n\tif (!(item)) {\n\t\treturn cache[key] = null;\n\t};\n\t\n\tif (cache[key] !== undefined) {\n\t\treturn cache[key];\n\t};\n\t\n\tlet desc = Object.getOwnPropertyDescriptor(item,key);\n\t\n\tif (desc !== undefined || item == SVGElement) {\n\t\treturn cache[key] = desc || null;\n\t};\n\t\n\treturn getDescriptor(Reflect.getPrototypeOf(item),key,cache);\n};\n\n// export const document = global.window.document\nconst CustomTagConstructors = {};\nconst CustomTagToElementNames = {};\nexport const TYPES = {};\nexport const CUSTOM_TYPES = {};\nexport function get_document(){\n\treturn globalThis.document;\n};\n\nexport function use_window(){\n\tglobalThis.imba.uses_window = true;\n\treturn true;\n};\n\n// Basic node extensions\n\nconst contextHandler = {\n\tget(target,name){\n\t\tlet ctx = target;\n\t\tlet val = undefined;\n\t\twhile (ctx && val == undefined){\n\t\t\tif (ctx = ctx[$parent$]) {\n\t\t\t\tval = ctx[name];\n\t\t\t};\n\t\t};\n\t\treturn val;\n\t},\n\t\n\tset(target,name,value){\n\t\tlet ctx = target;\n\t\tlet val = undefined;\n\t\twhile (ctx && val == undefined){\n\t\t\tlet desc = getDeepPropertyDescriptor(ctx,name,Element);\n\t\t\tif (desc) {\n\t\t\t\tctx[name] = value;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tctx = ctx[$parent$];\n\t\t\t};\n\t\t};\n\t\treturn true;\n\t}\n};\n\nlet c$0 = Symbol();\nclass ΩDocument {\n\tget flags(){\n\t\treturn this.documentElement.flags;\n\t}\n\t\n\temit(...params){\n\t\treturn this.documentElement.emit(...params);\n\t}\n\tstatic { register$(this,c$0,'Document',1,Document); }\n};\n\n// @ts-ignore\nNode.prototype[$__init__$] = function() { return this; };\n\nlet c$1 = Symbol();\nclass ΩNode {\n\t/*\n\t\t@custom\n\t\t@summary Reference to the parentNode even before element has been attached\n\t\t*/\n\t\n\tget [$parent$](){\n\t\treturn this[$$parent$] || this.parentNode || this[$$up$];\n\t}\n\t\n\tget [$closestNode$](){\n\t\treturn this;\n\t}\n\t\n\tget [$parentNode$](){\n\t\treturn this[$parent$]?.[$closestNode$];\n\t}\n\t\n\tget [$context$](){\n\t\treturn this[$$context$] ||= new Proxy(this,contextHandler);\n\t}\n\t\n\t[$$inited$](){\n\t\treturn this;\n\t}\n\t\n\t[$getRenderContext$](sym){\n\t\treturn createRenderContext(this,sym);\n\t}\n\t\n\t[$getDynamicContext$](sym,key){\n\t\treturn this[$getRenderContext$](sym)[$getRenderContext$](key);\n\t}\n\t\n\t[$insertChild$](newnode,refnode){\n\t\treturn newnode[$insertInto$](this,refnode);\n\t}\n\t\n\t[$appendChild$](newnode){\n\t\treturn newnode[$insertInto$](this,null);\n\t}\n\t\n\t[$replaceChild$](newnode,oldnode){\n\t\tlet res = this[$insertChild$](newnode,oldnode);\n\t\tthis[$removeChild$](oldnode);\n\t\treturn res;\n\t}\n\t\n\t[$removeChild$](node){\n\t\treturn node[$removeFrom$](this);\n\t}\n\t\n\t// can override if the element itself wants ot deal with this\n\t[$insertInto$](parent,before = null){\n\t\tif (before) {\n\t\t\tparent.insertBefore(this,before);\n\t\t} else {\n\t\t\tparent.appendChild(this);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$insertIntoDeopt$](parent,before){\n\t\t// log '#insertIntoDeopt',parent,before\n\t\tif (before) {\n\t\t\tparent.insertBefore(this[$domNode$] || this,before);\n\t\t} else {\n\t\t\tparent.appendChild(this[$domNode$] || this);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\treturn parent.removeChild(this);\n\t}\n\t\n\t[$removeFromDeopt$](parent){\n\t\treturn parent.removeChild(this[$domNode$] || this);\n\t}\n\t\n\t[$replaceWith$](other,parent){\n\t\treturn parent[$replaceChild$](other,this);\n\t}\n\t\n\t[$replaceWithDeopt$](other,parent){\n\t\treturn parent[$replaceChild$](other,this[$domNode$] || this);\n\t}\n\t\n\tget [$placeholderNode$](){\n\t\tlet c;\n\t\treturn this[$$placeholderNode$] ||= (c = globalThis.document.createComment(\"placeholder\"),c[$forNode$] = this,c);\n\t}\n\t\n\tset [$placeholderNode$](value){\n\t\tlet prev = this[$$placeholderNode$];\n\t\tthis[$$placeholderNode$] = value;\n\t\tvalue[$forNode$] = this;\n\t\tif (prev && prev != value && prev.parentNode) {\n\t\t\tprev[$replaceWith$](value);\n\t\t};\n\t}\n\t\n\t[$attachToParent$](){\n\t\tlet ph = this[$domNode$];\n\t\tlet par = ph && ph.parentNode;\n\t\tif (ph && par && ph != this) {\n\t\t\tthis[$domNode$] = null;\n\t\t\tthis[$insertInto$](par,ph);\n\t\t\tph[$removeFrom$](par);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$detachFromParent$](){\n\t\tif ((this[$domDeopt$] != true) ? ((this[$domDeopt$] = true,true)) : false) {\n\t\t\tthis[$replaceWith$] = this[$replaceWithDeopt$];\n\t\t\tthis[$removeFrom$] = this[$removeFromDeopt$];\n\t\t\tthis[$insertInto$] = this[$insertIntoDeopt$];\n\t\t\tthis[$$up$] ||= this[$parent$];\n\t\t};\n\t\t\n\t\tlet ph = this[$placeholderNode$];\n\t\tif (this.parentNode && ph != this) {\n\t\t\tph[$insertInto$](this.parentNode,this);\n\t\t\tthis[$removeFrom$](this.parentNode);\n\t\t};\n\t\t\n\t\tthis[$domNode$] = ph;\n\t\t// self.#replaceWith(ph,parentNode)\n\t\treturn this;\n\t}\n\t\n\t[$placeChild$](item,f,prev){\n\t\tlet type = typeof item;\n\t\t\n\t\tif (type === 'undefined' || item === null) {\n\t\t\t// what if the prev value was the same?\n\t\t\tif (prev && isa$(prev,Comment)) { // check perf\n\t\t\t\treturn prev;\n\t\t\t};\n\t\t\t\n\t\t\tlet el = globalThis.document.createComment('');\n\t\t\treturn prev ? prev[$replaceWith$](el,this) : el[$insertInto$](this,null);\n\t\t};\n\t\t\n\t\t// dont reinsert again\n\t\tif (item === prev) {\n\t\t\treturn item;\n\t\t} else if (type !== 'object') {\n\t\t\tlet res;\n\t\t\tlet txt = item;\n\t\t\t\n\t\t\tif (prev) {\n\t\t\t\tif (isa$(prev,Text)) { // check perf\n\t\t\t\t\tprev.textContent = txt;\n\t\t\t\t\treturn prev;\n\t\t\t\t} else {\n\t\t\t\t\tres = globalThis.document.createTextNode(txt);\n\t\t\t\t\tprev[$replaceWith$](res,this);\n\t\t\t\t\treturn res;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.appendChild(res = globalThis.document.createTextNode(txt));\n\t\t\t\treturn res;\n\t\t\t};\n\t\t} else {\n\t\t\t// Coerce the object to string if it is not\n\t\t\tif (!(item[$insertInto$])) {\n\t\t\t\treturn this[$placeChild$](String(item),f,prev);\n\t\t\t};\n\t\t\t\n\t\t\treturn prev ? prev[$replaceWith$](item,this) : item[$insertInto$](this,null);\n\t\t};\n\t\treturn;\n\t}\n\tstatic { register$(this,c$1,'Node',1,Node); }\n};\n\n// Basic element extensions\nlet c$2 = Symbol();\nclass ΩElement {\n\tlog(...params){\n\t\treturn console.log(...params);\n\t}\n\t\n\tget hiddenΦ(){\n\t\tlet style = globalThis.getComputedStyle(this);\n\t\tif (style.display == 'none' || style.visibility == 'hidden') {\n\t\t\treturn true;\n\t\t};\n\t\tif (this.offsetParent || this === globalThis.document.body) {\n\t\t\treturn false;\n\t\t};\n\t\treturn (this.parentElement?.hiddenΦ ?? true);\n\t}\n\t\n\t// Element is detached from document?\n\t\n\tget detachedΦ(){\n\t\treturn !(globalThis.document.documentElement.contains(this));\n\t}\n\t\n\t/*\n\t\tIs the element visible inside viewport and clickable?\n\t\t*/\n\t\n\tget unobstructedΦ(){\n\t\tlet box = this.getBoundingClientRect();\n\t\tlet vp = window.visualViewport;\n\t\tlet x = box.left + box.width * 0.5;\n\t\tlet y = box.top + box.height * 0.5;\n\t\t\n\t\tif (vp.width > x && x > 0 && vp.height > y && y > 0) {\n\t\t\tlet hit = globalThis.document.elementFromPoint(x,y);\n\t\t\tif (!(hit && (hit.contains(this) || this.contains(hit)))) { return false };\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\treturn false;\n\t\t\n\t}\n\t\n\tget focusΦ(){\n\t\treturn globalThis.document.activeElement == this;\n\t}\n\t\n\tget focinΦ(){\n\t\treturn this.contains(globalThis.document.activeElement);\n\t}\n\t\n\temit(name,detail,o = {}){\n\t\tif (detail != undefined) {\n\t\t\to.detail ??= detail;\n\t\t};\n\t\to.bubbles ??= true;\n\t\to.cancelable ??= true;\n\t\t\n\t\tlet event = new CustomEvent(name,o);\n\t\t\n\t\tif (o.original) {\n\t\t\tevent.originalEvent = o.original;\n\t\t};\n\t\t\n\t\tlet res = this.dispatchEvent(event);\n\t\treturn event;\n\t}\n\t\n\t// inline in files or remove all together?\n\ttext$(item){\n\t\tthis.textContent = item;\n\t\treturn this;\n\t}\n\t\n\t[$beforeReconcile$](){\n\t\treturn this;\n\t}\n\t\n\t[$afterReconcile$](){\n\t\treturn this;\n\t}\n\t\n\t[$afterVisit$](){\n\t\tif (this[$$visitContext$]) { this[$$visitContext$] = null };\n\t\treturn;\n\t}\n\t\n\tget [$visitContext$](){\n\t\treturn this[$$visitContext$] ||= {};\n\t}\n\t\n\tget flags(){\n\t\tif (!(this.$flags)) {\n\t\t\t// unless deopted - we want to first cache the extflags\n\t\t\tthis.$flags = new Flags(this);\n\t\t\tif (this.flag$ == Element.prototype.flag$) {\n\t\t\t\tthis.flags$ext = this.className;\n\t\t\t};\n\t\t\tthis.flagDeopt$();\n\t\t};\n\t\treturn this.$flags;\n\t}\n\t\n\tflag$(str){\n\t\t// Potentially slow\n\t\tlet ns = this.flags$ns;\n\t\tthis.className = ns ? ((ns + (this.flags$ext = str))) : ((this.flags$ext = str));\n\t\treturn;\n\t}\n\t\n\tflagDeopt$(){\n\t\tvar self = this;\n\t\tthis.flag$ = this.flagExt$;// do(str) self.flagSync$(flags$ext = str)\n\t\tthis.flagSelf$ = function(str) { return self.flagSync$(self.flags$own = str); };\n\t\treturn;\n\t}\n\t\n\tflagExt$(str){\n\t\treturn this.flagSync$(this.flags$ext = str);\n\t}\n\t\n\tflagSelf$(str){\n\t\t// if a tag receives flags from inside <self> we need to\n\t\t\t\t// redefine the flag-methods to later use both\n\t\tthis.flagDeopt$();\n\t\treturn this.flagSelf$(str);\n\t}\n\t\n\tflagSync$(){\n\t\treturn this.className = ((this.flags$ns || '') + (this.flags$ext || '') + ' ' + (this.flags$own || '') + ' ' + (this.$flags || ''));\n\t}\n\t\n\tset$(key,value){\n\t\t// FIXME relatively slow\n\t\tlet desc = getDeepPropertyDescriptor(this,key,Element);\n\t\tif (!(desc) || !(desc.set)) {\n\t\t\tthis.setAttribute(key,value);\n\t\t} else {\n\t\t\tthis[key] = value;\n\t\t};\n\t\treturn;\n\t}\n\t\n\tget richValue(){\n\t\treturn this.value;\n\t}\n\t\n\tset richValue(value){\n\t\tthis.value = value;\n\t}\n\tstatic { register$(this,c$2,'Element',1,Element); }\n};\n\n// Element.prototype.set$ = Element.prototype.setAttribute\nElement.prototype.setns$ = Element.prototype.setAttributeNS;\nElement.prototype[$isRichElement$] = true;\n\nexport function createElement(name,parent,flags,text){\n\tlet el = globalThis.document.createElement(name);\n\t\n\tif (flags) { el.className = flags };\n\t\n\tif (text !== null) {\n\t\tel.text$(text);\n\t};\n\t\n\tif (parent && parent[$appendChild$]) {\n\t\tparent[$appendChild$](el);\n\t\t// el.#insertInto(parent)\n\t};\n\t\n\treturn el;\n};\n\nlet c$3 = Symbol();\nclass ΩSVGElement {\n\tset$(key,value){\n\t\tlet cache = descriptorCache[this.nodeName] ||= {};\n\t\tlet desc = getDescriptor(this,key,cache);\n\t\t\n\t\tif (!(desc) || !(desc.set)) {\n\t\t\tthis.setAttribute(key,value);\n\t\t} else {\n\t\t\tthis[key] = value;\n\t\t};\n\t\treturn;\n\t}\n\t\n\tflag$(str){\n\t\tlet ns = this.flags$ns;\n\t\tthis.setAttribute('class',ns ? ((ns + (this.flags$ext = str))) : ((this.flags$ext = str)));\n\t\treturn;\n\t}\n\t\n\tflagSelf$(str){\n\t\t// if a tag receives flags from inside <self> we need to\n\t\t\t\t// redefine the flag-methods to later use both\n\t\tvar self = this;\n\t\tthis.flag$ = function(str) { return self.flagSync$(self.flags$ext = str); };\n\t\tthis.flagSelf$ = function(str) { return self.flagSync$(self.flags$own = str); };\n\t\treturn this.flagSelf$(str);\n\t}\n\t\n\tflagSync$(){\n\t\treturn this.setAttribute('class',(this.flags$ns || '') + (this.flags$ext || '') + ' ' + (this.flags$own || '') + ' ' + (this.$flags || ''));\n\t}\n\tstatic { register$(this,c$3,'SVGElement',1,SVGElement); }\n};\n\nlet c$4 = Symbol();\nclass ΩSVGSVGElement {\n\tset src(value){\n\t\tif ((this[$src$] != value) ? ((this[$src$] = value,true)) : false) {\n\t\t\tif (value && value.adoptNode) {\n\t\t\t\tvalue.adoptNode(this);\n\t\t\t} else if (value && value.type == 'svg') {\n\t\t\t\tif (value.attributes) {\n\t\t\t\t\tfor (let $3 = value.attributes, $1 = 0, $2 = Object.keys($3), $4 = $2.length, k, v; $1 < $4; $1++){\n\t\t\t\t\t\tk = $2[$1];v = $3[k];this.setAttribute(k,v);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tthis.innerHTML = value.content;\n\t\t\t};\n\t\t};\n\t\treturn;\n\t}\n\tstatic { register$(this,c$4,'SVGSVGElement',1,SVGSVGElement); }\n};\n\nexport function createSVGElement(name,parent,flags,text,ctx){\n\tlet el = globalThis.document.createElementNS(\"http://www.w3.org/2000/svg\",name);\n\t\n\tif (flags) {\n\t\tel.className.baseVal = flags;\n\t};\n\t\n\tif (parent && parent[$appendChild$]) {\n\t\tparent[$appendChild$](el);// .#appendChild(parent)\n\t};\n\t\n\tif (text) {\n\t\tel.textContent = text;\n\t};\n\t\n\treturn el;\n};\n\nexport function createComment(text){\n\treturn globalThis.document.createComment(text);\n};\n\nexport function createTextNode(text){\n\treturn globalThis.document.createTextNode(text);\n};\n\nexport function createFragment(){\n\treturn globalThis.document.createDocumentFragment();\n};\n\nconst navigator = globalThis.navigator;\nconst vendor = navigator && navigator.vendor || '';\nconst ua = navigator && navigator.userAgent || '';\n\nconst isSafari = vendor.indexOf('Apple') > -1 || ua.indexOf('CriOS') >= 0 || ua.indexOf('FxiOS') >= 0;\nconst supportsCustomizedBuiltInElements = !(isSafari);\nconst CustomDescriptorCache = new Map;\n\nlet c$5 = Symbol();\nclass CustomHook extends HTMLElement {\n\tconnectedCallback(){\n\t\tif (supportsCustomizedBuiltInElements) {\n\t\t\treturn this.parentNode.removeChild(this);\n\t\t} else {\n\t\t\treturn this.parentNode.connectedCallback();\n\t\t};\n\t}\n\t\n\tdisconnectedCallback(){\n\t\tif (!(supportsCustomizedBuiltInElements)) {\n\t\t\treturn this.parentNode.disconnectedCallback();\n\t\t};\n\t}\n\tstatic { register$(this,c$5,'CustomHook',0) }\n};\n\nwindow.customElements.define('i-hook',CustomHook);\n\nfunction getCustomDescriptors(el,klass){\n\tlet props = CustomDescriptorCache.get(klass);\n\t\n\tif (!(props)) {\n\t\tprops = {};\n\t\tlet proto = klass.prototype;\n\t\tlet protos = [proto];\n\t\twhile (proto = (proto && Object.getPrototypeOf(proto))){\n\t\t\tif (proto.constructor == el.constructor) { break; };\n\t\t\tprotos.unshift(proto);\n\t\t};\n\t\t\n\t\tfor (let $5 = 0, $6 = iter$__(protos), $7 = $6.length; $5 < $7; $5++) {\n\t\t\tlet item = $6[$5];\n\t\t\tlet desc = Object.getOwnPropertyDescriptors(item);\n\t\t\tObject.assign(props,desc);\n\t\t};\n\t\tCustomDescriptorCache.set(klass,props);\n\t};\n\t\n\treturn props;\n};\n\n// Registry\nexport function createComponent(name,parent,flags,text,ctx){\n\t// the component could have a different web-components name?\n\tlet el;\n\t\n\tif (typeof name != 'string') {\n\t\tif (name && name.nodeName) {\n\t\t\tname = name.nodeName;\n\t\t};\n\t};\n\t\n\tlet cmpname = CustomTagToElementNames[name] || name;\n\t\n\tif (CustomTagConstructors[name]) {\n\t\tlet cls = CustomTagConstructors[name];\n\t\tlet typ = cls.prototype[$htmlNodeName$];\n\t\tif (typ && supportsCustomizedBuiltInElements) {\n\t\t\tel = globalThis.document.createElement(typ,{is: cmpname});\n\t\t} else if (cls.create$ && typ) {\n\t\t\tel = globalThis.document.createElement(typ);\n\t\t\tel.setAttribute('is',cmpname);\n\t\t\tlet props = getCustomDescriptors(el,cls);\n\t\t\tObject.defineProperties(el,props);\n\t\t\tel.__slots = {};\n\t\t\t// check if we need a hook though?\n\t\t\tel.appendChild(globalThis.document.createElement('i-hook'));\n\t\t} else if (cls.create$) {\n\t\t\tel = cls.create$(el);\n\t\t\tel.__slots = {};\n\t\t} else {\n\t\t\tconsole.warn((\"could not create tag \" + name));\n\t\t};\n\t} else {\n\t\tel = globalThis.document.createElement(CustomTagToElementNames[name] || name);\n\t};\n\t\n\tel[$$parent$] = parent;\n\tel[$__init__$]();\n\tel[$$inited$]();// .inited(el) if el.#__hooks__\n\t\n\t// potentially\n\t\n\tif (text !== null) {\n\t\tel[$getSlot$]('__').text$(text);\n\t};\n\t\n\tif (flags || el.flags$ns) { // or nsflag\n\t\tel.flag$(flags || '');\n\t};\n\treturn el;\n};\n\nexport function createDynamic(value,parent,flags,text){\n\tif (value == null || value == undefined) {\n\t\treturn createComment('');\n\t} else if (isa$(value,Node)) {\n\t\t// check if node already exists somewhere else in dom\n\t\treturn value;\n\t} else if (value[$isRichElement$]) {\n\t\treturn value;\n\t} else {\n\t\treturn createComponent(value,parent,flags,text);\n\t};\n};\n\nexport function getTagType(name,klass){\n\t// TODO follow same structure as ssr TYPES\n\tif (TYPES[name]) {\n\t\treturn TYPES[name];\n\t};\n\t\n\tif (window[klass]) {\n\t\treturn window[klass];\n\t};\n\t\n\tif (window[name]) {\n\t\treturn window[name];\n\t};\n};\n\nexport function getSuperTagType(name,klass,cmp){\n\tlet typ = getTagType(name,klass);\n\tif (!(typ)) {\n\t\tconsole.warn((\"could not inherit from undefined tag type \" + name));\n\t};\n\t\n\tlet custom = typ == cmp || (typ.prototype instanceof cmp) || typ.prototype[$htmlNodeName$];\n\t\n\tif (!(custom)) {\n\t\tlet cls = typ.prototype[$ImbaElement$];\n\t\t\n\t\tif (!(cls)) {\n\t\t\tlet c$0 = Symbol();\n\t\t\tcls = class CustomBuiltInElement extends typ {\n\t\t\t\tconstructor(){\n\t\t\t\t\tsuper(...arguments);\n\t\t\t\t\tthis.__slots = {};\n\t\t\t\t\tthis.__F = 0;\n\t\t\t\t}\n\t\t\t\tstatic { register$(this,c$0,'CustomBuiltInElement',16) }\n\t\t\t};\n\t\t\t\n\t\t\ttyp.prototype[$ImbaElement$] = cls;\n\t\t\tlet descriptors = Object.getOwnPropertyDescriptors(cmp.prototype);\n\t\t\tObject.defineProperties(cls.prototype,descriptors);\n\t\t\tcls.prototype[$htmlNodeName$] = name;\n\t\t};\n\t\t\n\t\treturn cls;\n\t};\n\t\n\treturn typ;\n};\n\nexport function defineTag(name,klass,options = {}){\n\tTYPES[name] = CUSTOM_TYPES[name] = klass;\n\t\n\tklass.nodeName = name;\n\t\n\tlet componentName = name;\n\tlet proto = klass.prototype;\n\t\n\tif (name.indexOf('-') == -1) {\n\t\tcomponentName = (\"\" + name + \"-tag\");\n\t\tCustomTagToElementNames[name] = componentName;\n\t};\n\t\n\t// if options.cssns\n\tif (options.cssns) {\n\t\tlet ns = (proto._ns_ || proto[$cssns$] || '') + ' ' + (options.cssns || '');\n\t\tproto._ns_ = ns.trim() + ' ';\n\t\tproto[$cssns$] = options.cssns;\n\t};\n\t\n\tif (options.cssid) {\n\t\tlet ids = (proto.flags$ns || '') + ' ' + options.cssid;\n\t\tproto[$cssid$] = options.cssid;\n\t\tproto.flags$ns = ids.trim() + ' ';\n\t};\n\t\n\tif (proto[$htmlNodeName$] && !(options.extends)) {\n\t\toptions.extends = proto[$htmlNodeName$];\n\t};\n\t\n\tif (options.extends) {\n\t\tproto[$htmlNodeName$] = options.extends;\n\t\tCustomTagConstructors[name] = klass;\n\t\t\n\t\tif (supportsCustomizedBuiltInElements) {\n\t\t\twindow.customElements.define(componentName,klass,{extends: options.extends});\n\t\t};\n\t} else {\n\t\twindow.customElements.define(componentName,klass);\n\t};\n\t\n\treturn klass;\n};\n\nlet instance = globalThis.imba ||= {};\ninstance.document = globalThis.document;\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}