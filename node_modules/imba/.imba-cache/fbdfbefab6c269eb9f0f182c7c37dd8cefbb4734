{"id":"l","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) };\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $__init__$ = Symbol.for('#__init__'), $schedule$ = Symbol.for('#schedule'), $frames$ = Symbol.for('#frames'), $interval$ = Symbol.for('#interval'), $stage$ = Symbol.for('#stage'), $scheduled$ = Symbol.for('#scheduled'), $version$ = Symbol.for('#version'), $fps$ = Symbol.for('#fps'), $ticker$ = Symbol.for('#ticker');\n\n/*body*/\n// imba$imbaPath=global\n// imba$stdlib=1\nlet rAF = globalThis.requestAnimationFrame || function(blk) { return globalThis.setTimeout(blk,1000 / 60); };\nlet FPS = 60;\nlet SPF = 1 / 60;\n\n// Scheduler\nlet c$0 = Symbol();\nclass Scheduled {\n\tconstructor($$ = null){\n\t\tthis[$__init__$]($$);\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $0;\n\t\tthis.owner = ($$ && ($0 = $$.owner) !== undefined) ? ($0) : null;\n\t\tthis.target = ($$ && ($0 = $$.target) !== undefined) ? ($0) : null;\n\t\tthis.active = ($$ && ($0 = $$.active) !== undefined) ? ($0) : false;\n\t\tthis.value = ($$ && ($0 = $$.value) !== undefined) ? ($0) : undefined;\n\t\tthis.skip = ($$ && ($0 = $$.skip) !== undefined) ? ($0) : 0;\n\t\tthis.last = ($$ && ($0 = $$.last) !== undefined) ? ($0) : 0;\n\t\t\n\t}\n\ttick(scheduler,source){\n\t\tthis.last = this.owner[$frames$];\n\t\tthis.target.tick(this,source);\n\t\treturn 1;\n\t}\n\t\n\tupdate(o,activateΦ){\n\t\tlet on = this.active;\n\t\tlet val = o.value;\n\t\tlet changed = this.value != val;\n\t\t\n\t\tif (changed) {\n\t\t\tthis.deactivate();\n\t\t\tthis.value = val;\n\t\t};\n\t\t\n\t\tif (this.value || on || activateΦ) {\n\t\t\tthis.activate();\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tqueue(){\n\t\tthis.owner.add(this);\n\t\treturn;\n\t}\n\t\n\tactivate(){\n\t\tif (this.value === true) {\n\t\t\tthis.owner.on('commit',this);\n\t\t} else if (this.value === false) {\n\t\t\ttrue;\n\t\t} else if (typeof this.value == 'number') {\n\t\t\t// duration\n\t\t\tlet tock = this.value / (1000 / 60);\n\t\t\tif (tock <= 2) {\n\t\t\t\t// FIXME everything from 30 to 60 fps is treated as 60fps\n\t\t\t\tthis.owner.on('raf',this);\n\t\t\t} else {\n\t\t\t\tthis[$interval$] = globalThis.setInterval(this.queue.bind(this),this.value);\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis.active = true;\n\t\treturn this;\n\t}\n\t\n\tdeactivate(){\n\t\tif (this.value === true) {\n\t\t\tthis.owner.un('commit',this);\n\t\t};\n\t\tthis.owner.un('raf',this);\n\t\t\n\t\tif (this[$interval$]) {\n\t\t\tglobalThis.clearInterval(this[$interval$]);\n\t\t\tthis[$interval$] = null;\n\t\t};\n\t\t\n\t\tthis.active = false;\n\t\treturn this;\n\t}\n\tstatic { register$(this,c$0,'Scheduled',16) }\n};\n\nlet c$1 = Symbol();\nexport class Scheduler {\n\tconstructor(){\n\t\tvar self = this;\n\t\tthis.id = Symbol();\n\t\tthis.queue = [];\n\t\tthis.stage = -1;\n\t\tthis[$stage$] = -1;\n\t\tthis[$frames$] = 0;\n\t\tthis[$scheduled$] = false;\n\t\tthis[$version$] = 0;\n\t\t\n\t\tthis.listeners = {};\n\t\tthis.intervals = {};\n\t\tthis.commit = function() {\n\t\t\tself.add('commit');\n\t\t\treturn self;\n\t\t};\n\t\t\n\t\tthis[$fps$] = 0;\n\t\t\n\t\tthis.$promise = null;\n\t\tthis.$resolve = null;\n\t\tthis[$ticker$] = function(e) {\n\t\t\tself[$scheduled$] = false;\n\t\t\treturn self.tick(e);\n\t\t};\n\t\tthis;\n\t}\n\t\n\ttouch(){\n\t\treturn this[$version$]++;\n\t}\n\t\n\tget version(){\n\t\treturn this[$version$];\n\t}\n\t\n\tadd(item,force = false){\n\t\tif (force || this.queue.indexOf(item) == -1) {\n\t\t\tthis.queue.push(item);\n\t\t};\n\t\t\n\t\tif (!(this[$scheduled$])) { this[$schedule$]() };\n\t\treturn this;\n\t}\n\t\n\tget committingΦ(){\n\t\treturn this.queue.indexOf('commit') >= 0;\n\t}\n\t\n\tget syncingΦ(){\n\t\treturn this[$stage$] == 1;\n\t}\n\t\n\tlisten(ns,item){\n\t\tlet set = this.listeners[ns];\n\t\tlet first = !(set);\n\t\tset ||= (this.listeners[ns] = new Set);\n\t\tset.add(item);\n\t\t\n\t\tif (ns == 'raf' && first) { this.add('raf') };\n\t\treturn this;\n\t}\n\t\n\tunlisten(ns,item){\n\t\tvar $1;\n\t\tlet set = this.listeners[ns];\n\t\tset && set.delete(item);\n\t\tif (ns == 'raf' && set && set.size == 0) {\n\t\t\t((($1 = this.listeners.raf),delete this.listeners.raf, $1));\n\t\t};\n\t\treturn this;\n\t}\n\t\n\ton(ns,item){\n\t\treturn this.listen(ns,item);\n\t}\n\t\n\tun(ns,item){\n\t\treturn this.unlisten(ns,item);\n\t}\n\t\n\tget promise(){\n\t\tvar self = this;\n\t\treturn this.$promise ||= new Promise(function(resolve) {\n\t\t\treturn self.$resolve = resolve;\n\t\t});\n\t}\n\t\n\ttick(timestamp){\n\t\tvar self = this;\n\t\tlet items = this.queue;\n\t\tlet frame = this[$frames$]++;\n\t\tif (!(this.ts)) { this.ts = timestamp };\n\t\tthis.dt = timestamp - this.ts;\n\t\tthis.ts = timestamp;\n\t\tthis.queue = [];\n\t\tthis[$stage$] = 1;\n\t\tthis[$version$]++;\n\t\t\n\t\t// calculate frames elapsed since last tick etc?\n\t\t\n\t\tif (items.length) {\n\t\t\tfor (let i = 0, $2 = iter$__(items), $3 = $2.length; i < $3; i++) {\n\t\t\t\tlet item = $2[i];\n\t\t\t\tif (typeof item === 'string' && this.listeners[item]) {\n\t\t\t\t\tthis.listeners[item].forEach(function(listener) {\n\t\t\t\t\t\tif (isa$(listener.tick,Function)) {\n\t\t\t\t\t\t\treturn listener.tick(self,item);\n\t\t\t\t\t\t} else if (isa$(listener,Function)) {\n\t\t\t\t\t\t\treturn listener(self,item);\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t} else if (isa$(item,Function)) {\n\t\t\t\t\titem(this.dt,this);\n\t\t\t\t} else if (item.tick) {\n\t\t\t\t\titem.tick(this.dt,this);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis[$stage$] = this[$scheduled$] ? 0 : -1;\n\t\t\n\t\tif (this.$promise) {\n\t\t\tthis.$resolve(this);\n\t\t\tthis.$promise = this.$resolve = null;\n\t\t};\n\t\t\n\t\tif (this.listeners.raf && true) {\n\t\t\tthis.add('raf');\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$schedule$](){\n\t\tif (!(this[$scheduled$])) {\n\t\t\tthis[$scheduled$] = true;\n\t\t\tif (this[$stage$] == -1) { this[$stage$] = 0 };\n\t\t\trAF(this[$ticker$]);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tschedule(item,o){\n\t\to ||= (item[this.id] ||= {value: true});\n\t\tlet state = o[this.id] ||= new Scheduled({owner: this,target: item});\n\t\treturn state.update(o,true);\n\t}\n\t\n\tunschedule(item,o = {}){\n\t\to ||= item[this.id];\n\t\tlet state = o && o[this.id];\n\t\tif (state && state.active) {\n\t\t\tstate.deactivate();\n\t\t};\n\t\treturn this;\n\t}\n\tstatic { register$(this,c$1,'Scheduler',16) }\n};\n\nexport const scheduler = new Scheduler;\n\nexport function commit(){\n\treturn scheduler.add('commit').promise;\n};\n\nexport function setTimeout(fn,ms){\n\treturn globalThis.setTimeout(function() {\n\t\tfn();\n\t\tcommit();\n\t\treturn;\n\t},ms);\n};\n\nexport function setInterval(fn,ms){\n\treturn globalThis.setInterval(function() {\n\t\tfn();\n\t\tcommit();\n\t\treturn;\n\t},ms);\n};\n\nexport const clearInterval = globalThis.clearInterval;\nexport const clearTimeout = globalThis.clearTimeout;\n\nlet instance = globalThis.imba ||= {};\ninstance.commit = commit;\ninstance.setTimeout = setTimeout;\ninstance.setInterval = setInterval;\ninstance.clearInterval = clearInterval;\ninstance.clearTimeout = clearTimeout;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}