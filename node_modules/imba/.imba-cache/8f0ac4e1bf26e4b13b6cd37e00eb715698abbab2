{"id":"dv","warnings":[],"errors":[],"js":"import {register$} from 'imba/runtime';\nconst $__listeners__$ = Symbol.for('#__listeners__');\n\n/*body*/\n// imba$stdlib=1\nconst dashRegex = /-./g;\nexport const __served__ = new Set;\n\nlet c$0 = Symbol();\nexport class LazyProxy {\n\tstatic for(getter){\n\t\treturn new Proxy({},new this(getter));\n\t}\n\t\n\tconstructor(getter){\n\t\tthis.getter = getter;\n\t}\n\t\n\tget target(){\n\t\treturn this.getter();\n\t}\n\t\n\tget(_,key){\n\t\treturn this.target[key];\n\t}\n\t\n\tset(_,key,value){\n\t\tthis.target[key] = value;\n\t\treturn true;\n\t}\n\tstatic { register$(this,c$0,'LazyProxy',16) }\n};\n\nexport function proxy(getter,placeholder = {}){\n\treturn new Proxy(placeholder,new LazyProxy(getter));\n};\n\nexport function parseTime(value){\n\tlet typ = typeof value;\n\tif (typ == 'number') {\n\t\treturn value;\n\t};\n\t\n\tif (typ == 'string') {\n\t\tif ((/^\\d+fps$/).test(value)) {\n\t\t\treturn 1000 / parseFloat(value);\n\t\t} else if ((/^([-+]?[\\d\\.]+)s$/).test(value)) {\n\t\t\treturn parseFloat(value) * 1000;\n\t\t} else if ((/^([-+]?[\\d\\.]+)ms$/).test(value)) {\n\t\t\treturn parseFloat(value);\n\t\t};\n\t};\n\t// throw or return NaN?\n\treturn null;\n};\n\nexport function toCamelCase(str){\n\tif (str.indexOf('-') >= 0) {\n\t\treturn str.replace(dashRegex,function(_0) { return _0.charAt(1).toUpperCase(); });\n\t} else {\n\t\treturn str;\n\t};\n};\n\nexport function getDeepPropertyDescriptor(item,key,stop){\n\tif (!(item)) {\n\t\treturn undefined;\n\t};\n\t\n\tlet desc = Object.getOwnPropertyDescriptor(item,key);\n\t\n\tif (desc || item == stop) {\n\t\treturn desc || undefined;\n\t};\n\t\n\treturn getDeepPropertyDescriptor(Reflect.getPrototypeOf(item),key,stop);\n};\n\n\n// Basic events - move to separate file?\nconst emit__ = function(event,args,node) {\n\tlet prev;\n\tlet cb;\n\tlet ret;\n\t\n\twhile ((prev = node) && (node = node.next)){\n\t\tif (cb = node.listener) {\n\t\t\tif (node.path && cb[node.path]) {\n\t\t\t\tret = args ? cb[node.path].apply(cb,args) : cb[node.path]();\n\t\t\t} else {\n\t\t\t\t// check if it is a method?\n\t\t\t\tret = args ? cb.apply(node,args) : cb.call(node);\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (node.times && --node.times <= 0) {\n\t\t\tprev.next = node.next;\n\t\t\tnode.listener = null;\n\t\t};\n\t};\n\treturn;\n};\n\n// method for registering a listener on object\nexport function listen(obj,event,listener,path){\n\tlet cbs;\n\tlet list;\n\tlet tail;\n\tcbs = obj[$__listeners__$] ||= {};\n\tlist = cbs[event] ||= {};\n\ttail = list.tail || (list.tail = (list.next = {}));\n\ttail.listener = listener;\n\ttail.path = path;\n\tlist.tail = tail.next = {};\n\treturn tail;\n};\n\n// register a listener once\nexport function once(obj,event,listener){\n\tlet tail = listen(obj,event,listener);\n\ttail.times = 1;\n\treturn tail;\n};\n\n// remove a listener\nexport function unlisten(obj,event,cb,meth){\n\tif (!(cb)) { return };\n\tlet node;\n\tlet prev;\n\tlet meta = obj[$__listeners__$];\n\tif (!(meta)) { return };\n\t\n\tif (node = meta[event]) {\n\t\twhile ((prev = node) && (node = node.next)){\n\t\t\tif (node == cb || node.listener == cb) {\n\t\t\t\tprev.next = node.next;\n\t\t\t\t// check for correct path as well?\n\t\t\t\tnode.listener = null;\n\t\t\t\tbreak;\n\t\t\t};\n\t\t};\n\t};\n\treturn;\n};\n\n// emit event\nexport function emit(obj,event,params = null){\n\tlet cb;\n\tif (cb = obj[$__listeners__$]) {\n\t\tif (cb[event]) { emit__(event,params,cb[event]) };\n\t\tif (cb.all) { emit__(event,[event,params],cb.all) };\n\t};\n\treturn;\n};\n\nlet c$1 = Symbol();\nexport class Emitter {\n\temit(name,...params){\n\t\treturn emit(this,name,params);\n\t}\n\ton(name,...params){\n\t\treturn listen(this,name,...params);\n\t}\n\tonce(name,...params){\n\t\treturn once(this,name,...params);\n\t}\n\tun(name,...params){\n\t\treturn unlisten(this,name,...params);\n\t}\n\tstatic { register$(this,c$1,'Emitter',0) }\n};\n\nexport function defineConfig(config){\n\treturn config;\n};\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}