{"id":"cc","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) };\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $parent$ = Symbol.for('#parent'), $closestNode$ = Symbol.for('#closestNode'), $isRichElement$ = Symbol.for('#isRichElement'), $afterVisit$ = Symbol.for('#afterVisit'), $getRenderContext$ = Symbol.for('#getRenderContext'), $appendChild$ = Symbol.for('#appendChild'), $removeChild$ = Symbol.for('#removeChild'), $replaceChild$ = Symbol.for('#replaceChild'), $insertInto$ = Symbol.for('#insertInto'), $replaceWith$ = Symbol.for('#replaceWith'), $insertChild$ = Symbol.for('#insertChild'), $removeFrom$ = Symbol.for('#removeFrom'), $placeChild$ = Symbol.for('#placeChild'), $registerFunctionalSlot$ = Symbol.for('#registerFunctionalSlot'), $getFunctionalSlot$ = Symbol.for('#getFunctionalSlot'), $getSlot$ = Symbol.for('#getSlot'), $$parent$ = Symbol.for('##parent'), $$up$ = Symbol.for('##up'), $$flags$ = Symbol.for('##flags'), $domFlags$ = Symbol.for('#domFlags'), $end$ = Symbol.for('#end'), $textContent$ = Symbol.for('#textContent'), $textNode$ = Symbol.for('#textNode'), $functionalSlots$ = Symbol.for('#functionalSlots');\n\n/*body*/\n// imba$stdlib=1\nimport {Text,createComment,createTextNode,Comment,Node} from './core';\nimport {RenderContext,createRenderContext} from './context';\nimport {Flags} from './flags';\n\nexport function use_slots(){\n\treturn true;\n};\n\nlet c$0 = Symbol();\nexport class Fragment {\n\tconstructor(){\n\t\tthis.childNodes = [];\n\t}\n\t\n\tlog(...params){\n\t\treturn;\n\t}\n\t\n\thasChildNodes(){\n\t\treturn false;\n\t}\n\t\n\tset [$parent$](value){\n\t\tthis[$$parent$] = value;\n\t}\n\t\n\tget [$parent$](){\n\t\treturn this[$$parent$] || this[$$up$];\n\t}\n\t\n\tget [$closestNode$](){\n\t\treturn this[$parent$][$closestNode$];\n\t}\n\t\n\tget [$isRichElement$](){\n\t\treturn true;\n\t}\n\t\n\tget flags(){\n\t\treturn this[$$flags$] ||= new Flags(this);\n\t}\n\t\n\tflagSync$(){\n\t\treturn this;\n\t}\n\t\n\t[$afterVisit$](){\n\t\treturn this;\n\t}\n\t\n\t[$getRenderContext$](sym){\n\t\treturn createRenderContext(this,sym);\n\t}\n\tstatic { register$(this,c$0,'Fragment',16) }\n};\n\nlet counter = 0;\n// like a list\nlet c$1 = Symbol();\nclass VirtualFragment extends Fragment {\n\tconstructor(flags,parent){\n\t\tsuper(...arguments);\n\t\tthis[$$up$] = parent;\n\t\tthis.parentNode = null;\n\t\tthis[$domFlags$] = flags;\n\t\tthis.childNodes = [];\n\t\tthis[$end$] = createComment('slot' + counter++);\n\t\t\n\t\tif (parent) {\n\t\t\tparent[$appendChild$](this);\n\t\t};\n\t}\n\t\n\tget [$parent$](){\n\t\treturn this[$$parent$] || this.parentNode || this[$$up$];\n\t}\n\t\n\tset textContent(text){\n\t\tthis[$textContent$] = text;\n\t}\n\t\n\tget textContent(){\n\t\treturn this[$textContent$];\n\t}\n\t\n\thasChildNodes(){\n\t\tfor (let $1 = 0, $2 = iter$__(this.childNodes), $3 = $2.length; $1 < $3; $1++) {\n\t\t\tlet item = $2[$1];\n\t\t\tif (isa$(item,Fragment)) {\n\t\t\t\tif (item.hasChildNodes()) { return true };\n\t\t\t};\n\t\t\tif (isa$(item,Comment)) {\n\t\t\t\ttrue;\n\t\t\t} else if (isa$(item,Node)) {\n\t\t\t\treturn true;\n\t\t\t};\n\t\t\t\n\t\t\t// unless item isa Comment\n\t\t\t// return false\n\t\t};\n\t\treturn false;\n\t\t// #children.length == 0\n\t}\n\t\n\ttext$(item){\n\t\tif (!(this[$textNode$])) {\n\t\t\tthis[$textNode$] = this[$placeChild$](item);\n\t\t} else {\n\t\t\tthis[$textNode$].textContent = item;\n\t\t};\n\t\treturn this[$textNode$];\n\t}\n\t\n\tappendChild(child){\n\t\tif (this.parentNode) {\n\t\t\tchild[$insertInto$](this.parentNode,this[$end$]);\n\t\t};\n\t\treturn this.childNodes.push(child);\n\t}\n\t\n\t[$appendChild$](child){\n\t\tif (this.parentNode) {\n\t\t\tchild[$insertInto$](this.parentNode,this[$end$]);\n\t\t} else {\n\t\t\tchild[$$up$] ??= (this[$$up$] || this);\n\t\t};\n\t\treturn this.childNodes.push(child);\n\t}\n\t\n\tinsertBefore(node,refnode){\n\t\t// check if this should really happen?\n\t\tif (this.parentNode) {\n\t\t\tthis.parentNode[$insertChild$](node,refnode);\n\t\t};\n\t\tlet idx = this.childNodes.indexOf(refnode);\n\t\tif (idx >= 0) {\n\t\t\tthis.childNodes.splice(idx,0,node);\n\t\t};\n\t\treturn node;\n\t}\n\t\n\t[$removeChild$](node){\n\t\tif (this.parentNode) {\n\t\t\tthis.parentNode[$removeChild$](node);\n\t\t};\n\t\tlet idx = this.childNodes.indexOf(node);\n\t\tif (idx >= 0) {\n\t\t\tthis.childNodes.splice(idx,1);\n\t\t};\n\t\treturn;\n\t}\n\t\n\t[$replaceChild$](newnode,oldnode){\n\t\tif (this.parentNode) {\n\t\t\tthis.parentNode[$replaceChild$](newnode,oldnode);\n\t\t};\n\t\tlet idx = this.childNodes.indexOf(oldnode);// what if text?\n\t\tthis.childNodes[idx] = newnode;\n\t\t// let res = #insertChild(newnode,oldnode)\n\t\t// #removeChild(oldnode)\n\t\treturn newnode;\n\t}\n\t\n\t[$insertInto$](parent,before){\n\t\tlet prev = this.parentNode;\n\t\t\n\t\tif ((this.parentNode != parent) ? ((this.parentNode = parent,true)) : false) {\n\t\t\t// log '#insertInto',parent,prev,before,#end\n\t\t\t\t\t\t// what if before is a fragment etc?\n\t\t\tif (this[$end$]) {\n\t\t\t\tbefore = this[$end$][$insertInto$](parent,before);\n\t\t\t};\n\t\t\t// before = #end\n\t\t\tfor (let $4 = 0, $5 = iter$__(this.childNodes), $6 = $5.length; $4 < $6; $4++) {\n\t\t\t\tlet item = $5[$4];\n\t\t\t\titem[$insertInto$](parent,before);\n\t\t\t};\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$replaceWith$](node,parent){\n\t\t// log '#replaceWith',node,parent\n\t\t\t\t// what if this\n\t\t\t\t// log 'replaced with',node,parent\n\t\tlet res = node[$insertInto$](parent,this[$end$]);\n\t\tthis[$removeFrom$](parent);\n\t\treturn res;\n\t}\n\t\n\t[$insertChild$](node,refnode){\n\t\tif (this.parentNode) {\n\t\t\tthis.insertBefore(node,refnode || this[$end$]);\n\t\t};\n\t\t\n\t\tif (refnode) {\n\t\t\tlet idx = this.childNodes.indexOf(refnode);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis.childNodes.splice(idx,0,node);\n\t\t\t};\n\t\t} else {\n\t\t\tthis.childNodes.push(node);\n\t\t};\n\t\treturn node;\n\t\t\n\t\t// for item in #children\n\t\t// \titem.#removeFrom(parent)\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\tfor (let $7 = 0, $8 = iter$__(this.childNodes), $9 = $8.length; $7 < $9; $7++) {\n\t\t\t// log '#removeFrom',item,parent\n\t\t\tlet item = $8[$7];\n\t\t\titem[$removeFrom$](parent);\n\t\t};\n\t\tif (this[$end$]) { this[$end$][$removeFrom$](parent) };\n\t\tthis.parentNode = null;\n\t\treturn this;\n\t}\n\t\n\t[$placeChild$](item,f,prev){\n\t\tlet par = this.parentNode;\n\t\tlet type = typeof item;\n\t\t\n\t\tif (type === 'undefined' || item === null) {\n\t\t\tif (prev && isa$(prev,Comment)) { // check perf\n\t\t\t\treturn prev;\n\t\t\t};\n\t\t\t\n\t\t\tlet el = createComment('');\n\t\t\t\n\t\t\tif (prev) {\n\t\t\t\tlet idx = this.childNodes.indexOf(prev);\n\t\t\t\tthis.childNodes.splice(idx,1,el);\n\t\t\t\tif (par) {\n\t\t\t\t\tprev[$replaceWith$](el,par);\n\t\t\t\t};\n\t\t\t\t// parentNode.#insert(item,f,prev or #end)\n\t\t\t\treturn el;\n\t\t\t};\n\t\t\t\n\t\t\tthis.childNodes.push(el);\n\t\t\tif (par) { el[$insertInto$](par,this[$end$]) };\n\t\t\treturn el;\n\t\t\t// return prev ? prev.#replaceWith(el,self) : el.#insertInto(this,null)\n\t\t};\n\t\t\n\t\tif (item === prev) {\n\t\t\treturn item;\n\t\t};\n\t\t\n\t\tif (type !== 'object') {\n\t\t\tlet res;\n\t\t\tlet txt = item;\n\t\t\t\n\t\t\tif (prev) {\n\t\t\t\tif (isa$(prev,Text)) { // check perf\n\t\t\t\t\tprev.textContent = txt;\n\t\t\t\t\treturn prev;\n\t\t\t\t} else {\n\t\t\t\t\tres = createTextNode(txt);\n\t\t\t\t\tlet idx = this.childNodes.indexOf(prev);\n\t\t\t\t\tthis.childNodes.splice(idx,1,res);\n\t\t\t\t\tif (par) { prev[$replaceWith$](res,par) };\n\t\t\t\t\treturn res;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.childNodes.push(res = createTextNode(txt));\n\t\t\t\t// self.appendChild$(res = createTextNode(txt))\n\t\t\t\tif (par) { res[$insertInto$](par,this[$end$]) };\n\t\t\t\treturn res;\n\t\t\t};\n\t\t} else if (prev) {\n\t\t\tlet idx = this.childNodes.indexOf(prev);\n\t\t\tthis.childNodes.splice(idx,1,item);\n\t\t\tif (par) { prev[$replaceWith$](item,par) };\n\t\t\treturn item;\n\t\t} else {\n\t\t\tthis.childNodes.push(item);\n\t\t\tif (par) { item[$insertInto$](par,this[$end$]) };\n\t\t\treturn item;\n\t\t};\n\t}\n\tstatic { register$(this,c$1,'VirtualFragment',16) }\n};\n\nexport function createLiveFragment(bitflags,par){\n\tconst el = new VirtualFragment(bitflags,par);\n\treturn el;\n};\n\nexport function createSlot(bitflags,par){\n\tconst el = new VirtualFragment(bitflags,null);\n\tel[$$up$] = par;\n\t// el.setup$(bitflags, options)\n\t// el.##up = par if par\n\treturn el;\n};\n\nlet c$2 = Symbol();\nclass Î©Node {\n\t[$registerFunctionalSlot$](name){\n\t\tlet map = this[$functionalSlots$] ||= {};\n\t\treturn map[name] ||= createSlot(0,this);\n\t}\n\t\n\t[$getFunctionalSlot$](name,context){\n\t\tlet map = this[$functionalSlots$];\n\t\treturn map && map[name] || this[$getSlot$](name,context);\n\t}\n\t\n\t[$getSlot$](name,context){\n\t\tif ((name == '__' && !(this.render)) || !(this.__slots)) {\n\t\t\treturn this;\n\t\t};\n\t\treturn this.__slots[name] ||= createSlot(0,this);\n\t}\n\tstatic { register$(this,c$2,'Node',1,Node); }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhZ21lbnQuaW1iYSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZyYWdtZW50LmltYmEiXSwic291cmNlc0NvbnRlbnQiOlsiIyBpbWJhJHN0ZGxpYj0xXG5pbXBvcnQge1RleHQsY3JlYXRlQ29tbWVudCxjcmVhdGVUZXh0Tm9kZSxDb21tZW50LE5vZGV9IGZyb20gJy4vY29yZSdcbmltcG9ydCB7UmVuZGVyQ29udGV4dCxjcmVhdGVSZW5kZXJDb250ZXh0fSBmcm9tICcuL2NvbnRleHQnXG5pbXBvcnQge0ZsYWdzfSBmcm9tICcuL2ZsYWdzJ1xuXG5leHBvcnQgZGVmIHVzZV9zbG90c1xuXHR5ZXNcblxuZXhwb3J0IGNsYXNzIEZyYWdtZW50XG5cblx0ZGVmIGNvbnN0cnVjdG9yXG5cdFx0Y2hpbGROb2RlcyA9IFtdXG5cblx0ZGVmIGxvZyAuLi5wYXJhbXNcblx0XHRyZXR1cm5cblxuXHRkZWYgaGFzQ2hpbGROb2Rlc1xuXHRcdGZhbHNlXG5cblx0c2V0ICNwYXJlbnQgdmFsdWVcblx0XHQjI3BhcmVudCA9IHZhbHVlXG5cblx0Z2V0ICNwYXJlbnRcblx0XHQjI3BhcmVudCBvciAjI3VwXG5cblx0Z2V0ICNjbG9zZXN0Tm9kZVxuXHRcdCNwYXJlbnQuI2Nsb3Nlc3ROb2RlXG5cblx0Z2V0ICNpc1JpY2hFbGVtZW50XG5cdFx0eWVzXG5cblx0Z2V0IGZsYWdzXG5cdFx0IyNmbGFncyB8fD0gbmV3IEZsYWdzKHNlbGYpXG5cblx0ZGVmIGZsYWdTeW5jJFxuXHRcdHNlbGZcblxuXHRkZWYgI2FmdGVyVmlzaXRcblx0XHRzZWxmXG5cblx0ZGVmICNnZXRSZW5kZXJDb250ZXh0IHN5bVxuXHRcdGNyZWF0ZVJlbmRlckNvbnRleHQoc2VsZixzeW0pXG5cbmxldCBjb3VudGVyID0gMFxuIyBsaWtlIGEgbGlzdFxuY2xhc3MgVmlydHVhbEZyYWdtZW50IDwgRnJhZ21lbnRcblx0ZGVmIGNvbnN0cnVjdG9yIGZsYWdzLCBwYXJlbnRcblx0XHRzdXBlclxuXHRcdCMjdXAgPSBwYXJlbnRcblx0XHRwYXJlbnROb2RlID0gbnVsbFxuXHRcdCNkb21GbGFncyA9IGZsYWdzXG5cdFx0Y2hpbGROb2RlcyA9IFtdXG5cdFx0I2VuZCA9IGNyZWF0ZUNvbW1lbnQoJ3Nsb3QnICsgY291bnRlcisrKVxuXG5cdFx0aWYgcGFyZW50XG5cdFx0XHRwYXJlbnQuI2FwcGVuZENoaWxkKHNlbGYpXG5cblx0Z2V0ICNwYXJlbnRcblx0XHQjI3BhcmVudCBvciBwYXJlbnROb2RlIG9yICMjdXBcblxuXHRzZXQgdGV4dENvbnRlbnQgdGV4dFxuXHRcdCN0ZXh0Q29udGVudCA9IHRleHRcblxuXHRnZXQgdGV4dENvbnRlbnRcblx0XHQjdGV4dENvbnRlbnRcblxuXHRkZWYgaGFzQ2hpbGROb2Rlc1xuXHRcdGZvciBpdGVtIGluIGNoaWxkTm9kZXNcblx0XHRcdGlmIGl0ZW0gaXNhIEZyYWdtZW50XG5cdFx0XHRcdHJldHVybiB0cnVlIGlmIGl0ZW0uaGFzQ2hpbGROb2RlcyFcblx0XHRcdGlmIGl0ZW0gaXNhIENvbW1lbnRcblx0XHRcdFx0eWVzXG5cdFx0XHRlbGlmIGl0ZW0gaXNhIE5vZGVcblx0XHRcdFx0cmV0dXJuIHRydWVcblxuXHRcdFx0IyB1bmxlc3MgaXRlbSBpc2EgQ29tbWVudFxuXHRcdFx0I1x0cmV0dXJuIGZhbHNlXG5cdFx0cmV0dXJuIGZhbHNlXG5cdFx0IyAjY2hpbGRyZW4ubGVuZ3RoID09IDBcblxuXHRkZWYgdGV4dCQgaXRlbVxuXHRcdHVubGVzcyAjdGV4dE5vZGVcblx0XHRcdCN0ZXh0Tm9kZSA9ICNwbGFjZUNoaWxkKGl0ZW0pXG5cdFx0ZWxzZVxuXHRcdFx0I3RleHROb2RlLnRleHRDb250ZW50ID0gaXRlbVxuXHRcdHJldHVybiAjdGV4dE5vZGVcblxuXHRkZWYgYXBwZW5kQ2hpbGQgY2hpbGRcblx0XHRpZiBwYXJlbnROb2RlXG5cdFx0XHRjaGlsZC4jaW5zZXJ0SW50byhwYXJlbnROb2RlLCNlbmQpXG5cdFx0Y2hpbGROb2Rlcy5wdXNoKGNoaWxkKVxuXG5cdGRlZiAjYXBwZW5kQ2hpbGQgY2hpbGRcblx0XHRpZiBwYXJlbnROb2RlXG5cdFx0XHRjaGlsZC4jaW5zZXJ0SW50byhwYXJlbnROb2RlLCNlbmQpXG5cdFx0ZWxzZVxuXHRcdFx0Y2hpbGQuIyN1cCA/Pz0gKCMjdXAgb3Igc2VsZilcblx0XHRjaGlsZE5vZGVzLnB1c2goY2hpbGQpXG5cblx0ZGVmIGluc2VydEJlZm9yZSBub2RlLHJlZm5vZGVcblx0XHQjIGNoZWNrIGlmIHRoaXMgc2hvdWxkIHJlYWxseSBoYXBwZW4/XG5cdFx0aWYgcGFyZW50Tm9kZVxuXHRcdFx0cGFyZW50Tm9kZS4jaW5zZXJ0Q2hpbGQobm9kZSxyZWZub2RlKVxuXHRcdGxldCBpZHggPSBjaGlsZE5vZGVzLmluZGV4T2YocmVmbm9kZSlcblx0XHRpZiBpZHggPj0gMFxuXHRcdFx0Y2hpbGROb2Rlcy5zcGxpY2UoaWR4LDAsbm9kZSlcblx0XHRyZXR1cm4gbm9kZVxuXG5cdGRlZiAjcmVtb3ZlQ2hpbGQgbm9kZVxuXHRcdGlmIHBhcmVudE5vZGVcblx0XHRcdHBhcmVudE5vZGUuI3JlbW92ZUNoaWxkKG5vZGUpXG5cdFx0bGV0IGlkeCA9IGNoaWxkTm9kZXMuaW5kZXhPZihub2RlKVxuXHRcdGlmIGlkeCA+PSAwXG5cdFx0XHRjaGlsZE5vZGVzLnNwbGljZShpZHgsMSlcblx0XHRyZXR1cm5cblxuXHRkZWYgI3JlcGxhY2VDaGlsZCBuZXdub2RlLCBvbGRub2RlXG5cdFx0aWYgcGFyZW50Tm9kZVxuXHRcdFx0cGFyZW50Tm9kZS4jcmVwbGFjZUNoaWxkKG5ld25vZGUsb2xkbm9kZSlcblx0XHRsZXQgaWR4ID0gY2hpbGROb2Rlcy5pbmRleE9mKG9sZG5vZGUpICMgd2hhdCBpZiB0ZXh0P1xuXHRcdGNoaWxkTm9kZXNbaWR4XSA9IG5ld25vZGVcblx0XHQjIGxldCByZXMgPSAjaW5zZXJ0Q2hpbGQobmV3bm9kZSxvbGRub2RlKVxuXHRcdCMgI3JlbW92ZUNoaWxkKG9sZG5vZGUpXG5cdFx0cmV0dXJuIG5ld25vZGVcblxuXHRkZWYgI2luc2VydEludG8gcGFyZW50LCBiZWZvcmVcblx0XHRsZXQgcHJldiA9IHBhcmVudE5vZGVcblxuXHRcdGlmIHBhcmVudE5vZGUgPT8gcGFyZW50XG5cdFx0XHQjIGxvZyAnI2luc2VydEludG8nLHBhcmVudCxwcmV2LGJlZm9yZSwjZW5kXG5cdFx0XHQjIHdoYXQgaWYgYmVmb3JlIGlzIGEgZnJhZ21lbnQgZXRjP1xuXHRcdFx0aWYgI2VuZFxuXHRcdFx0XHRiZWZvcmUgPSAjZW5kLiNpbnNlcnRJbnRvKHBhcmVudCxiZWZvcmUpXG5cdFx0XHQjIGJlZm9yZSA9ICNlbmRcblx0XHRcdGZvciBpdGVtIGluIGNoaWxkTm9kZXNcblx0XHRcdFx0aXRlbS4jaW5zZXJ0SW50byhwYXJlbnQsYmVmb3JlKVxuXHRcdHJldHVybiBzZWxmXG5cblx0ZGVmICNyZXBsYWNlV2l0aCBub2RlLCBwYXJlbnRcblx0XHQjIGxvZyAnI3JlcGxhY2VXaXRoJyxub2RlLHBhcmVudFxuXHRcdCMgd2hhdCBpZiB0aGlzXG5cdFx0IyBsb2cgJ3JlcGxhY2VkIHdpdGgnLG5vZGUscGFyZW50XG5cdFx0bGV0IHJlcyA9IG5vZGUuI2luc2VydEludG8ocGFyZW50LCNlbmQpXG5cdFx0I3JlbW92ZUZyb20ocGFyZW50KVxuXHRcdHJlc1xuXG5cdGRlZiAjaW5zZXJ0Q2hpbGQgbm9kZSxyZWZub2RlXG5cdFx0aWYgcGFyZW50Tm9kZVxuXHRcdFx0aW5zZXJ0QmVmb3JlKG5vZGUscmVmbm9kZSBvciAjZW5kKVxuXG5cdFx0aWYgcmVmbm9kZVxuXHRcdFx0bGV0IGlkeCA9IGNoaWxkTm9kZXMuaW5kZXhPZihyZWZub2RlKVxuXHRcdFx0aWYgaWR4ID49IDBcblx0XHRcdFx0Y2hpbGROb2Rlcy5zcGxpY2UoaWR4LDAsbm9kZSlcblx0XHRlbHNlXG5cdFx0XHRjaGlsZE5vZGVzLnB1c2gobm9kZSlcblx0XHRyZXR1cm4gbm9kZVxuXG5cdFx0IyBmb3IgaXRlbSBpbiAjY2hpbGRyZW5cblx0XHQjIFx0aXRlbS4jcmVtb3ZlRnJvbShwYXJlbnQpXG5cblx0ZGVmICNyZW1vdmVGcm9tIHBhcmVudFxuXHRcdGZvciBpdGVtIGluIGNoaWxkTm9kZXNcblx0XHRcdCMgbG9nICcjcmVtb3ZlRnJvbScsaXRlbSxwYXJlbnRcblx0XHRcdGl0ZW0uI3JlbW92ZUZyb20ocGFyZW50KVxuXHRcdCNlbmQuI3JlbW92ZUZyb20ocGFyZW50KSBpZiAjZW5kXG5cdFx0cGFyZW50Tm9kZSA9IG51bGxcblx0XHRzZWxmXG5cblx0ZGVmICNwbGFjZUNoaWxkIGl0ZW0sIGYsIHByZXZcblx0XHRsZXQgcGFyID0gcGFyZW50Tm9kZVxuXHRcdGxldCB0eXBlID0gdHlwZW9mIGl0ZW1cblxuXHRcdGlmIHR5cGUgPT09ICd1bmRlZmluZWQnIG9yIGl0ZW0gPT09IG51bGxcblx0XHRcdGlmIHByZXYgYW5kIHByZXYgaXNhIENvbW1lbnQgIyBjaGVjayBwZXJmXG5cdFx0XHRcdHJldHVybiBwcmV2XG5cblx0XHRcdGxldCBlbCA9IGNyZWF0ZUNvbW1lbnQoJycpXG5cblx0XHRcdGlmIHByZXZcblx0XHRcdFx0bGV0IGlkeCA9IGNoaWxkTm9kZXMuaW5kZXhPZihwcmV2KVxuXHRcdFx0XHRjaGlsZE5vZGVzLnNwbGljZShpZHgsMSxlbClcblx0XHRcdFx0aWYgcGFyXG5cdFx0XHRcdFx0cHJldi4jcmVwbGFjZVdpdGgoZWwscGFyKVxuXHRcdFx0XHQjIHBhcmVudE5vZGUuI2luc2VydChpdGVtLGYscHJldiBvciAjZW5kKVxuXHRcdFx0XHRyZXR1cm4gZWxcblxuXHRcdFx0Y2hpbGROb2Rlcy5wdXNoKGVsKVxuXHRcdFx0ZWwuI2luc2VydEludG8ocGFyLCNlbmQpIGlmIHBhclxuXHRcdFx0cmV0dXJuIGVsXG5cdFx0XHQjIHJldHVybiBwcmV2ID8gcHJldi4jcmVwbGFjZVdpdGgoZWwsc2VsZikgOiBlbC4jaW5zZXJ0SW50byh0aGlzLG51bGwpXG5cblx0XHRpZiBpdGVtID09PSBwcmV2XG5cdFx0XHRyZXR1cm4gaXRlbVxuXG5cdFx0aWYgdHlwZSAhPT0gJ29iamVjdCdcblx0XHRcdGxldCByZXNcblx0XHRcdGxldCB0eHQgPSBpdGVtXG5cblx0XHRcdGlmIHByZXZcblx0XHRcdFx0aWYgcHJldiBpc2EgVGV4dCAjIGNoZWNrIHBlcmZcblx0XHRcdFx0XHRwcmV2LnRleHRDb250ZW50ID0gdHh0XG5cdFx0XHRcdFx0cmV0dXJuIHByZXZcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHJlcyA9IGNyZWF0ZVRleHROb2RlKHR4dClcblx0XHRcdFx0XHRsZXQgaWR4ID0gY2hpbGROb2Rlcy5pbmRleE9mKHByZXYpXG5cdFx0XHRcdFx0Y2hpbGROb2Rlcy5zcGxpY2UoaWR4LDEscmVzKVxuXHRcdFx0XHRcdHByZXYuI3JlcGxhY2VXaXRoKHJlcyxwYXIpIGlmIHBhclxuXHRcdFx0XHRcdHJldHVybiByZXNcblx0XHRcdGVsc2Vcblx0XHRcdFx0Y2hpbGROb2Rlcy5wdXNoKHJlcyA9IGNyZWF0ZVRleHROb2RlKHR4dCkpXG5cdFx0XHRcdCMgc2VsZi5hcHBlbmRDaGlsZCQocmVzID0gY3JlYXRlVGV4dE5vZGUodHh0KSlcblx0XHRcdFx0cmVzLiNpbnNlcnRJbnRvKHBhciwjZW5kKSBpZiBwYXJcblx0XHRcdFx0cmV0dXJuIHJlc1xuXG5cdFx0ZWxpZiBwcmV2XG5cdFx0XHRsZXQgaWR4ID0gY2hpbGROb2Rlcy5pbmRleE9mKHByZXYpXG5cdFx0XHRjaGlsZE5vZGVzLnNwbGljZShpZHgsMSxpdGVtKVxuXHRcdFx0cHJldi4jcmVwbGFjZVdpdGgoaXRlbSxwYXIpIGlmIHBhclxuXHRcdFx0cmV0dXJuIGl0ZW1cblx0XHRlbHNlXG5cdFx0XHRjaGlsZE5vZGVzLnB1c2goaXRlbSlcblx0XHRcdGl0ZW0uI2luc2VydEludG8ocGFyLCNlbmQpIGlmIHBhclxuXHRcdFx0cmV0dXJuIGl0ZW1cblxuZXhwb3J0IGRlZiBjcmVhdGVMaXZlRnJhZ21lbnQgYml0ZmxhZ3MsIHBhclxuXHRjb25zdCBlbCA9IG5ldyBWaXJ0dWFsRnJhZ21lbnQoYml0ZmxhZ3MsIHBhcilcblx0cmV0dXJuIGVsXG5cbmV4cG9ydCBkZWYgY3JlYXRlU2xvdCBiaXRmbGFncywgcGFyXG5cdGNvbnN0IGVsID0gbmV3IFZpcnR1YWxGcmFnbWVudChiaXRmbGFncywgbnVsbClcblx0ZWwuIyN1cCA9IHBhclxuXHQjIGVsLnNldHVwJChiaXRmbGFncywgb3B0aW9ucylcblx0IyBlbC4jI3VwID0gcGFyIGlmIHBhclxuXHRyZXR1cm4gZWxcblxuZXh0ZW5kIGNsYXNzIE5vZGVcblx0ZGVmICNyZWdpc3RlckZ1bmN0aW9uYWxTbG90IG5hbWVcblx0XHRsZXQgbWFwID0gI2Z1bmN0aW9uYWxTbG90cyB8fD0ge31cblx0XHRtYXBbbmFtZV0gfHw9IGNyZWF0ZVNsb3QoMCxzZWxmKVxuXG5cdGRlZiAjZ2V0RnVuY3Rpb25hbFNsb3QgbmFtZSwgY29udGV4dFxuXHRcdGxldCBtYXAgPSAjZnVuY3Rpb25hbFNsb3RzXG5cdFx0cmV0dXJuIG1hcCBhbmQgbWFwW25hbWVdIG9yICNnZXRTbG90KG5hbWUsY29udGV4dClcblxuXHRkZWYgI2dldFNsb3QgbmFtZSwgY29udGV4dFxuXHRcdGlmIChuYW1lID09ICdfXycgYW5kICFzZWxmLnJlbmRlcikgb3IgIV9fc2xvdHNcblx0XHRcdHJldHVybiBzZWxmXG5cdFx0cmV0dXJuIF9fc2xvdHNbbmFtZV0gfHw9IGNyZWF0ZVNsb3QoMCxzZWxmKVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0EsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sUUFBUTtBQUNyRSxNQUFNLEVBQUUsYUFBYSxDQUFDLG1CQUFtQixPQUFPLFdBQVc7QUFDM0QsTUFBTSxFQUFFLEtBQUssT0FBTyxTQUFTOztBQUU3QixNQUFNLENBQUMsUUFBRyxDQUFDLFNBQVMsRUFBQTtDQUNuQixPQUFBLElBQUc7Q0FBQTs7O0FBRUosTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUE7Q0FFaEIsV0FBVyxFQUFBO0VBQ2QsS0FB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","css":""}