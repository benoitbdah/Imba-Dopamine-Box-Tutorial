{"id":"dy","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }\n\n/*body*/\n// imba$stdlib=1\n\nexport function αlazy(target,key,desc){\n\tif (desc.get) {\n\t\tlet get = desc.get;\n\t\tdesc.get = function() {\n\t\t\tlet val = get.call(this);\n\t\t\tObject.defineProperty(this,key,{enumerable: false,value: val});\n\t\t\treturn val;\n\t\t};\n\t};\n\treturn desc;\n};\n\nexport function αbound(target,key,desc){\n\tvar $1, $2;\n\tif (isa$(desc.value,Function)) {\n\t\tlet fn = desc.value;\n\t\tdesc.get = function() {\n\t\t\tif (this == target) {\n\t\t\t\treturn fn;\n\t\t\t};\n\t\t\tlet val = fn.bind(this);\n\t\t\tObject.defineProperty(this,key,{enumerable: false,value: val});\n\t\t\treturn val;\n\t\t};\n\t\t((($1 = desc.value),delete desc.value, $1));\n\t\t((($2 = desc.writable),delete desc.writable, $2));\n\t};\n\treturn desc;\n};\n\nconst thenables = new WeakMap;\n\nexport function αthenable(target,key,desc){\n\tlet o = this[0] || {};\n\tlet val = desc.value;\n\tlet thensym = Symbol();\n\tlet weakmap = new WeakMap;\n\tlet meta = thenables.get(target);\n\tlet maxtime = o.timeout || (20 * 1000);\n\tlet readable = (\"\" + (target.constructor?.name || '') + `.` + String((typeof (key)==='symbol') ? key.description : key));\n\tmeta || thenables.set(target,meta = {});\n\t\n\tif (meta.key) {\n\t\tthrow new Error((`@thenable ` + readable + ` not allowed - @thenable ` + (meta.key) + ` already defined`));\n\t};\n\t\n\tif (!(isa$(val,Function))) {\n\t\tthrow new Error((`@thenable ` + readable + ` only supports functions`));\n\t};\n\t\n\tif (val.length > 0) {\n\t\tthrow new Error((`@thenable ` + readable + ` methods cannot be called with arguments`));\n\t};\n\t\n\tconst warn = function(target) {\n\t\treturn console.trace((`@thenable ` + readable + ` took more than ` + maxtime + `ms - make sure method does not return self.`),target);\n\t};\n\t\n\tconst lookup = function(that) {\n\t\tlet m = weakmap.get(that);\n\t\tm || weakmap.set(that,m = {});\n\t\treturn m;\n\t};\n\t\n\tconst wrapper = function(ok,err) {\n\t\tlet that = this;\n\t\tlet obj = lookup(that);\n\t\t\n\t\tlet promise = obj.promise ||= new Promise(function(resolve,reject) {\n\t\t\t// TODO add reference to resolver so that we can resolve it from outside\n\t\t\t\t\t\t// TODO should only happen in debug\n\t\t\tlet timeout = (o.timeout !== false) ? setTimeout(warn,o.timeout || (20 * 1000),that) : null;\n\t\t\t\n\t\t\tlet err = function(error) {\n\t\t\t\tif (timeout) { clearTimeout(timeout) };\n\t\t\t\tobj.met = true;\n\t\t\t\tobj.error = error;\n\t\t\t\tconsole.trace((`@thenable ` + readable + ` threw error`),error);\n\t\t\t\treturn reject(error);\n\t\t\t};\n\t\t\t\n\t\t\treturn that[key]().then(function() {\n\t\t\t\tif (timeout) { clearTimeout(timeout) };\n\t\t\t\tobj.met = true;\n\t\t\t\treturn resolve(that);\n\t\t\t},err);\n\t\t});\n\t\t\n\t\treturn promise.then(ok,err);\n\t};\n\t\n\tObject.defineProperty(target,'then',{\n\t\tenumerable: false,\n\t\tconfigurable: true,\n\t\tget: function() { return lookup(this).met ? null : wrapper; }\n\t});\n\t\n\tdesc.value = function(value) {\n\t\tlet m = lookup(this);\n\t\tm.wrapped ??= Promise.resolve(val.call(this,m));\n\t\treturn m.wrapped;\n\t};\n\t\n\tdesc.value.reset = function(target) {\n\t\tlet m = lookup(target);\n\t\tweakmap.delete(target);\n\t\treturn;\n\t};\n\t\n\tdesc.value.check = lookup;\n\t\n\treturn desc;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}