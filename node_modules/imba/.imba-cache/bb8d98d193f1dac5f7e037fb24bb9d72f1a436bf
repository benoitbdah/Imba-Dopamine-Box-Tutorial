{"id":"et","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }\nimport {register$} from 'imba/runtime';\nconst $enter$ = Symbol.for('#enter'), $resolved$ = Symbol.for('#resolved'), $leave$ = Symbol.for('#leave'), $afterVisitRouted$ = Symbol.for('#afterVisitRouted'), $afterVisitRouteTo$ = Symbol.for('#afterVisitRouteTo'), $doc$ = Symbol.for('#doc'), $version$ = Symbol.for('#version'), $routes$ = Symbol.for('#routes'), $origin$ = Symbol.for('#origin'), $request$ = Symbol.for('#request'), $hash$ = Symbol.for('#hash'), $routeTo$ = Symbol.for('#routeTo'), $path$ = Symbol.for('#path'), $match$ = Symbol.for('#match'), $options$ = Symbol.for('#options'), $cache$ = Symbol.for('#cache'), $unmatched$ = Symbol.for('#unmatched'), $active$ = Symbol.for('#active'), $resolvedPath$ = Symbol.for('#resolvedPath'), $dataKey$ = Symbol.for('#dataKey'), $activeKey$ = Symbol.for('#activeKey'), $urlKey$ = Symbol.for('#urlKey'), $dataMap$ = Symbol.for('#dataMap'), $href$ = Symbol.for('#href'), $route$ = Symbol.for('#route'), $context$ = Symbol.for('#context'), $afterVisit$ = Symbol.for('#afterVisit'), $routeHandler$ = Symbol.for('#routeHandler'), $parentNode$ = Symbol.for('#parentNode'), $visitContext$ = Symbol.for('#visitContext'), $$visitContext$ = Symbol.for('##visitContext'), $attachToParent$ = Symbol.for('#attachToParent'), $detachFromParent$ = Symbol.for('#detachFromParent'), $router$ = Symbol.for('#router');\n\n/*body*/\n// imba$stdlib=1\n\nlet routerInstance = null;\n\nimport {EventEmitter} from '../../../vendor/events';\n;\nimport {Location} from './location';\nimport {History} from './history';\nimport {Request} from './request';\nimport {RootRoute} from './route';\nimport {commit,scheduler} from '../scheduler';\nimport {proxy} from '../utils';\nimport {Queue} from '../queue';\n\n\n\nexport function use_router(){\n\tglobalThis.imba.use_router = true;\n\treturn true;\n};\n\nexport const router = proxy(function() {\n\treturn globalThis.document.router;\n});\n\nlet c$0 = Symbol();\nexport class Router extends EventEmitter {\n\t\n\t\n\t\n\t// support redirects\n\tconstructor(doc,o = {}){\n\t\tsuper();\n\t\tthis[$doc$] = doc;\n\t\tthis[$version$] = 0;\n\t\tthis[$routes$] = {};\n\t\t\n\t\tthis.aliases = {};\n\t\tthis.redirects = {};\n\t\tthis.rules = {};\n\t\tthis.matchers = {};\n\t\tthis.options = o;\n\t\tthis.busy = [];\n\t\tthis.queue = new Queue;\n\t\tthis.root = new RootRoute(this);\n\t\tthis.location = new Location(o.url || doc.location.href,this);\n\t\tthis.history = new History(this);\n\t\tthis.mode = o.mode || 'history';\n\t\t\n\t\t\n\t\tthis.queue.on('busy',function() {\n\t\t\treturn globalThis.document.flags.incr('_routing_');\n\t\t});\n\t\t\n\t\tthis.queue.on('idle',function() {\n\t\t\tglobalThis.document.flags.decr('_routing_');\n\t\t\treturn commit();\n\t\t});\n\t\t;\n\t\t\n\t\tthis.setup();\n\t\tthis;\n\t}\n\t\n\tget origin(){\n\t\treturn this[$origin$] ||= this[$doc$].location.origin;\n\t}\n\t\n\tget query(){\n\t\treturn this.location.query;\n\t}\n\t\n\tinit(){\n\t\tthis.refresh({mode: 'replace'});\n\t\treturn this;\n\t}\n\t\n\talias(from,to){\n\t\tthis.aliases[from] = to;\n\t\tthis.location.reparse();\n\t\treturn this;\n\t}\n\t\n\ttouch(){\n\t\treturn this[$version$]++;\n\t}\n\t\n\toption(key,value){\n\t\tif (value == undefined) {\n\t\t\treturn this.options[key];\n\t\t} else {\n\t\t\tthis.options[key] = value;\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tget realpath(){\n\t\t\n\t\tlet loc = this[$doc$].location;\n\t\treturn loc.href.slice(loc.origin.length);\n\t\t;\n\t}\n\t\n\tget state(){\n\t\treturn this.history.state;\n\t}\n\t\n\tget states(){\n\t\treturn this.history.currentStates;\n\t}\n\t\n\tset state(value){\n\t\t\n\t\tthis.state.data = value;\n\t\tthis.state.save();\n\t\t;\n\t\treturn;\n\t}\n\t\n\tget ctx(){\n\t\treturn this[$request$];\n\t}\n\t\n\tpushState(state,title,url){\n\t\treturn this.history.pushState(state,title || null,String(url));\n\t}\n\t\n\treplaceState(state,title,url){\n\t\treturn this.history.replaceState(state,title || null,String(url));\n\t}\n\t\n\t// called whenever the location might have changed for some reason\n\trefresh(params = {}){\n\t\tvar self = this;\n\t\tif (this.refreshing) { return };\n\t\tthis.refreshing = true;\n\t\t\n\t\tlet original = this.location;\n\t\tlet loc = Location.parse(params.location || this.realpath,this);\n\t\tlet mode = params.mode;\n\t\tlet prev = this[$request$];\n\t\t\n\t\t// we need to compare with the previously stored location\n\t\t// also see if state is different?\n\t\tif (!(loc.equals(original)) || !(prev) || params.state) {\n\t\t\tlet req = new Request(this,loc,original,params);\n\t\t\tthis[$request$] = req;\n\t\t\t// include the state as well?\n\t\t\tthis.emit('beforechange',req);\n\t\t\t\n\t\t\tif (req.aborted) {\n\t\t\t\tlet res = !(req.forceAbort) && globalThis.window.confirm(\"Are you sure you want to leave? You might have unsaved changes\");\n\t\t\t\t\n\t\t\t\tif (res) {\n\t\t\t\t\treq.aborted = false;\n\t\t\t\t} else if (mode == 'pop') {\n\t\t\t\t\tthis.pushState(this.state,null,String(original));\n\t\t\t\t} else if (mode == 'replace') { // mode != 'push' # !params:push\n\t\t\t\t\tthis.replaceState(this.state,null,String(original));\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// if we're not popping - should happen before we are changing\n\t\t\t};\n\t\t\t\n\t\t\tif (!(req.aborted)) {\n\t\t\t\tthis.location = req.location;\n\t\t\t\t\n\t\t\t\tif (mode == 'push') {\n\t\t\t\t\tthis.pushState(req.state,null,String(this.location));\n\t\t\t\t} else if (mode == 'replace') {\n\t\t\t\t\tthis.replaceState(req.state,null,String(this.location));\n\t\t\t\t} else if (mode == 'pop') {\n\t\t\t\t\tthis.history.index = params.index;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// need to be able to redirect here\n\t\t\t\tthis.refreshing = false;\n\t\t\t\tthis.emit('change',req);\n\t\t\t\tthis.touch();\n\t\t\t\tcommit();\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\tscheduler.add(function() {\n\t\t\tlet hash = self[$doc$].location.hash;\n\t\t\tif (hash != self[$hash$]) {\n\t\t\t\treturn self.emit('hashchange',self[$hash$] = hash);\n\t\t\t};\n\t\t});\n\t\t;\n\t\t\n\t\tthis.refreshing = false;\n\t\treturn this;\n\t}\n\t\n\tonpopstate(e){\n\t\tlet from = this.history.index;\n\t\tlet to = from;\n\t\t\n\t\tlet params = {\n\t\t\tpop: true,\n\t\t\tindex: 0,\n\t\t\tfrom: from,\n\t\t\tmode: 'pop'\n\t\t};\n\t\ttry {\n\t\t\tif (typeof e.state == 'string') {\n\t\t\t\tlet [id,step] = e.state.split('|');\n\t\t\t\tto = params.index = parseInt(step);\n\t\t\t\t\n\t\t\t\tif (to < from) {\n\t\t\t\t\tparams.revert = this.history.slice(to + 1,from + 1).reverse();\n\t\t\t\t} else if (to > from) {\n\t\t\t\t\tparams.apply = this.history.slice(from + 1,to + 1);\n\t\t\t\t};\n\t\t\t};\n\t\t} catch (e) { };\n\t\t\n\t\tthis.refresh(params);\n\t\treturn this;\n\t}\n\t\n\tonbeforeunload(e){\n\t\tlet req = new Request(this,null,this.location,{mode: 'unload'});\n\t\tthis.emit('beforechange',req);\n\t\tif (req.aborted) { return true };\n\t\treturn;\n\t}\n\t\n\tonhashchange(e){\n\t\tthis.emit('hashchange',this[$hash$] = this[$doc$].location.hash);\n\t\treturn commit();\n\t}\n\t\n\tsetup(){\n\t\t\n\t\tthis.onclick = this.onclick.bind(this);\n\t\tthis.onhashchange = this.onhashchange.bind(this);\n\t\tlet win = globalThis.window;\n\t\tthis[$hash$] = this[$doc$].location.hash;\n\t\tthis.location = Location.parse(this.realpath,this);\n\t\t\n\t\twin.onpopstate = this.onpopstate.bind(this);// do |e| onpopstate(e)\n\t\twin.onbeforeunload = this.onbeforeunload.bind(this);\n\t\t\n\t\twin.addEventListener('hashchange',this.onhashchange);\n\t\twin.addEventListener('click',this.onclick,{capture: true});\n\t\twin.document.documentElement.emit('routerinit',this);\n\t\tthis.refresh;\n\t\t;\n\t\treturn this;\n\t}\n\t\n\tonclick(e){\n\t\tif (e.metaKey || e.altKey) { return };\n\t\t\n\t\tlet a = null;\n\t\tlet r = null;\n\t\tlet t = e.target;\n\t\t\n\t\twhile (t && (!(a) || !(r))){\n\t\t\tif (!(a) && t.nodeName == 'A') { a = t };\n\t\t\tif (!(r) && t[$routeTo$]) { r = t };\n\t\t\tt = t.parentNode;\n\t\t};\n\t\t\n\t\tif (a && r != a && (!(r) || r.contains(a))) {\n\t\t\tlet href = a.getAttribute('href');\n\t\t\tif (href && !(href.match(/\\:\\/\\//)) && (!(a.getAttribute('target')) || a.getAttribute('target') == '_self') && !(a.classList.contains('external'))) {\n\t\t\t\ta.addEventListener('click',this.onclicklink.bind(this),{once: true});\n\t\t\t};\n\t\t};\n\t\treturn true;\n\t}\n\t\n\tonclicklink(e){\n\t\tlet a = e.currentTarget || e.target;\n\t\t\n\t\tif (a[$routeTo$]) {\n\t\t\ta[$routeTo$].resolve();\n\t\t};\n\t\t\n\t\tlet href = a.getAttribute('href');\n\t\tlet url = new URL(a.href);\n\t\tlet target = url.href.slice(url.origin.length);\n\t\tlet currpath = this.realpath.split('#')[0];\n\t\tlet newpath = target.split('#')[0];\n\t\t// checking if we are only changing the hash here\n\t\tif (currpath == newpath) {\n\t\t\tglobalThis.document.location.hash = url.hash;\n\t\t} else if (a[$routeTo$]) {\n\t\t\ta[$routeTo$].go();\n\t\t} else {\n\t\t\tthis.go(target);\n\t\t};\n\t\t\n\t\te.stopPropagation();\n\t\treturn e.preventDefault();\n\t}\n\t\n\tget url(){\n\t\treturn this.location.url;\n\t}\n\t\n\tget path(){\n\t\tlet path = this.location.path;\n\t\treturn this.aliases[path] || path;\n\t}\n\t\n\tget pathname(){\n\t\treturn this.location.pathname;\n\t}\n\t\n\tserializeParams(params){\n\t\tvar $1;\n\t\tif (isa$(params,Object)) {\n\t\t\t$1 = [];\n\t\t\tfor (let $2 = 0, $3 = Object.keys(params), $4 = $3.length, key, val; $2 < $4; $2++){\n\t\t\t\tkey = $3[$2];val = params[key];$1.push([key,globalThis.encodeURI(val)].join(\"=\"));\n\t\t\t};\n\t\t\tlet value = $1;\n\t\t\treturn value.join(\"&\");\n\t\t};\n\t\treturn params || '';\n\t}\n\t\n\tget hash(){\n\t\treturn this[$hash$];\n\t}\n\t\n\tset hash(value){\n\t\t\n\t\tlet val = '#' + this.serializeParams(value);\n\t\tglobalThis.history.replaceState(this.state,null,val);\n\t\t;\n\t}\n\t\n\t// See if router currently matches a pattern/path\n\tmatch(pattern){\n\t\treturn this.route(pattern).match(this.path);\n\t}\n\t\n\troute(pattern){\n\t\treturn this.root.route(pattern);\n\t}\n\t\n\tgo(url,state = null){\n\t\tif (typeof url == 'object' && state === null) {\n\t\t\tstate = url;\n\t\t\turl = this.path;\n\t\t};\n\t\t\n\t\tif (typeof url == 'number') {\n\t\t\t// now go\n\t\t\tglobalThis.history.go(url);\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\tlet loc = this.location.clone().update(url);\n\t\t\n\t\tlet action = this.history.buildState(state,loc.path,true);\n\t\tthis.refresh({push: true,mode: 'push',location: loc,state: action,apply: [action]});\n\t\treturn this;\n\t}\n\t\n\treplace(url,state = null){\n\t\tif (typeof url == 'object' && state === null) {\n\t\t\tstate = url;\n\t\t\turl = this.path;\n\t\t};\n\t\t\n\t\tlet loc = this.location.clone().update(url);\n\t\tlet action = this.history.buildState(state,loc.path,false);\n\t\treturn this.refresh({replace: true,mode: 'replace',location: loc,state: action,apply: [action]});\n\t}\n\tstatic { register$(this,c$0,'Router',16) }\n};\n\nlet c$1 = Symbol();\nexport class ElementRoute {\n\tconstructor(node,path,parent,options = {}){\n\t\tthis.parent = parent;\n\t\tthis.node = node;\n\t\tthis[$path$] = path;\n\t\tthis[$match$] = null;\n\t\tthis[$options$] = options;\n\t\tthis[$cache$] = {};\n\t\tthis[$unmatched$] = {};\n\t\tthis[$active$] = null;\n\t\tthis[$resolvedPath$] = null;\n\t\tthis[$dataKey$] = Symbol();\n\t\tthis[$activeKey$] = Symbol();\n\t\tthis[$urlKey$] = Symbol();\n\t}\n\t\n\tget router(){\n\t\treturn this.node.ownerDocument.router;\n\t}\n\t\n\tget route(){\n\t\tlet pr = this.parent ? this.parent.route : this.router;\n\t\treturn pr.route(this[$path$]);\n\t}\n\t\n\tget match(){\n\t\treturn this[$match$];\n\t}\n\t\n\tget params(){\n\t\treturn this[$match$] || this[$unmatched$];\n\t}\n\t\n\tget state(){\n\t\tlet map = this[$dataMap$] ||= new Map;\n\t\tlet pars = this.params;\n\t\tlet data = this[$dataMap$].get(pars);\n\t\tdata || this[$dataMap$].set(pars,data = {});\n\t\treturn data;\n\t}\n\t\n\tset state(value){\n\t\t(this[$dataMap$] ||= new Map).set(this.params,value);\n\t}\n\t\n\tset path(value){\n\t\tif ((this[$path$] != value) ? ((this[$path$] = value,true)) : false) {\n\t\t\t// TODO only update router if we know that we have subroutes\n\t\t\tthis.router.touch();\n\t\t};\n\t}\n\t\n\tget path(){\n\t\treturn this[$path$];\n\t}\n\t\n\tget isActive(){\n\t\treturn !(!(this[$active$]));\n\t}\n\t\n\tget activeΦ(){\n\t\treturn !(!(this[$active$]));\n\t}\n\t\n\tresolve(){\n\t\t// early return if routing clearly has not changed since\n\t\t\t\t// previous resolve\n\t\tlet v = this.router[$version$];\n\t\t\n\t\tif (!((this[$version$] != v) ? ((this[$version$] = v,true)) : false)) { return };\n\t\t\n\t\tlet r = this.route;\n\t\tlet o = this[$options$];\n\t\tlet url = this.router.path;\n\t\tlet match = r.match(url);\n\t\tlet shown = this[$active$];\n\t\tlet last = this[$match$];\n\t\tlet changed = match != last;\n\t\tlet prevUrl = match && match[this[$urlKey$]];\n\t\t\n\t\tif (match) {\n\t\t\tthis[$active$] = true;\n\t\t\tthis[$match$] = match;\n\t\t\tmatch[this[$urlKey$]] = url;\n\t\t};\n\t\t\n\t\tif (match) {\n\t\t\tif (changed || (prevUrl != url) || !(shown)) {\n\t\t\t\tthis[$resolved$](match,last,prevUrl);\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (!(shown) && match) {\n\t\t\tthis[$enter$]();\n\t\t};\n\t\t\n\t\tif (!(match) && (shown || shown === null)) {\n\t\t\tthis[$active$] = false;\n\t\t\tthis[$leave$]();\n\t\t};\n\t\t\n\t\treturn this[$match$];\n\t}\n\t\n\t[$enter$](){\n\t\tthis.node.flags.remove('not-routed');\n\t\tthis.node.flags.add('routed');\n\t\treturn this.node?.routeDidEnter?.(this);\n\t}\n\t\n\t[$resolved$](match,prev,prevUrl = ''){\n\t\treturn this.node?.routeDidResolve?.(this,match,prev,prevUrl);\n\t}\n\t\n\t[$leave$](){\n\t\t// replace flag?\n\t\tthis.node.flags.add('not-routed');\n\t\tthis.node.flags.remove('routed');\n\t\treturn this.node?.routeDidLeave?.(this);\n\t}\n\tstatic { register$(this,c$1,'ElementRoute',16) }\n};\n\nlet c$2 = Symbol();\nexport class ElementRouteTo extends ElementRoute {\n\t[$enter$](){\n\t\treturn this;\n\t}\n\t\n\t[$resolved$](){\n\t\treturn this;\n\t}\n\t\n\t[$leave$](){\n\t\treturn this;\n\t}\n\t\n\tresolve(){\n\t\tlet v = this.router[$version$];\n\t\tif (!((this[$version$] != v) ? ((this[$version$] = v,true)) : false)) { return };\n\t\t\n\t\tlet o = this[$options$];\n\t\tlet r = this.route;\n\t\tlet url = this.router.path;\n\t\tlet href = this.route.resolve(url);\n\t\tlet match = this.route.match(url);\n\t\t\n\t\tif (match) {\n\t\t\tthis[$match$] = match;\n\t\t\tthis[$match$][this[$urlKey$]] = url;\n\t\t};\n\t\t\n\t\tif (o.sticky && this[$match$]) {\n\t\t\thref = this[$match$][this[$urlKey$]];\n\t\t};\n\t\t\n\t\tif ((this[$href$] != href) ? ((this[$href$] = href,true)) : false) {\n\t\t\tif (this.node.nodeName == 'A') { this.node.setAttribute('href',href) };\n\t\t};\n\t\t\n\t\tthis.node.flags.toggle('active',!(!(match)));\n\t\treturn;\n\t}\n\t\n\tget url(){\n\t\tthis.resolve();\n\t\treturn globalThis.location.origin + this[$href$];\n\t}\n\t\n\tgo(){\n\t\tthis.resolve();\n\t\t\n\t\tif (this[$options$] && this[$options$].replace) {\n\t\t\treturn this.router.replace(this[$href$]);\n\t\t} else {\n\t\t\tif (this.router.path == this[$href$]) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn this.router.go(this[$href$]);\n\t\t\t};\n\t\t};\n\t}\n\tstatic { register$(this,c$2,'ElementRouteTo',0) }\n};\n\nlet c$3 = Symbol();\nclass ΩNode {\n\tget router(){\n\t\treturn this.ownerDocument.router;\n\t}\n\tstatic { register$(this,c$3,'Node',1,Node); }\n};\n\nlet c$4 = Symbol();\nclass ΩElement {\n\t/*\n\t\t@idl\n\t\t@summary The path/route this element should be enabled for\n\t\t*/\n\t\n\tset route(value){\n\t\tif (value == undefined) {\n\t\t\t// remove routing\n\t\t\treturn;\n\t\t\t\n\t\t};\n\t\tif (this[$route$]) {\n\t\t\tthis[$route$].path = value;\n\t\t\t// if route changes - all child routes need to reinitialize?\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet par = (value[0] != '/') ? this[$context$].route : null;\n\t\tthis[$route$] = new ElementRoute(this,value,par,this.route__);\n\t\t\n\t\t// TODO Use hook / event api instead\n\t\tthis[$afterVisit$] = this[$afterVisitRouted$];\n\t}\n\t\n\tget route(){\n\t\treturn this[$route$];\n\t}\n\t\n\t/*\n\t\t@idl\n\t\t@summary The path/route to go to when clicking this element\n\t\t*/\n\t\n\tset routeΞto(value){\n\t\tvar self = this;\n\t\tif (value == undefined) {\n\t\t\t// remove routing\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tif (this[$routeTo$]) {\n\t\t\tthis[$routeTo$].path = value;\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet par = (value[0] != '/') ? this[$context$].route : null;\n\t\tthis[$route$] = this[$routeTo$] = new ElementRouteTo(this,value,par,this.routeTo__);\n\t\tthis[$afterVisit$] = this[$afterVisitRouteTo$];\n\t\t\n\t\t// really? shouldnt this be handled by the main router click listener instead?\n\t\tthis.onclick = function(e) {\n\t\t\tif (!(e.altKey) && !(e.metaKey) && !(e[$routeHandler$])) {\n\t\t\t\te.preventDefault();\n\t\t\t\te[$routeHandler$] = self[$routeTo$];\n\t\t\t\treturn self[$routeTo$].go();\n\t\t\t};\n\t\t};\n\t}\n\t\n\t[$afterVisitRouted$](){\n\t\tif (this[$route$]) {\n\t\t\tlet up = this[$parentNode$];\n\t\t\tlet ctx = up && up[$visitContext$];\n\t\t\tif (ctx && ctx.matchedRoute && ctx.matchedRoute != this[$route$]) {\n\t\t\t\tif ((this[$route$][$active$] != false) ? ((this[$route$][$active$] = false,true)) : false) {\n\t\t\t\t\tthis[$route$][$leave$]();\n\t\t\t\t\tthis[$route$][$version$] = -1;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tthis[$route$].resolve();\n\t\t\t\n\t\t\tif (this[$route$].activeΦ) {\n\t\t\t\tctx.matchedRoute = this[$route$];\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.visit) { this.visit() };\n\t\tif (this[$$visitContext$]) { return this[$$visitContext$] = null };\n\t}\n\t\n\t[$afterVisitRouteTo$](){\n\t\tif (this[$routeTo$]) {\n\t\t\tthis[$routeTo$].resolve();\n\t\t};\n\t\t\n\t\tif (this.visit) { return this.visit() };\n\t}\n\t\n\trouteDidEnter(route){\n\t\treturn this[$attachToParent$]();\n\t}\n\t\n\trouteDidLeave(route){\n\t\treturn this[$detachFromParent$]();\n\t}\n\t\n\trouteDidResolve(route,match,prev){\n\t\tvar self = this;\n\t\tif (isa$(this.routed,Function) && (match != prev)) {\n\t\t\tthis.router.queue.add(async function() {\n\t\t\t\tself.suspend();\n\t\t\t\tlet res = await self.routed(match,route.state,prev);\n\t\t\t\treturn self.unsuspend();\n\t\t\t});\n\t\t};\n\t\treturn;\n\t}\n\tstatic { register$(this,c$4,'Element',1,Element); }\n};\n\nlet c$5 = Symbol();\nclass ΩDocument {\n\tget router(){\n\t\treturn this[$router$] ||= new Router(this);\n\t}\n\tstatic { register$(this,c$5,'Document',1,Document); }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}