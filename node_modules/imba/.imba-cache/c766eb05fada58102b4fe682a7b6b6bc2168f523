{"id":"cs","warnings":[],"errors":[],"js":"import {register$} from 'imba/runtime';\nconst $toStringDeopt$ = Symbol.for('#toStringDeopt'), $symbols$ = Symbol.for('#symbols'), $batches$ = Symbol.for('#batches'), $extras$ = Symbol.for('#extras'), $stacks$ = Symbol.for('#stacks');\n\n/*body*/\n// imba$stdlib=1\nlet c$0 = Symbol();\nexport class Flags {\n\tconstructor(dom){\n\t\tthis.dom = dom;\n\t\tthis.string = \"\";\n\t}\n\t\n\tcontains(ref){\n\t\treturn this.dom.classList.contains(ref);\n\t}\n\t\n\thas(ref){\n\t\treturn this.dom.classList.contains(ref);\n\t}\n\t\n\tadd(ref){\n\t\tif (this.contains(ref)) { return this };\n\t\tthis.string += (this.string ? ' ' : '') + ref;\n\t\tthis.dom.classList.add(ref);\n\t\treturn this;\n\t}\n\t\n\tremove(ref){\n\t\tif (!(this.contains(ref))) { return this };\n\t\t\n\t\tlet regex = new RegExp('(^|\\\\s)' + ref + '(?=\\\\s|$)','g');\n\t\tthis.string = this.string.replace(regex,'');\n\t\tthis.dom.classList.remove(ref);\n\t\treturn this;\n\t}\n\t\n\ttoggle(ref,bool){\n\t\tif (bool === undefined) { bool = !(this.contains(ref)) };\n\t\treturn bool ? this.add(ref) : this.remove(ref);\n\t}\n\t\n\tincr(ref,duration = 0){\n\t\tvar self = this;\n\t\tlet m = this.stacks;\n\t\tlet c = m[ref] || 0;\n\t\tif (c < 1) { this.add(ref) };\n\t\t\n\t\tif (duration > 0) {\n\t\t\tsetTimeout(function() { return self.decr(ref); },duration);\n\t\t};\n\t\t\n\t\treturn m[ref] = Math.max(c,0) + 1;\n\t}\n\t\n\tdecr(ref){\n\t\tlet m = this.stacks;\n\t\tlet c = m[ref] || 0;\n\t\tif (c == 1) { this.remove(ref) };\n\t\treturn m[ref] = Math.max(c,1) - 1;\n\t}\n\t\n\treconcile(sym,str){\n\t\tlet syms = this[$symbols$];\n\t\tlet vals = this[$batches$];\n\t\tlet dirty = true;\n\t\tif (!(syms)) {\n\t\t\tsyms = this[$symbols$] = [sym];\n\t\t\tvals = this[$batches$] = [str || ''];\n\t\t\tthis.toString = this.valueOf = this[$toStringDeopt$];\n\t\t} else {\n\t\t\tlet idx = syms.indexOf(sym);\n\t\t\tlet val = str || '';\n\t\t\tif (idx == -1) {\n\t\t\t\tsyms.push(sym);\n\t\t\t\tvals.push(val);\n\t\t\t} else if (vals[idx] != val) {\n\t\t\t\tvals[idx] = val;\n\t\t\t} else {\n\t\t\t\tdirty = false;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (dirty) {\n\t\t\tthis[$extras$] = ' ' + vals.join(' ');\n\t\t\tthis.sync();\n\t\t};\n\t\treturn;\n\t}\n\t\n\tvalueOf(){\n\t\treturn this.string;\n\t}\n\t\n\ttoString(){\n\t\treturn this.string;\n\t}\n\t\n\t[$toStringDeopt$](){\n\t\treturn this.string + (this[$extras$] || '');\n\t}\n\t\n\tsync(){\n\t\treturn this.dom.flagSync$();\n\t}\n\t\n\tget stacks(){\n\t\treturn this[$stacks$] ||= {};\n\t}\n\tstatic { register$(this,c$0,'Flags',16) }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3MuaW1iYSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZsYWdzLmltYmEiXSwic291cmNlc0NvbnRlbnQiOlsiIyBpbWJhJHN0ZGxpYj0xXG5leHBvcnQgY2xhc3MgRmxhZ3NcblxuXHRkZWYgY29uc3RydWN0b3IgZG9tXG5cdFx0ZG9tID0gZG9tXG5cdFx0c3RyaW5nID0gXCJcIlxuXG5cdGRlZiBjb250YWlucyByZWZcblx0XHRyZXR1cm4gZG9tLmNsYXNzTGlzdC5jb250YWlucyhyZWYpXG5cblx0ZGVmIGhhcyByZWZcblx0XHRyZXR1cm4gZG9tLmNsYXNzTGlzdC5jb250YWlucyhyZWYpXG5cblx0ZGVmIGFkZCByZWZcblx0XHRyZXR1cm4gc2VsZiBpZiBjb250YWlucyhyZWYpXG5cdFx0c3RyaW5nICs9IChzdHJpbmcgPyAnICcgOiAnJykgKyByZWZcblx0XHRkb20uY2xhc3NMaXN0LmFkZChyZWYpXG5cdFx0cmV0dXJuIHNlbGZcblxuXHRkZWYgcmVtb3ZlIHJlZlxuXHRcdHJldHVybiBzZWxmIHVubGVzcyBjb250YWlucyhyZWYpXG5cblx0XHRsZXQgcmVnZXggPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgcmVmICsgJyg/PVxcXFxzfCQpJywgJ2cnKVxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4LCAnJylcblx0XHRkb20uY2xhc3NMaXN0LnJlbW92ZShyZWYpXG5cdFx0cmV0dXJuIHNlbGZcblxuXHRkZWYgdG9nZ2xlIHJlZiwgYm9vbFxuXHRcdGJvb2wgPSAhY29udGFpbnMocmVmKSBpZiBib29sID09PSB1bmRlZmluZWRcblx0XHRib29sID8gYWRkKHJlZikgOiByZW1vdmUocmVmKVxuXG5cdGRlZiBpbmNyIHJlZiwgZHVyYXRpb24gPSAwXG5cdFx0bGV0IG0gPSBzdGFja3Ncblx0XHRsZXQgYyA9IG1bcmVmXSBvciAwXG5cdFx0YWRkKHJlZikgaWYgYyA8IDFcblxuXHRcdGlmIGR1cmF0aW9uID4gMFxuXHRcdFx0c2V0VGltZW91dCgmLGR1cmF0aW9uKSBkbyBkZWNyKHJlZilcblxuXHRcdHJldHVybiBtW3JlZl0gPSBNYXRoLm1heChjLDApICsgMVxuXG5cdGRlZiBkZWNyIHJlZlxuXHRcdGxldCBtID0gc3RhY2tzXG5cdFx0bGV0IGMgPSBtW3JlZl0gb3IgMFxuXHRcdHJlbW92ZShyZWYpIGlmIGMgPT0gMVxuXHRcdHJldHVybiBtW3JlZl0gPSBNYXRoLm1heChjLDEpIC0gMVxuXG5cdGRlZiByZWNvbmNpbGUgc3ltLCBzdHJcblx0XHRsZXQgc3ltcyA9ICNzeW1ib2xzXG5cdFx0bGV0IHZhbHMgPSAjYmF0Y2hlc1xuXHRcdGxldCBkaXJ0eSA9IHllc1xuXHRcdHVubGVzcyBzeW1zXG5cdFx0XHRzeW1zID0gI3N5bWJvbHMgPSBbc3ltXVxuXHRcdFx0dmFscyA9ICNiYXRjaGVzID0gW3N0ciBvciAnJ11cblx0XHRcdHNlbGYudG9TdHJpbmcgPSBzZWxmLnZhbHVlT2YgPSBzZWxmLiN0b1N0cmluZ0Rlb3B0XG5cdFx0ZWxzZVxuXHRcdFx0bGV0IGlkeCA9IHN5bXMuaW5kZXhPZihzeW0pXG5cdFx0XHRsZXQgdmFsID0gc3RyIG9yICcnXG5cdFx0XHRpZiBpZHggPT0gLTFcblx0XHRcdFx0c3ltcy5wdXNoKHN5bSlcblx0XHRcdFx0dmFscy5wdXNoKHZhbClcblx0XHRcdGVsaWYgdmFsc1tpZHhdICE9IHZhbFxuXHRcdFx0XHR2YWxzW2lkeF0gPSB2YWxcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZGlydHkgPSBub1xuXG5cdFx0aWYgZGlydHlcblx0XHRcdCNleHRyYXMgPSAnICcgKyB2YWxzLmpvaW4oJyAnKVxuXHRcdFx0c3luYyFcblx0XHRyZXR1cm5cblxuXHRkZWYgdmFsdWVPZlxuXHRcdHN0cmluZ1xuXG5cdGRlZiB0b1N0cmluZ1xuXHRcdHN0cmluZ1xuXG5cdGRlZiAjdG9TdHJpbmdEZW9wdFxuXHRcdHN0cmluZyArICgjZXh0cmFzIG9yICcnKVxuXG5cdGRlZiBzeW5jXG5cdFx0ZG9tLmZsYWdTeW5jJCFcblxuXHRnZXQgc3RhY2tzXG5cdFx0I3N0YWNrcyB8fD0ge30iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUE7Q0FFYixXQUFXLENBQUMsR0FBRyxDQUFBO0VBQ2xCLEtBQUEsR0FBRyxHQUFHLEdBQUc7RUFDVCxLQUFBLE1BQU0sR0FBRyxFQUFFO0VBQUE7O0NBRVIsUUFBUSxDQUFDLEdBQUcsQ0FBQTtFQUNmLE1BQU0sQ0FBQyxLQUFBLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztFQUFBOztDQUUvQixHQUFHLENBQUMsR0FBRyxDQUFBO0VBQ1YsTUFBTSxDQUFDLEtBQUEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO0VBQUE7O0NBRS9CLEdBQUcsQ0FBQyxHQUFHLENBQUE7RUFDRSxFQUFFLEVBQUMsS0FBQSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQTVCLEVBQUEsTUFBTSxDQUFDLElBQUk7RUFDWCxLQUFBLE1BQU0sS0FBSyxLQUFBLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7RUFDbkMsS0FBQSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7RUFDdEIsTUFBTSxDQUFDLElBQUk7RUFBQTs7Q0FFUixNQUFNLENBQUMsR0FBRyxDQUFBO0VBQ0QsRUFBTSxFQUFDLEVBQUEsS0FBQSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUEsRUFBaEMsRUFBQSxNQUFNLENBQUMsSUFBSTs7RUFFUCxJQUFBLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUUsR0FBRyxDQUFDO0VBQzFELEtBQUEsTUFBTSxHQUFHLEtBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUUsRUFBRSxDQUFDO0VBQ2xDLEtBQUEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0VBQ3pCLE1BQU0sQ0FBQyxJQUFJO0VBQUE7O0NBRVIsTUFBTSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUE7RUFDRyxFQUFFLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQTNDLEVBQUEsSUFBSSxHQUFHLEVBQUMsS0FBQSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUEsRUFBQTtTQUNyQixJQUFJLEdBQUcsS0FBQSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDO0VBQUE7O0NBRTFCLElBQUksQ0FBQyxHQUFHLENBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQTs7RUFDckIsSUFBQSxDQUFDLEdBQUcsS0FBQSxNQUFNO0VBQ1YsSUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ1YsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFqQixFQUFBLEtBQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFBOztFQUVSLEVBQUUsRUFBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQTtHQUNkLFVBQVUsQ0FBYSxRQUFFLEtBQUMsT0FBQSxLQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBdEIsUUFBUSxDQUFDO0dBQWE7O0VBRXBDLE1BQU0sQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTs7Q0FFOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQTtFQUNQLElBQUEsQ0FBQyxHQUFHLEtBQUEsTUFBTTtFQUNWLElBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNQLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBckIsRUFBQSxLQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQTtFQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQTs7Q0FFOUIsU0FBUyxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUE7RUFDakIsSUFBQSxJQUFJLEdBQUcsZUFBUTtFQUNmLElBQUEsSUFBSSxHQUFHLGVBQVE7RUFDZixJQUFBLEtBQUssR0FBRyxJQUFHO0VBQ2YsRUFBTSxFQUFDLEVBQUEsSUFBSSxDQUFBLEVBQUE7R0FDVixJQUFJLEdBQUcsZUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDO0dBQ3ZCLElBQUksR0FBRyxlQUFRLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztHQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxpQkFBZTtHQUFBLE1BQy9DO0dBQ0MsSUFBQSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7R0FDdkIsSUFBQSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ25CLEVBQUUsRUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQTtJQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFBQSxNQUNmLEVBQUEsRUFBSyxJQUFJLENBQUEsR0FBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQTtJQUNwQixJQUFJLENBQUEsR0FBSSxDQUFDLEdBQUcsR0FBRztJQUFBLE1BQ1o7SUFDSCxLQUFLLEdBQUcsS0FBRTtJQUFBO0dBQUE7O0VBRVosRUFBRSxFQUFDLEtBQUssRUFBQTtHQUNQLGNBQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQzlCLEtBQUEsSUFBSSxFQUFDO0dBQUE7RUFDTixNQUFNO0VBQUE7O0NBRUgsT0FBTyxFQUFBO0VBQ1YsT0FBQSxLQUFBLE1BQU07RUFBQTs7Q0FFSCxRQUFRLEVBQUE7RUFDWCxPQUFBLEtBQUEsTUFBTTtFQUFBOztvQkFFVztFQUNqQixPQUFBLEtBQUEsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFBLGNBQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQUE7O0NBRXJCLElBQUksRUFBQTtFQUNQLE9BQUEsS0FBQSxHQUFHLENBQUMsU0FBUyxFQUFDO0VBQUE7O0NBRWYsR0FBRyxDQUFDLE1BQU0sRUFBQTtFQUNULE9BQUEsY0FBTyxLQUFLLEVBQUU7RUFBQTs7QUFBQSxDQUFBO0FBQUE7In0=","css":""}