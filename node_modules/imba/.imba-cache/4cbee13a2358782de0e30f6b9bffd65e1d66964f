{"id":"s","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\n// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }\nimport {register$} from 'imba/runtime';\nconst $__init__$ = Symbol.for('#__init__'), $insertInto$ = Symbol.for('#insertInto'), $removeFrom$ = Symbol.for('#removeFrom'), $all$ = Symbol.for('#all'), $phase$ = Symbol.for('#phase'), $nodes$ = Symbol.for('#nodes'), $sizes$ = Symbol.for('#sizes'), $linked$ = Symbol.for('#linked'), $mode$ = Symbol.for('#mode'), $enabled$ = Symbol.for('#enabled'), $easer$ = Symbol.for('#easer'), $group$ = Symbol.for('#group'), $_easer_$ = Symbol.for('#_easer_');\n\n/*body*/\n// imba$stdlib=1\n\nimport {get_document} from './core';\nimport {Emitter} from '../utils';\n;\n\nlet c$0 = Symbol();\nclass Transitions extends Emitter {\n\tconstructor(){\n\t\tsuper(...arguments);\n\t\tsuper[$__init__$] || this[$__init__$]();\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $0;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.selectors = ($$ && ($0 = $$.selectors) !== undefined) ? ($0) : {};\n\t\t\n\t}\n\taddSelectors(add,group){\n\t\tlet arr = this.selectors[group] ||= [];\n\t\tarr.push(...add);\n\t\treturn true;\n\t}\n\t\n\tgetSelectors(...groups){\n\t\tlet sels = [];\n\t\tfor (let $1 = 0, $2 = iter$__(groups), $3 = $2.length; $1 < $3; $1++) {\n\t\t\tlet group = $2[$1];\n\t\t\tif (this.selectors[group]) {\n\t\t\t\tsels.push(...this.selectors[group]);\n\t\t\t};\n\t\t};\n\t\treturn (sels && sels.length) ? sels.join(',') : null;\n\t}\n\t\n\tnodesForBase(base,kind = 'transition'){\n\t\tlet hits = [base];\n\t\tlet query = (this.selectors[kind] || []).join(',');\n\t\tif (query == '') { return hits };\n\t\t\n\t\tlet elements = base.querySelectorAll(query);\n\t\t\n\t\tfor (let $4 = 0, $5 = iter$__(elements), $6 = $5.length; $4 < $6; $4++) {\n\t\t\tlet el = $5[$4];\n\t\t\tif (el.closest('._ease_') == base) {\n\t\t\t\thits.push(el);\n\t\t\t};\n\t\t};\n\t\thits[$all$] = elements;\n\t\treturn hits;\n\t}\n\t\n\tnodesWithSize(nodes,dir = 'in'){\n\t\tlet sel = this.getSelectors('_off_sized',(\"_\" + dir + \"_sized\"));\n\t\tif (!(sel)) { return [] };\n\t\treturn nodes.filter(function(_0) { return _0.matches(sel); });\n\t}\n\tstatic { register$(this,c$0,'Transitions',16) }\n};\n\nexport const transitions = new Transitions;\n\nlet instance = globalThis.imba ||= {};\ninstance.transitions = transitions;\n\nlet c$1 = Symbol();\nexport class EaseGroup extends Emitter {\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $0;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.flushingΦ = ($$ && ($0 = $$.flushingΦ) !== undefined) ? ($0) : false;\n\t\tthis.mutations = ($$ && ($0 = $$.mutations) !== undefined) ? ($0) : [];\n\t\t\n\t}\n\tconstructor(callback){\n\t\tsuper();\n\t\tsuper[$__init__$] || this[$__init__$]();\n\t\tthis.callback = callback;\n\t}\n\t\n\t\n\tinsert(parent,node,before){\n\t\treturn this.mutations.push({target: parent,addedNodes: [node],removedNodes: [],nextSibling: before});\n\t}\n\t\n\tremove(parent,node){\n\t\treturn this.mutations.push({target: parent,addedNodes: [],removedNodes: [node]});\n\t}\n\t\n\tflush(){\n\t\tlet muts = this.mutations.slice(0);\n\t\tif (!(muts.length)) {\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\tthis.mutations = [];\n\t\tif (isa$(this.callback,Function)) { this.callback(muts) };\n\t\tthis.emit('start',this,muts);\n\t\tthis.flushingΦ = true;\n\t\tfor (let mut of iter$__(muts)){\n\t\t\tfor (let add of iter$__(mut.addedNodes)){\n\t\t\t\tadd[$insertInto$](mut.target,mut.nextSibling);\n\t\t\t};\n\t\t\tfor (let rem of iter$__(mut.removedNodes)){\n\t\t\t\trem[$removeFrom$](mut.target);\n\t\t\t};\n\t\t};\n\t\tthis.flushingΦ = false;\n\t\treturn this.emit('end',this,muts);\n\t}\n\tstatic { register$(this,c$1,'EaseGroup',16) }\n};\n\nlet c$2 = Symbol();\nexport class Easer extends Emitter {\n\tconstructor(target){\n\t\tsuper();\n\t\tthis.dom = target;\n\t\tthis[$phase$] = null;\n\t\tthis[$nodes$] = [];\n\t\tthis[$sizes$] = new Map;\n\t}\n\t\n\tlog(...params){\n\t\treturn;\n\t}\n\t\n\tget flags(){\n\t\treturn this.dom.flags;\n\t}\n\t\n\tlink(el){\n\t\tthis[$linked$] ||= new Set;\n\t\treturn this[$linked$].add(el);\n\t}\n\t\n\tunlink(el){\n\t\treturn this[$linked$].delete(el);\n\t}\n\t\n\tflag(flags){\n\t\tfor (let $7 = 0, $8 = iter$__(this[$nodes$]), $9 = $8.length; $7 < $9; $7++) {\n\t\t\tlet node = $8[$7];\n\t\t\tnode.flags.add(flags);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tunflag(flags){\n\t\tfor (let $10 = 0, $11 = iter$__(this[$nodes$]), $12 = $11.length; $10 < $12; $10++) {\n\t\t\tlet node = $11[$10];\n\t\t\tnode.flags.remove(flags);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tcommit(){\n\t\treturn this.dom.offsetWidth;\n\t}\n\t\n\tenable(mode){\n\t\tif (mode) {\n\t\t\tthis[$mode$] = mode;\n\t\t};\n\t\tif (!((this[$enabled$] != true) ? ((this[$enabled$] = true,true)) : false)) { return this };\n\t\t// TODO support attach/detach deopt api\n\t\tthis.dom[$insertInto$] = this[$insertInto$].bind(this);\n\t\tthis.dom[$removeFrom$] = this[$removeFrom$].bind(this);\n\t\treturn this.flags.add('_ease_');\n\t}\n\t\n\tdisable(){\n\t\tthis.flags.remove('_ease_');\n\t\treturn true;\n\t}\n\t\n\tset phase(val){\n\t\tlet prev = this[$phase$];\n\t\t\n\t\tif ((this[$phase$] != val) ? ((this[$phase$] = val,true)) : false) {\n\t\t\tif (prev) { this.unflag((\"@\" + prev)) };\n\t\t\tif (val) { this.flag((\"@\" + val)) };\n\t\t\t\n\t\t\t// clearing all the node animations\n\t\t\tif (!(val)) {\n\t\t\t\tthis.unflag('@out');\n\t\t\t\tthis.unflag('@in');\n\t\t\t\tthis.unflag('@off');\n\t\t\t\tthis[$nodes$] = null;\n\t\t\t};\n\t\t\t\n\t\t\tif (val == 'enter' && prev == 'leave') {\n\t\t\t\tthis.dom?.emit?.(`outcancel`);\n\t\t\t\tthis.dom?.transitionΞoutΞcancel?.(this);\n\t\t\t};\n\t\t\tif (val == 'leave' && prev == 'enter') {\n\t\t\t\tthis.dom?.emit?.(`incancel`);\n\t\t\t\tthis.dom?.transitionΞinΞcancel?.(this);\n\t\t\t};\n\t\t\tif (val == 'enter') {\n\t\t\t\tthis.dom?.emit?.(`in`);\n\t\t\t\tthis.dom?.transitionΞin?.(this);\n\t\t\t};\n\t\t\tif (val == 'leave') {\n\t\t\t\tthis.dom?.emit?.(`out`);\n\t\t\t\tthis.dom?.transitionΞout?.(this);\n\t\t\t};\n\t\t\tif (prev == 'leave' && !(val)) {\n\t\t\t\tthis.dom?.emit?.(`outend`);\n\t\t\t\tthis.dom?.transitionΞoutΞend?.(this);\n\t\t\t};\n\t\t\tif (prev == 'enter' && !(val)) {\n\t\t\t\tthis.dom?.emit?.(`inend`);\n\t\t\t\tthis.dom?.transitionΞinΞend?.(this);\n\t\t\t};\n\t\t};\n\t}\n\t\n\tget phase(){\n\t\treturn this[$phase$];\n\t}\n\t\n\tget leavingΦ(){\n\t\treturn this.phase == 'leave';\n\t}\n\t\n\tget enteringΦ(){\n\t\treturn this.phase == 'enter';\n\t}\n\t\n\tget idleΦ(){\n\t\treturn this.phase == null;\n\t}\n\t\n\ttrack(cb){\n\t\tvar self = this;\n\t\tlet anims = {before: get_document().getAnimations()};\n\t\tthis.commit();\n\t\tcb();\n\t\tthis.commit();\n\t\tanims.after = get_document().getAnimations();\n\t\tanims.fresh = anims.after.filter(function(_0) {\n\t\t\treturn anims.before.indexOf(_0) == -1;\n\t\t});\n\t\tanims.deep = anims.fresh.filter(function(_0) {\n\t\t\tlet el;\n\t\t\tif (el = _0.effect.target) {\n\t\t\t\tif (el.closest('._ease_') != self.dom) { return true };\n\t\t\t};\n\t\t\treturn false;\n\t\t});\n\t\tanims.own = anims.fresh.filter(function(_0) { return anims.deep.indexOf(_0) == -1; });\n\t\t\n\t\tif (anims.own.length) {\n\t\t\tanims.finished = new Promise(function(resolve) {\n\t\t\t\tlet all = new Set(anims.own);\n\t\t\t\tlet finish = function() {\n\t\t\t\t\tall.delete(this);\n\t\t\t\t\tif (all.size == 0) {\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tfor (let $13 = 0, $14 = iter$__(anims.own), $15 = $14.length; $13 < $15; $13++) {\n\t\t\t\t\tlet anim = $14[$13];\n\t\t\t\t\tanim[$easer$] = self;\n\t\t\t\t\tanim.addEventListener('finish',finish,{once: true});\n\t\t\t\t\tanim.addEventListener('cancel',finish,{once: true});\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t});\n\t\t} else {\n\t\t\tanims.finished = Promise.resolve(true);\n\t\t};\n\t\treturn anims;\n\t}\n\t\n\tgetAnimatedNodes(){\n\t\tlet nodes = transitions.nodesForBase(this.dom);\n\t\tif (this[$linked$]) { nodes = nodes.concat(Array.from(this[$linked$])) };\n\t\treturn nodes;\n\t}\n\t\n\tgetNodeSizes(dir = 'in',nodes = this[$nodes$]){\n\t\tlet hits = transitions.nodesWithSize(nodes,dir);\n\t\tlet map = new Map;\n\t\t\n\t\tfor (let $16 = 0, $17 = iter$__(hits), $18 = $17.length; $16 < $18; $16++) {\n\t\t\tlet node = $17[$16];\n\t\t\tlet style = window.getComputedStyle(node);\n\t\t\tmap.set(node,{\n\t\t\t\twidth: style.width,// node.offsetWidth\n\t\t\t\theight: style.height// node.offsetHeight\n\t\t\t});\n\t\t};\n\t\treturn map;\n\t}\n\t\n\tapplyNodeSizes(map){\n\t\tfor (let [node,rect] of iter$__(map)){\n\t\t\tnode.style.width = rect.width;// + 'px'\n\t\t\tnode.style.height = rect.height;// + 'px'\n\t\t};\n\t\treturn map;\n\t}\n\t\n\tclearNodeSizes(map){\n\t\tif (!(map)) { return };\n\t\t\n\t\tfor (let [node,rect] of iter$__(map)){\n\t\t\tnode.style.removeProperty('width');\n\t\t\tnode.style.removeProperty('height');\n\t\t};\n\t\treturn map;\n\t}\n\t\n\t[$insertInto$](parent,before){\n\t\tvar self = this;\n\t\tif (this[$group$] && !(this[$group$].flushingΦ)) {\n\t\t\tthis[$group$].insert(parent,this.dom,before);\n\t\t\t// is it not a point to actually ensure that we do change?\n\t\t\treturn this.dom;\n\t\t};\n\t\t\n\t\tlet sizes;\n\t\tif (this.enteringΦ) {\n\t\t\treturn this.dom;\n\t\t};\n\t\tlet finish = function() {\n\t\t\tif (sizes) { self.clearNodeSizes(sizes) };\n\t\t\tif (self.enteringΦ) { return self.phase = null };\n\t\t};\n\t\t\n\t\tif (this.leavingΦ) {\n\t\t\tlet anims = this.track(function() {\n\t\t\t\tself.phase = 'enter';\n\t\t\t\tself.unflag('@off');\n\t\t\t\treturn self.unflag('@out');\n\t\t\t});\n\t\t\t\n\t\t\t// what if there are no animations?\n\t\t\tanims.finished.then(finish,function(_0) { return self.log('error cancel leave',_0); });\n\t\t\treturn this.dom;\n\t\t};\n\t\t\n\t\tlet parConnected = get_document().contains(parent);\n\t\t\n\t\t// Check if we are already still attached here\n\t\tif (before) {\n\t\t\tif (this.dom.nextSibling != before) {\n\t\t\t\tparent.insertBefore(this.dom,before);\n\t\t\t};\n\t\t} else {\n\t\t\tif (this.dom.parentNode != parent) {\n\t\t\t\t// what if we are moving?\n\t\t\t\tparent.appendChild(this.dom);\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis[$nodes$] = this.getAnimatedNodes();\n\t\t\n\t\t// Could it be better to set the flags before adding it to the dom?\n\t\t\n\t\tthis.flag('_instant_');\n\t\tthis.unflag('@out');\n\t\tthis.commit();\n\t\t// must be certain that they don't have a size set directly?\n\t\tsizes = this[$nodes$].sized = this.getNodeSizes('in');\n\t\t\n\t\tthis.dom?.transitionΞinΞinit?.(this);\n\t\tthis.flag('@off');\n\t\tthis.flag('@in');\n\t\tthis.flag('@enter');\n\t\t\n\t\tthis.commit();\n\t\tthis.unflag('_instant_');\n\t\t\n\t\tlet anims = this.track(function() {\n\t\t\tself.phase = 'enter';\n\t\t\tself.applyNodeSizes(sizes);\n\t\t\tself.unflag('@off');\n\t\t\treturn self.unflag('@in');\n\t\t});\n\t\t\n\t\tanims.finished.then(finish,function(_0) {\n\t\t\tself.clearNodeSizes(sizes);\n\t\t\treturn self.log('cancelled insert into',_0);\n\t\t});\n\t\treturn this.dom;\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\tvar self = this;\n\t\tif (this[$group$] && !(this[$group$].flushingΦ)) {\n\t\t\tthis[$group$].remove(parent,this.dom);\n\t\t\t// is it not a point to actually ensure that we do change?\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tif (this.leavingΦ) {\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet sizes;\n\t\tlet finalize = function() {\n\t\t\tif (self.phase == 'leave') {\n\t\t\t\tself.dom.emit('easeoutend',{});\n\t\t\t\tparent.removeChild(self.dom);\n\t\t\t\treturn self.phase = null;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.enteringΦ && this[$mode$] != 'forward') {\n\t\t\tlet anims = this.track(function() {\n\t\t\t\tself.flag('@off');\n\t\t\t\tself.flag('@in');\n\t\t\t\tself.unflag('@out');\n\t\t\t\tself.phase = 'leave';\n\t\t\t\treturn self.clearNodeSizes(self[$nodes$].sized);\n\t\t\t});\n\t\t\tthis.log(\"cancel enter anims own\",anims.own,anims);\n\t\t\tanims.finished.then(finalize,function(_0) { return self.log('error cancel entering',_0); });\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tthis[$nodes$] = this.getAnimatedNodes();\n\t\tsizes = this.getNodeSizes('out');\n\t\tthis.applyNodeSizes(sizes);\n\t\tthis.flag('@leave');\n\t\tlet anims = this.track(function() {\n\t\t\tself.phase = 'leave';\n\t\t\tself.flag('@off');\n\t\t\tself.flag('@out');\n\t\t\treturn self.clearNodeSizes(sizes);\n\t\t});\n\t\t\n\t\t// do it in the same tick if we find no running animations(!)\n\t\tif (!(anims.own.length)) {\n\t\t\tfinalize();\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tanims.finished.then(finalize,function() {\n\t\t\treturn true;\n\t\t});\n\t\treturn;\n\t}\n\tstatic { register$(this,c$2,'Easer',16) }\n};\n\nlet c$3 = Symbol();\nclass ΩElement {\n\t// called when element is getting ready to enter\n\ttransitionΞinΞinit(transition){\n\t\treturn true;\n\t}\n\t\n\t// called when element is ready to enter\n\ttransitionΞin(transition){\n\t\treturn true;\n\t}\n\t\n\t// called when element has finished entering\n\ttransitionΞinΞend(transition){\n\t\treturn true;\n\t}\n\t\n\t// called when element has been asked to leave while entering\n\ttransitionΞinΞcancel(transition){\n\t\treturn true;\n\t}\n\t\n\t// called when element starts to leave\n\ttransitionΞout(transition){\n\t\treturn true;\n\t}\n\t\n\t// called when element is done leaving\n\ttransitionΞoutΞend(transition){\n\t\treturn true;\n\t}\n\t\n\t// called when element re-enters while leaving\n\ttransitionΞoutΞcancel(transition){\n\t\treturn true;\n\t}\n\t\n\tget ease(){\n\t\treturn this[$_easer_$] ||= new Easer(this);\n\t}\n\t\n\t/*\n\t\tEnable transitions for when element is attached / detached\n\t\t@see[Transitions](https://imba.io/css/transitions)\n\t\t@idl\n\t\t*/\n\t\n\tset ease(value){\n\t\tif (value == false) {\n\t\t\tthis[$_easer_$]?.disable?.();\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tthis.ease.enable(value);\n\t}\n\tstatic { register$(this,c$3,'Element',1,Element); }\n};\n\nexport function use_dom_transitions(){\n\tglobalThis.imba.uses_dom_transitions = true;\n\treturn true;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}