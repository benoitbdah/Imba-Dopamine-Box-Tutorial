{"id":"el","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) };\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $extendType$ = Symbol.for('#extendType'), $modifierState$ = Symbol.for('#modifierState'), $sharedModifierState$ = Symbol.for('#sharedModifierState'), $onceHandlerEnd$ = Symbol.for('#onceHandlerEnd'), $extendDescriptors$ = Symbol.for('#extendDescriptors'), $context$ = Symbol.for('#context'), $defaultPrevented$ = Symbol.for('#defaultPrevented'), $stopPropagation$ = Symbol.for('#stopPropagation'), $self$ = Symbol.for('#self'), $target$ = Symbol.for('#target'), $teleport$ = Symbol.for('#teleport');\n\n/*body*/\n// imba$imbaPath=global\n// imba$stdlib=1\n;\nimport {listen,once,emit,unlisten,parseTime} from '../utils';\nimport {scheduler} from '../scheduler';\n\nimport {use_events_keyboard} from './keyboard';\nuse_events_keyboard();\n\nimport {use_events_mouse} from './mouse';\nuse_events_mouse();\n\nlet c$0 = Symbol();\nclass ΩCustomEvent {\n\t[$extendType$](kls){\n\t\tvar desc, $1;\n\t\tlet ext = kls[$extendDescriptors$] ||= true && (\n\t\t\tdesc = Object.getOwnPropertyDescriptors(kls.prototype),\n\t\t\t((($1 = desc.constructor),delete desc.constructor, $1)),\n\t\t\tdesc\n\t\t);\n\t\treturn Object.defineProperties(this,ext);\n\t}\n\tstatic { register$(this,c$0,'CustomEvent',1,CustomEvent); }\n};\n\n// this should clearly much rather export the real one\nlet c$1 = Symbol();\nclass ΩEvent {\n\tget original(){\n\t\treturn this.originalEvent || this;\n\t}\n\t\n\tget [$modifierState$](){\n\t\treturn this[$context$][this[$context$].step] ||= {};\n\t}\n\t\n\tget [$sharedModifierState$](){\n\t\treturn this[$context$].handler[this[$context$].step] ||= {};\n\t}\n\t\n\t[$onceHandlerEnd$](cb){\n\t\treturn once(this[$context$],'end',cb);\n\t}\n\t\n\t/*\n\t\tOnly trigger handler if event.target matches selector\n\t\t@detail (selector)\n\t\t*/\n\t\n\tαsel(selector){\n\t\treturn !(!(this.target.matches(String(selector))));\n\t}\n\t\n\tαclosest(selector){\n\t\treturn !(!(this.target.closest(String(selector))));\n\t}\n\t\n\t/*\n\t\tTells the browser that the default action should not be taken. The event will still continue to propagate up the tree. See Event.preventDefault()\n\t  @see https://imba.io/events/event-modifiers#core-prevent\n\t\t*/\n\t\n\tαprevent(){\n\t\tthis[$defaultPrevented$] = true;\n\t\tthis.preventDefault();\n\t\treturn true;\n\t}\n\t\n\t/*\n\t\tCancel propagation and prevent default\n\t\t*/\n\t\n\tαtrap(){\n\t\tthis[$stopPropagation$] = true;\n\t\tthis.stopImmediatePropagation();\n\t\tthis[$defaultPrevented$] = true;\n\t\tthis.preventDefault();\n\t\treturn true;\n\t}\n\t\n\t/*\n\t\tOnly continue if element contains the currently focused element (document.activeElement)\n\t\tOptionally pass in a selector to check a relative parent.\n\t\tTODO: Document\n\t\t*/\n\t\n\tαfocin(sel){\n\t\tlet el = this[$context$].element;\n\t\tel = (isa$(sel,Element)) ? sel : ((sel ? el.closest(sel) : el));\n\t\treturn el?.contains?.(globalThis.document.activeElement);\n\t}\n\t\n\tαlog(...params){\n\t\tconsole.info(...params);\n\t\treturn true;\n\t}\n\t\n\tαtrusted(){\n\t\treturn !(!(this.isTrusted));\n\t}\n\t\n\tαuntrusted(){\n\t\treturn !(this.isTrusted);\n\t}\n\t\n\tαif(expr){\n\t\treturn !(!(expr));\n\t}\n\t\n\tαwait(time = 250){\n\t\treturn new Promise(function(_0) { return setTimeout(_0,parseTime(time)); });\n\t}\n\t\n\tαself(){\n\t\treturn this.target == this[$context$].element;\n\t}\n\t\n\tαcooldown(time = 250){\n\t\tlet o = this[$sharedModifierState$];\n\t\t\n\t\tif (o.active) {\n\t\t\treturn false;\n\t\t};\n\t\t\n\t\to.active = true;\n\t\to.target = this[$context$].element;\n\t\to.target.flags.incr('cooldown');\n\t\t\n\t\tthis[$onceHandlerEnd$](function() {\n\t\t\treturn setTimeout(function() {\n\t\t\t\to.target.flags.decr('cooldown');\n\t\t\t\treturn o.active = false;\n\t\t\t},parseTime(time));\n\t\t});\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαthrottle(time = 250,flag = 'throttled'){\n\t\tlet o = this[$sharedModifierState$];\n\t\t\n\t\tif (o.active) {\n\t\t\tif (o.next) { o.next(false) };\n\t\t\t\n\t\t\treturn new Promise(function(r) {\n\t\t\t\treturn o.next = function(val) {\n\t\t\t\t\to.next = null;\n\t\t\t\t\treturn r(val);\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\t\t\n\t\to.active = true;\n\t\to.el ||= this[$context$].element;\n\t\tif (flag) {\n\t\t\to.el.flags.incr(flag);\n\t\t};\n\t\t\n\t\tonce(this[$context$],'end',function() {\n\t\t\tlet delay = parseTime(time);\n\t\t\t\n\t\t\treturn o.interval = setInterval(function() {\n\t\t\t\tif (o.next) {\n\t\t\t\t\to.next(true);\n\t\t\t\t} else {\n\t\t\t\t\tclearInterval(o.interval);\n\t\t\t\t\tif (flag) {\n\t\t\t\t\t\to.el.flags.decr(flag);\n\t\t\t\t\t};\n\t\t\t\t\to.active = false;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t},delay);\n\t\t});\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαdebounce(time = 250){\n\t\tlet o = this[$sharedModifierState$];\n\t\tlet e = this;\n\t\to.queue ||= [];\n\t\to.queue.push(o.last = e);\n\t\treturn new Promise(function(resolve) {\n\t\t\treturn setTimeout(function() {\n\t\t\t\tif (o.last == e) {\n\t\t\t\t\t// if this event is still the last\n\t\t\t\t\t\t\t\t\t\t// add the debounced queue to the event\n\t\t\t\t\t\t\t\t\t\t// and let the chain continue\n\t\t\t\t\te.debounced = o.queue;\n\t\t\t\t\to.last = null;\n\t\t\t\t\to.queue = [];\n\t\t\t\t\treturn resolve(true);\n\t\t\t\t} else {\n\t\t\t\t\treturn resolve(false);\n\t\t\t\t};\n\t\t\t},parseTime(time));\n\t\t});\n\t}\n\t\n\t// will add a css className to the element (or selector)\n\t// and keep it for the duration of the event handling,\n\t// or at least 250ms\n\tαflag(name,sel){\n\t\tconst {element: element,step: step,state: state,id: id,current: current} = this[$context$];\n\t\t\n\t\tlet el = (isa$(sel,Element)) ? sel : ((sel ? element.closest(sel) : element));\n\t\t\n\t\tif (!(el)) { return true };\n\t\t\n\t\tthis[$context$].commit = true;\n\t\t\n\t\tstate[step] = id;\n\t\tel.flags.incr(name);\n\t\t\n\t\tlet ts = Date.now();\n\t\t\n\t\tonce(current,'end',function() {\n\t\t\tlet elapsed = Date.now() - ts;\n\t\t\tlet delay = Math.max(250 - elapsed,0);\n\t\t\treturn setTimeout(function() { return el.flags.decr(name); },delay);\n\t\t});\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαbusy(sel){\n\t\t// TODO REMOVE\n\t\t\t\t// Add via\n\t\treturn this['αflag']('busy',sel);\n\t}\n\t\n\tαoutside(){\n\t\t// TODO Support selector here?\n\t\tconst {handler: handler} = this[$context$];\n\t\tif (handler && handler[$self$]) {\n\t\t\treturn !(handler[$self$].parentNode.contains(this.target));\n\t\t};\n\t}\n\t\n\tasync αpost(url,o = {}){\n\t\treturn await globalThis.fetch(url,{method: 'POST',...o});\n\t}\n\t\n\tasync αfetch(url,o = {}){\n\t\treturn await globalThis.fetch(url,o);\n\t}\n\tstatic { register$(this,c$1,'Event',1,Event); }\n};\n\n\nlet c$2 = Symbol();\nclass ΩFocusEvent {\n\t// Override .self modifier for focusin/focusout events.\n\t\t// @focusin.self will only trigger when focus moves from something\n\t\t// outside self to something inside. Without .self the focusin\n\t\t// event will trigger whenever focus changes inside.\n\t/*\n\t\tOnly trigger when focus moves between the element (or its children)\n\t\tand something outside of the element.\n\t\t*/\n\t\n\tαself(){\n\t\tlet el = this[$context$].element;\n\t\t\n\t\tif (this.type == 'focusout') {\n\t\t\treturn this.relatedTarget && !(el.contains(this.relatedTarget));\n\t\t} else if (this.type == 'focusin') {\n\t\t\treturn !(this.relatedTarget) || !(el.contains(this.relatedTarget));\n\t\t};\n\t\t\n\t\treturn this.target == el;\n\t}\n\tstatic { register$(this,c$2,'FocusEvent',1,FocusEvent); }\n};\n\nexport const events = {};\n\nexport function use_events(){\n\tglobalThis.imba.uses_events = true;\n\treturn true;\n};\n\n// could cache similar event handlers with the same parts\n// Should be possible to remove closure from EventHandler\nlet c$3 = Symbol();\nexport class EventHandler {\n\tconstructor(params,closure){\n\t\tthis.params = params;\n\t\tthis.closure = closure;\n\t}\n\t\n\tgetHandlerForMethod(el,name){\n\t\tif (!(el)) { return null };\n\t\treturn el[name] ? el : this.getHandlerForMethod(el.parentNode,name);\n\t}\n\t\n\tabortCurrentHandlers(){\n\t\tif (this.currentEvents) {\n\t\t\tfor (let ev of iter$__(this.currentEvents)){\n\t\t\t\tev.aborted = true;\n\t\t\t\tev?.resolver?.(true);\n\t\t\t};\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t// okay to auto-import these?\n\temit(name,...params){\n\t\treturn emit(this,name,params);\n\t}\n\ton(name,...params){\n\t\treturn listen(this,name,...params);\n\t}\n\tonce(name,...params){\n\t\treturn once(this,name,...params);\n\t}\n\tun(name,...params){\n\t\treturn unlisten(this,name,...params);\n\t}\n\t\n\tget passiveΦ(){\n\t\treturn this.params.passive;\n\t}\n\t\n\tget captureΦ(){\n\t\treturn this.params.capture;\n\t}\n\t\n\tget silentΦ(){\n\t\treturn this.params.silent;\n\t}\n\t\n\tget globalΦ(){\n\t\treturn this.params.global;\n\t}\n\t\n\tasync handleEvent(event){\n\t\tif (this.disabled) { return };\n\t\t\n\t\tlet element = this[$target$] || event.currentTarget;\n\t\tlet mods = this.params;\n\t\t// let i = 0\n\t\t// let awaited = no\n\t\tlet error = null;\n\t\tlet silence = mods.silence || mods.silent;\n\t\t\n\t\tthis.count ||= 0;\n\t\tthis.state ||= {};\n\t\t\n\t\tlet state = this.lastState = {\n\t\t\telement: element,\n\t\t\tevent: event,\n\t\t\tmodifiers: mods,\n\t\t\thandler: this,\n\t\t\tid: ++this.count,\n\t\t\tstep: -1,\n\t\t\tstate: this.state,\n\t\t\tcommit: null,\n\t\t\tcalled: false,\n\t\t\tcurrent: null,\n\t\t\taborted: false\n\t\t};\n\t\t\n\t\tstate.current = state;\n\t\t\n\t\tif (event.handle$mod) {\n\t\t\tif (event.handle$mod.apply(state,mods.options || []) == false) {\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\tlet guard = Event[this.type + '$handle'] || Event[event.type + '$handle'] || this.guard;\n\t\t\n\t\tif (guard && guard.apply(state,mods.options || []) == false) {\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t// let object = state.proxy or event\n\t\t\n\t\tthis.currentEvents ||= new Set;\n\t\tthis.currentEvents.add(state);\n\t\t\n\t\tfor (let $2 = 0, $3 = Object.keys(mods), $8 = $3.length, handler, val; $2 < $8; $2++){\n\t\t\thandler = $3[$2];val = mods[handler];if (state.aborted) { break; };\n\t\t\t\n\t\t\tstate.step++;\n\t\t\t\n\t\t\tif (handler[0] == '_') {\n\t\t\t\tcontinue;\n\t\t\t};\n\t\t\t\n\t\t\tif (handler.indexOf('~') > 0) {\n\t\t\t\thandler = handler.split('~')[0];\n\t\t\t};\n\t\t\t\n\t\t\tlet modargs = null;\n\t\t\tlet args = [event,state];\n\t\t\tlet res = undefined;\n\t\t\tlet context = null;\n\t\t\tlet m;\n\t\t\tlet negated = false;\n\t\t\tlet isstring = typeof handler == 'string';\n\t\t\t\n\t\t\tif (handler[0] == '$' && handler[1] == '_' && isa$(val[0],Function)) {\n\t\t\t\t// handlers should commit by default\n\t\t\t\tevent[$context$] = state;\n\t\t\t\thandler = val[0];\n\t\t\t\tstate.called = true;\n\t\t\t\tif (!(handler.passive)) { state.commit = true };// \n\t\t\t\targs = [event,state].concat(val.slice(1));\n\t\t\t\tcontext = element;\n\t\t\t} else if (isa$(val,Array)) {\n\t\t\t\targs = val.slice();\n\t\t\t\tmodargs = args;\n\t\t\t\t\n\t\t\t\tfor (let i = 0, $4 = iter$__(args), $7 = $4.length; i < $7; i++) {\n\t\t\t\t\t// what about fully nested arrays and objects?\n\t\t\t\t\t\t\t\t\t\t// ought to redirect this\n\t\t\t\t\tlet par = $4[i];\n\t\t\t\t\tif (typeof par == 'string' && par[0] == '~' && par[1] == '$') {\n\t\t\t\t\t\tlet name = par.slice(2);\n\t\t\t\t\t\tlet chain = name.split('.');\n\t\t\t\t\t\tlet value = state[chain.shift()] || event;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (let i = 0, $5 = iter$__(chain), $6 = $5.length; i < $6; i++) {\n\t\t\t\t\t\t\tlet part = $5[i];\n\t\t\t\t\t\t\tvalue = value ? value[part] : undefined;\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\targs[i] = value;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif (typeof handler == 'string' && (m = handler.match(/^(emit|flag|mod|moved|pin|fit|refit|map|remap|css)-(.+)$/))) {\n\t\t\t\tif (!(modargs)) { modargs = args = [] };\n\t\t\t\targs.unshift(m[2]);\n\t\t\t\thandler = m[1];\n\t\t\t};\n\t\t\t\n\t\t\tif (handler == 'trap') {\n\t\t\t\tevent[$stopPropagation$] = true;\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\tevent[$defaultPrevented$] = true;\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (handler == 'stop') {\n\t\t\t\tevent[$stopPropagation$] = true;\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} else if (handler == 'prevent') {\n\t\t\t\tevent[$defaultPrevented$] = true;\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (handler == 'commit') {\n\t\t\t\tstate.commit = true;\n\t\t\t} else if (handler == 'once') {\n\t\t\t\t// clean up bound data as well\n\t\t\t\telement.removeEventListener(event.type,this);\n\t\t\t} else if (handler == 'options' || handler == 'silence' || handler == 'silent') {\n\t\t\t\tcontinue;\n\t\t\t} else if (handler == 'emit') {\n\t\t\t\tlet name = args[0];\n\t\t\t\tlet detail = args[1];// is custom event if not?\n\t\t\t\tstate.called = true;\n\t\t\t\tlet e = new CustomEvent(name,{bubbles: true,detail: detail});// : new Event(name)\n\t\t\t\te.originalEvent = event;\n\t\t\t\tlet source = this[$teleport$] || element;\n\t\t\t\tlet customRes = source.dispatchEvent(e);\n\t\t\t\t// TODO Add reference to this event to the current handler context?\n\t\t\t} else if (typeof handler == 'string') {\n\t\t\t\tif (handler[0] == '!') {\n\t\t\t\t\tnegated = true;\n\t\t\t\t\thandler = handler.slice(1);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tlet path = (\"α\" + handler);\n\t\t\t\t\n\t\t\t\tlet fn = event[path];\n\t\t\t\tfn ||= (this.type && Event[this.type + '$' + handler + '$mod']);\n\t\t\t\tfn ||= event[handler + '$mod'] || Event[event.type + '$' + handler] || Event[handler + '$mod'];\n\t\t\t\t\n\t\t\t\tif (isa$(fn,Function)) {\n\t\t\t\t\thandler = fn;\n\t\t\t\t\tcontext = state;\n\t\t\t\t\targs = modargs || [];\n\t\t\t\t\t\n\t\t\t\t\tif (event[path]) {\n\t\t\t\t\t\tcontext = event;\n\t\t\t\t\t\tevent[$context$] = state;\n\t\t\t\t\t};\n\t\t\t\t} else if (handler[0] == '_') {\n\t\t\t\t\thandler = handler.slice(1);\n\t\t\t\t\tcontext = this.closure;\n\t\t\t\t} else {\n\t\t\t\t\t// TODO deprecate this functionality and warn about it?\n\t\t\t\t\tcontext = this.getHandlerForMethod(element,handler);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (isa$(handler,Function)) {\n\t\t\t\t\tres = handler.apply(context || element,args);\n\t\t\t\t} else if (context) {\n\t\t\t\t\tres = context[handler].apply(context,args);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif (res && isa$(res.then,Function) && res != scheduler.$promise) {\n\t\t\t\t\tif (state.commit && !(silence)) { scheduler.commit() };\n\t\t\t\t\tres = await res;\n\t\t\t\t};\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\t\n\t\t\tif (negated && res === true) {\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tif (!(negated) && res === false) {\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\t\n\t\t\tstate.value = res;\n\t\t};\n\t\t\n\t\temit(state,'end',state);\n\t\t\n\t\tif (state.commit && !(silence)) { scheduler.commit() };\n\t\t\n\t\tthis.currentEvents.delete(state);\n\t\tif (this.currentEvents.size == 0) {\n\t\t\tthis.emit('idle');\n\t\t};\n\t\t// what if the result is a promise\n\t\t\n\t\tif (error != undefined) {\n\t\t\tif (this.type != 'error') {\n\t\t\t\tlet detail = (isa$(error,Error)) ? error.message : error;\n\t\t\t\tlet custom = new CustomEvent('error',{detail: detail,bubbles: true,cancelable: true});\n\t\t\t\t// @ts-ignore\n\t\t\t\tcustom.error = error;\n\t\t\t\t// @ts-ignore\n\t\t\t\tcustom.originalEvent = event;\n\t\t\t\tlet res = element.dispatchEvent(custom);\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (custom.defaultPrevented) { return };\n\t\t\t};\n\t\t\t\n\t\t\tthrow error;\n\t\t};\n\t\t\n\t\treturn state;\n\t}\n\tstatic { register$(this,c$3,'EventHandler',16) }\n};\n\n// Add methods to Element\nlet c$4 = Symbol();\nclass ΩElement {\n\ton$(type,mods,scope){\n\t\tlet check = 'on$' + type;\n\t\tlet capture = mods.capture || false;\n\t\tlet passive = mods.passive;\n\t\tlet handler;\n\t\t\n\t\tlet o = capture;\n\t\t\n\t\tif (passive) {\n\t\t\to = {passive: passive,capture: capture};\n\t\t};\n\t\t\n\t\t// check if a custom handler exists for this type?\n\t\tif (isa$(this[check],Function)) {\n\t\t\tif (this[check].length > 2) {\n\t\t\t\thandler = new EventHandler(mods,scope);\n\t\t\t};\n\t\t\t\n\t\t\thandler = this[check](mods,scope,handler,o);\n\t\t} else {\n\t\t\thandler = new EventHandler(mods,scope);\n\t\t\tthis.addEventListener(type,handler,o);\n\t\t};\n\t\treturn handler;\n\t}\n\t\n\ton$error(mods,context,handler,o){\n\t\tif (mods.options?.length) {\n\t\t\thandler.guard = function(...types) {\n\t\t\t\tlet err = this.event.error;\n\t\t\t\tlet match = types.find(function(_0) { return isa$(err,_0); });\n\t\t\t\treturn !(!(match));\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis.addEventListener('error',handler,o);\n\t\treturn handler;\n\t}\n\tstatic { register$(this,c$4,'Element',1,Element); }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}