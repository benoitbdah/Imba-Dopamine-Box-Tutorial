{"id":"fg","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $routes$ = Symbol.for('#routes'), $match$ = Symbol.for('#match'), $symbol$ = Symbol.for('#symbol'), $matches$ = Symbol.for('#matches');\n\n/*body*/\n// imba$stdlib=1\nconst cacheMap = new Map;\nconst urlCache = {};\nconst queryCache = {};\nconst anyRegex = /.*/;\n\nfunction cacheForMatch(match){\n\tif (!(cacheMap.has(match))) {\n\t\tlet map = new Map;\n\t\tcacheMap.set(match,map);\n\t\treturn map;\n\t};\n\treturn cacheMap.get(match);\n};\n\nfunction combinedDeepMatch(parent,params){\n\tlet map = cacheForMatch(parent);\n\tif (!(map.has(params))) {\n\t\tlet item = Object.create(parent);\n\t\tObject.assign(item,params);\n\t\tmap.set(params,item);\n\t\treturn item;\n\t};\n\t\n\treturn map.get(params);\n};\n\nlet c$0 = Symbol();\nexport class Match {\nstatic { register$(this,c$0,'Match',0) }};\n\nfunction parseUrl(str){\n\tif (urlCache[str]) {\n\t\treturn urlCache[str];\n\t};\n\t\n\tlet url = urlCache[str] = {url: str};\n\t\n\tlet qryidx = str.indexOf('?');\n\tlet hshidx = str.indexOf('#');\n\t\n\tif (hshidx >= 0) {\n\t\turl.hash = str.slice(hshidx + 1);\n\t\tstr = url.url = str.slice(0,hshidx);\n\t};\n\t\n\tif (qryidx >= 0) {\n\t\tlet q = url.query = str.slice(qryidx + 1);\n\t\tstr = str.slice(0,qryidx);\n\t\turl.query = queryCache[q] ||= new URLSearchParams(q);\n\t};\n\t\n\turl.path = str;\n\treturn url;\n};\n\nlet c$1 = Symbol();\nexport class RootRoute {\n\tconstructor(router){\n\t\tthis.router = router;\n\t\tthis.fullPath = '';\n\t\tthis[$routes$] = {};\n\t\tthis[$match$] = new Match;\n\t\tthis[$match$].path = '';\n\t}\n\t\n\troute(pattern){\n\t\treturn this[$routes$][pattern] ||= new Route(this.router,pattern,this);\n\t}\n\t\n\tmatch(){\n\t\treturn this[$match$];\n\t}\n\t\n\tresolve(url){\n\t\treturn '/';\n\t}\n\tstatic { register$(this,c$1,'RootRoute',16) }\n};\n\nlet c$2 = Symbol();\nexport class Route {\n\tconstructor(router,str,parent){\n\t\tthis.parent = (parent || router.rootRoute);\n\t\tthis.router = router;\n\t\tthis.status = 200;\n\t\tthis.path = str;\n\t\t// \n\t\tthis[$symbol$] = Symbol();\n\t\tthis[$matches$] = {};\n\t\tthis[$routes$] = {};\n\t}\n\t\n\troute(pattern){\n\t\treturn this[$routes$][pattern] ||= new Route(this.router,pattern,this);\n\t}\n\t\n\tget fullPath(){\n\t\treturn (\"\" + (this.parent.fullPath) + \"/\" + this.$path);\n\t}\n\t\n\tload(cb){\n\t\treturn this.router.queue.add(cb);\n\t}\n\t\n\tset path(path){\n\t\tvar self = this;\n\t\tif (this.$path == path) { return };\n\t\t\n\t\tthis.raw = path;\n\t\tthis.$path = path;\n\t\tthis.groups = [];\n\t\tthis.cache = {};\n\t\tthis.dynamic = false;\n\t\t\n\t\tif (path.indexOf('?') >= 0) {\n\t\t\tlet parts = path.split('?');\n\t\t\tpath = parts.shift();\n\t\t\tthis.query = {};\n\t\t\t// loop through and create regexes for matching?\n\t\t\tfor (let $1 = 0, $2 = iter$__(parts.join('?').split('&')), $3 = $2.length; $1 < $3; $1++) {\n\t\t\t\tlet pair = $2[$1];\n\t\t\t\tif (!(pair)) { continue; };\n\t\t\t\tlet [k,v] = pair.split('=');\n\t\t\t\tif (k[0] == '!') {\n\t\t\t\t\tthis.dynamic = true;\n\t\t\t\t\tk = k.slice(1);\n\t\t\t\t\tv = false;\n\t\t\t\t};\n\t\t\t\tif (v === '') {\n\t\t\t\t\tv = false;\n\t\t\t\t};\n\t\t\t\tif (v && v[0] == ':') {\n\t\t\t\t\tthis.dynamic = true;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tthis.query[k] = v || ((v === false) ? false : true);\n\t\t\t};\n\t\t};\n\t\t\n\t\tpath = path.replace(/\\:(\\w+|\\*)(\\.)?/g,function(m,id,dot) {\n\t\t\t// what about :id.:format?\n\t\t\tself.dynamic = true;\n\t\t\tif (id != '*') { self.groups.push(id) };\n\t\t\tlet pattern = self.router.matchers[id] || (dot ? \"([^\\/\\#\\.\\?]+)\" : \"([^\\/\\#\\?]+)\");\n\t\t\tif (dot) {\n\t\t\t\treturn (\"\" + pattern + \"\\.\");\n\t\t\t} else {\n\t\t\t\treturn pattern;\n\t\t\t};\n\t\t});\n\t\t\n\t\tif (path == '' && this.query) {\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tif (path == '*') {\n\t\t\tthis.regex = anyRegex;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t\tpath = '^' + path;\n\t\tlet end = path[path.length - 1];\n\t\tif (end == '$' || end == '/') {\n\t\t\tpath = path.slice(0,-1) + '(?=\\/?[\\#\\?]|\\/?$)';\n\t\t};\n\t\t\n\t\tif ((end != '/' && end != '$' && path != '^/')) {\n\t\t\tpath = path + '(?=[\\/\\#\\?]|$)';\n\t\t};\n\t\t\n\t\tthis.regex = new RegExp(path);\n\t\t\n\t\tthis;\n\t}\n\t\n\tmatch(str = this.router.path){\n\t\tlet match;\n\t\tlet up = this.parent.match(str);\n\t\tif (!(up)) { return null };\n\t\tlet url = parseUrl(str);\n\t\tlet matcher = url.url;\n\t\tlet prefix = '';\n\t\t\n\t\tif (up.path && url.path.indexOf(up.path) == 0) {\n\t\t\tprefix = up.path + '/';\n\t\t\tmatcher = matcher.slice(prefix.length);\n\t\t};\n\t\t\n\t\t// try to match our part of the path with regex\n\t\tif (match = (this.regex ? matcher.match(this.regex) : [''])) {\n\t\t\tlet fullpath = prefix + match[0];\n\t\t\tlet matchid = [this.$path];\n\t\t\tlet params = {};\n\t\t\t\n\t\t\tif (this.groups.length) {\n\t\t\t\tfor (let i = 0, $4 = iter$__(match), $5 = $4.length, name; i < $5; i++) {\n\t\t\t\t\tlet item = $4[i];\n\t\t\t\t\tif (name = this.groups[i - 1]) {\n\t\t\t\t\t\tparams[name] = item;\n\t\t\t\t\t\tmatchid.push(item);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif (this.query) {\n\t\t\t\tfor (let $8 = this.query, $6 = 0, $7 = Object.keys($8), $9 = $7.length, k, v; $6 < $9; $6++){\n\t\t\t\t\tk = $7[$6];v = $8[k];let name = k;\n\t\t\t\t\tlet m = url.query?.get?.(k);\n\t\t\t\t\t\n\t\t\t\t\tif (v === false) {\n\t\t\t\t\t\tif (m) { return null };\n\t\t\t\t\t\tmatchid.push('1');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (v[0] == ':') {\n\t\t\t\t\t\tname = v.slice(1);\n\t\t\t\t\t\tv = true;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif ((v == true && m) || v == m) {\n\t\t\t\t\t\tparams[name] = m;\n\t\t\t\t\t\tmatchid.push(m);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tlet key = matchid.join(\"*\");\n\t\t\tparams = (this[$matches$][key] ||= params);\n\t\t\tlet result = combinedDeepMatch(up,params);\n\t\t\tresult.path = fullpath;\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\treturn null;\n\t}\n\t\n\tresolve(url = this.router.path){\n\t\tif (this.raw[0] == '/' && !(this.dynamic)) { return this.raw.replace(/\\$/g,'') };\n\t\t\n\t\tlet up = this.parent.match(url);\n\t\tlet upres = this.parent.resolve(url);\n\t\tlet out;\n\t\t\n\t\tif (this.dynamic) {\n\t\t\tlet m = this.match(url);\n\t\t\tif (m) {\n\t\t\t\treturn m.path;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.raw[0] == '?') {\n\t\t\tout = (upres || '/') + this.raw;\n\t\t} else {\n\t\t\tout = upres + '/' + this.raw;\n\t\t};\n\t\t\n\t\treturn out.replace(/\\$/g,'').replace(/\\/\\/+/g,'/');\n\t}\n\tstatic { register$(this,c$2,'Route',16) }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}