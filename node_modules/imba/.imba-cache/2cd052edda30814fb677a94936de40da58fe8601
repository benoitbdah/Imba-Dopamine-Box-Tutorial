{"id":"er","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\n// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }\nimport {register$} from 'imba/runtime';\nconst $updateHotKeys$ = Symbol.for('#updateHotKeys'), $context$ = Symbol.for('#context'), $inInput$ = Symbol.for('#inInput'), $inEditable$ = Symbol.for('#inEditable'), $hotkeyTarget$ = Symbol.for('#hotkeyTarget'), $hotkeyCombos$ = Symbol.for('#hotkeyCombos'), $hotkeyHandlers$ = Symbol.for('#hotkeyHandlers'), $combos$ = Symbol.for('#combos'), $extendType$ = Symbol.for('#extendType'), $target$ = Symbol.for('#target'), $defaultPrevented$ = Symbol.for('#defaultPrevented'), $stopPropagation$ = Symbol.for('#stopPropagation'), $visit$ = Symbol.for('#visit'), $key$ = Symbol.for('#key');\nlet isApple;\n\n/*body*/\n// imba$stdlib=1\nimport {Event,CustomEvent,Element} from '../dom/core';\n\ntry {\n\tisApple = (globalThis.navigator.platform || '').match(/iPhone|iPod|iPad|Mac/);\n} catch (e) { };\n\nexport function use_events_hotkey(){\n\tglobalThis.imba.uses_events_hotkey = true;\n\treturn true;\n};\n\nimport {humanize,htmlify} from './hotkey.shared';\n\nconst Globals = {esc: true};\n\nlet c$0 = Symbol();\nclass HotkeyEvent extends CustomEvent {\n\tαfocus(expr){\n\t\tlet el = this[$context$].element;\n\t\tlet doc = el.ownerDocument;\n\t\t\n\t\tif (expr) {\n\t\t\tel = el.querySelector(expr) || el.closest(expr) || doc.querySelector(expr);\n\t\t};\n\t\t\n\t\tif (el == doc.body) {\n\t\t\tif (doc.activeElement != doc.body) { doc.activeElement.blur() };\n\t\t} else {\n\t\t\tel.focus();\n\t\t};\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαlocal(){\n\t\treturn true;\n\t}\n\t\n\tαrepeat(){\n\t\treturn true;\n\t}\n\tstatic { register$(this,c$0,'HotkeyEvent',0) }\n};\n\nimport Mousetrap from './mousetrap';\n\nconst stopCallback = function(e,el,combo) {\n\tif (el.tagName == 'INPUT' && (combo == 'down' || combo == 'up')) {\n\t\treturn false;\n\t};\n\t\n\tif (el.tagName == 'INPUT' || el.tagName == 'SELECT' || el.tagName == 'TEXTAREA') {\n\t\tif (Globals[combo]) {\n\t\t\te[$inInput$] = true;\n\t\t\te[$inEditable$] = true;\n\t\t\treturn false;\n\t\t};\n\t\treturn true;\n\t};\n\t\n\tif (el.contentEditable && (el.contentEditable == 'true' || el.contentEditable == 'plaintext-only')) {\n\t\tif (Globals[combo]) {\n\t\t\te[$inEditable$] = true;\n\t\t\treturn false;\n\t\t};\n\t\treturn true;\n\t};\n\t\n\treturn false;\n};\n\nlet c$1 = Symbol();\nclass HotKeyManager {\n\tconstructor(){\n\t\tthis.combos = {'*': {}};\n\t\tthis.identifiers = {};\n\t\tthis.labels = {};\n\t\tthis.handler = this.handle.bind(this);\n\t\tthis.mousetrap = null;\n\t\tthis.hothandler = this.handle.bind(this);\n\t}\n\t\n\taddKeycodes(obj){\n\t\treturn Mousetrap.addKeycodes(obj);\n\t}\n\t\n\ttrigger(combo){\n\t\treturn this.mousetrap?.trigger?.(combo);\n\t}\n\t\n\tregister(key,mods = {}){\n\t\tif (!(this.mousetrap)) {\n\t\t\tthis.mousetrap = Mousetrap(globalThis.document);\n\t\t\tthis.mousetrap.stopCallback = stopCallback;\n\t\t};\n\t\t\n\t\tif (!(this.combos[key])) {\n\t\t\tthis.combos[key] = true;\n\t\t\tthis.mousetrap.bind(key,this.handler);\n\t\t};\n\t\t\n\t\tif (mods.capture || mods.force) {\n\t\t\tGlobals[key] = true;\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tcomboIdentifier(combo){\n\t\treturn this.identifiers[combo] ||= combo.replace(/\\+/g,'_').replace(/\\ /g,'-').replace(/\\*/g,'all').replace(/\\|/g,' ');\n\t}\n\t\n\thumanize(combo,platform = 'auto'){\n\t\treturn humanize(combo,platform);\n\t}\n\t\n\thtmlify(combo,platform = 'auto'){\n\t\treturn htmlify(combo,platform);\n\t}\n\t\n\tmatchCombo(str){\n\t\treturn true;\n\t}\n\t\n\thandleEvent(e){\n\t\tlet res = this.mousetrap?.handleKeyEvent?.(e);\n\t\treturn res;\n\t}\n\t\n\thandle(e,combo){\n\t\tlet source = e.target && e.target[$hotkeyTarget$] || e.target || globalThis.document.body;\n\t\tlet targets = Array.from(globalThis.document.querySelectorAll('[data-hotkey]'));\n\t\tlet root = source.ownerDocument;\n\t\tlet group = source;\n\t\tlet handlers = [];\n\t\t\n\t\t// find the closest hotkey\n\t\twhile (group && group != root){\n\t\t\tif (group.hotkeys === true) {\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tgroup = group.parentNode;\n\t\t};\n\t\t\n\t\ttargets = targets.reverse().filter(function(el) {\n\t\t\tlet combos = el[$hotkeyCombos$];\n\t\t\tlet exact = combos && combos[combo];\n\t\t\tlet catchall = combos && combos['*'];\n\t\t\tif (!(exact || catchall)) { return false };\n\t\t\tlet handlers = el[$hotkeyHandlers$];\n\t\t\t\n\t\t\tlet par = el;\n\t\t\twhile (par && par != root){\n\t\t\t\tif (par.hotkeys === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (par.hotkeys === true) { // this is a group\n\t\t\t\t\tif (!(par.contains(source))) {\n\t\t\t\t\t\tlet skip = true;\n\t\t\t\t\t\tfor (let $1 = 0, $2 = iter$__(handlers), $3 = $2.length; $1 < $3; $1++) {\n\t\t\t\t\t\t\tlet handler = $2[$1];\n\t\t\t\t\t\t\tif ((handler[$combos$][combo] || handler[$combos$]['*'])) {\n\t\t\t\t\t\t\t\tif (handler.globalΦ) { skip = false };\n\t\t\t\t\t\t\t\t// FIXME Inconsistent if group contains one non-global as well\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (skip) { return false };\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tpar = par.parentNode;\n\t\t\t};\n\t\t\treturn true;\n\t\t});\n\t\t\n\t\tlet focus = globalThis.document.activeElement;\n\t\t\n\t\t// if there are multiple targets - prefer the ones that are visible\n\t\tif (targets.length > 1) {\n\t\t\t// see if some of the handlers are contained by\n\t\t\tlet infocus = targets.filter(function(_0) { return focus.contains(_0); });\n\t\t\tif (infocus.length) {\n\t\t\t\ttargets = infocus;\n\t\t\t};\n\t\t\t\n\t\t\tlet visible = targets.filter(function(_0) { try {\n\t\t\t\treturn !(_0.hiddenΦ);\n\t\t\t} catch (e) { }; });\n\t\t\tif (visible.length > 0) { targets = visible };\n\t\t};\n\t\t\n\t\tif (!(targets.length)) { return };\n\t\t\n\t\tlet detail = {combo: combo,originalEvent: e,targets: targets};\n\t\tlet event = new CustomEvent('hotkey',{bubbles: true,detail: detail});\n\t\tevent[$extendType$](HotkeyEvent);\n\t\t\n\t\tevent.originalEvent = e;\n\t\tevent.hotkey = combo;\n\t\t\n\t\tsource.dispatchEvent(event);\n\t\t\n\t\tfor (let $4 = 0, $5 = iter$__(targets), $9 = $5.length; $4 < $9; $4++) {\n\t\t\tlet receiver = $5[$4];\n\t\t\tfor (let $6 = 0, $7 = iter$__(receiver[$hotkeyHandlers$]), $8 = $7.length; $6 < $8; $6++) {\n\t\t\t\tlet handler = $7[$6];\n\t\t\t\tif (handler[$combos$][combo] || handler[$combos$]['*']) {\n\t\t\t\t\tif (handler.params.local && !(handler[$target$].contains(source))) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (handler.params.unobstructed) {\n\t\t\t\t\t\tif (!(receiver.unobstructedΦ)) { continue; };\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (!(e[$inEditable$]) || (handler.captureΦ || handler.params.force)) {\n\t\t\t\t\t\tlet el = handler[$target$];\n\t\t\t\t\t\tif ((group && (group.contains(el) || el.contains(group))) || (handler.globalΦ)) {\n\t\t\t\t\t\t\thandlers.push(handler);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tlet handled = [];\n\t\t\n\t\tfor (let i = 0, $10 = iter$__(handlers), $11 = $10.length; i < $11; i++) {\n\t\t\tlet handler = $10[i];\n\t\t\tlet res;\n\t\t\tif (!(e.repeat) || handler.params.repeat) {\n\t\t\t\tres = handler.handleEvent(event);\n\t\t\t};\n\t\t\t\n\t\t\tlet last = handler.lastState || {};\n\t\t\t\n\t\t\thandled.push(last);\n\t\t\t\n\t\t\tif ((!(handler.passiveΦ) && last.called) || event[$defaultPrevented$]) { e?.preventDefault?.() };\n\t\t\t\n\t\t\tif (!((handler.passiveΦ || (last.called == false && !(event[$stopPropagation$]) && !(event[$defaultPrevented$]))))) { break; };\n\t\t};\n\t\t\n\t\treturn handled;\n\t}\n\tstatic { register$(this,c$1,'HotKeyManager',16) }\n};\n\nexport const hotkeys = new HotKeyManager;\n\nconst DefaultHandler = function(e,state) {\n\tlet el = state.element;\n\t\n\tif (isa$(el,Element)) {\n\t\tif (el.matches('input,textarea,select,option')) {\n\t\t\tel.focus();\n\t\t} else {\n\t\t\tel.click();\n\t\t};\n\t};\n\treturn;\n};\n\nDefaultHandler.passive = true;\n\nlet c$2 = Symbol();\nclass ΩElement {\n\ton$hotkey(mods,scope,handler,o){\n\t\tvar self = this;\n\t\tthis[$hotkeyHandlers$] ||= [];\n\t\tthis[$hotkeyHandlers$].push(handler);\n\t\t// addEventListener('hotkey',handler,o)\n\t\t\n\t\thandler[$target$] = this;\n\t\t// add a default handler\n\t\tmods.$_ ||= [DefaultHandler];\n\t\t\n\t\tmods[$visit$] = function() { return self[$updateHotKeys$](); };\n\t\tthis[$updateHotKeys$]();\n\t\treturn handler;\n\t}\n\t\n\t[$updateHotKeys$](){\n\t\tlet all = {};\n\t\tfor (let $12 = 0, $13 = iter$__(this[$hotkeyHandlers$]), $17 = $13.length; $12 < $17; $12++) {\n\t\t\tlet handler = $13[$12];\n\t\t\tlet mods = handler.params;\n\t\t\tlet key = mods.options[0];\n\t\t\tif ((handler[$key$] != key) ? ((handler[$key$] = key,true)) : false) {\n\t\t\t\thandler[$combos$] = {};\n\t\t\t\tfor (let $14 = 0, $15 = iter$__(key.split('|')), $16 = $15.length; $14 < $16; $14++) {\n\t\t\t\t\tlet combo = $15[$14];\n\t\t\t\t\thotkeys.register(combo,mods);\n\t\t\t\t\thandler[$combos$][combo] = true;\n\t\t\t\t};\n\t\t\t};\n\t\t\tObject.assign(all,handler[$combos$]);\n\t\t};\n\t\t\n\t\tthis[$hotkeyCombos$] = all;\n\t\tthis.dataset.hotkey = Object.keys(all).join(' ');\n\t\treturn this;\n\t}\n\tstatic { register$(this,c$2,'Element',1,Element); }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}