{"id":"co","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) };\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $$reactive$ = Symbol.for('##reactive'), $$referenced$ = Symbol.for('##referenced'), $$dereferenced$ = Symbol.for('##dereferenced'), $map$ = Symbol.for('#map'), $__init__$ = Symbol.for('#__init__'), $child$ = Symbol.for('#child'), $$spy$ = Symbol.for('##spy'), $reactions$ = Symbol.for('#reactions'), $promise$ = Symbol.for('#promise');\n\n/*body*/\n// imba$stdlib=1\nimport {hooks} from './hooks';\nimport {once,emit,listen} from './utils';\nimport {scheduler,commit} from './scheduler';\n\nconst F = {\n\tTOUCHING: 1 << 1,\n\tSTALE: 1 << 2,\n\tOBJECT: 1 << 3,\n\tRUNNING: 1 << 4,\n\tINVALIDATING: 1 << 5,\n\tPOSSIBLY_STALE: 1 << 6,\n\tAUTORUN: 1 << 7,\n\tDEACTIVATED: 1 << 8\n};\n\nlet TRACKING = 0;\nlet ACTIVATED = false;\nlet ATOMICS = null;\nlet V = 0;\nlet RUN_ID = 0;\nlet NEXT_REF_ID = 1;\n\nconst MAPS = {\n\tMETA: new Map,\n\tVALUE: new Map,\n\tREF: new Map\n};\n\nlet ROOT;\n\nconst rx = {\n\troot: null,\n\tctx: null,\n\t// The root reactive context\n\t// The current reactive context\n\tget context(){\n\t\treturn CTX;\n\t},\n\tget atomics(){\n\t\treturn ATOMICS;\n\t},\n\tget ownref(){\n\t\treturn OWNREF;\n\t},\n\t\n\tflush(){\n\t\tif (CTX == ROOT) {\n\t\t\treturn ROOT.flush();\n\t\t};\n\t}\n};\n\nconst OWNREF = Symbol.for(\"~\");\nconst METAREF = Symbol.for(\"~~\");\n\nconst SymbolForSymbol = function(sym,map) {\n\tif (!(map.has(sym))) { map.set(sym,Symbol()) };\n\treturn map.get(sym);\n};\n\nconst VALUESYM = function(name) {\n\treturn (typeof name == 'symbol') ? SymbolForSymbol(name,MAPS.VALUE) : Symbol.for(name);\n};\n\nconst METASYM = function(name) {\n\treturn (typeof name == 'symbol') ? SymbolForSymbol(name,MAPS.META) : Symbol.for((\"#\" + name + \"__\"));\n};\n\nconst REFSYM = function(name) {\n\treturn (typeof name == 'symbol') ? SymbolForSymbol(name,MAPS.REF) : Symbol.for((\"~\" + name));\n};\n\nexport const OBSERVED = function(item,res) {\n\tif (TRACKING) { CTX.add(item[OWNREF]) };\n\treturn res;\n};\n\nconst CHANGED = function(item,res) {\n\t// use a separate name?\n\titem[OWNREF].$$invalidated(0);\n\treturn res;\n};\n\nconst REFERENCED = function(item,ref,extensions) {\n\tlet beacon = item[OWNREF];\n\tif (!(beacon)) {\n\t\tbeacon = item[OWNREF] = new Ref;\n\t\tObject.defineProperties(item,extensions);\n\t};\n\tif (ref) { beacon.addSubscriber(ref) };\n\treturn item;\n};\n\nconst DEREFERENCED = function(item,ref) {\n\tlet beacon = item[OWNREF];\n\tif (beacon) {\n\t\tbeacon.removeSubscriber(ref);\n\t};\n\treturn item;\n};\n\nlet c$0 = Symbol();\nclass ArrayPatcher {\n\tconstructor(array){\n\t\tthis.changes = new Map;\n\t\tthis.cleanup();\n\t\tif (array) { this.reset(array) };\n\t}\n\t\n\treset(array = []){\n\t\tthis.array = array;\n\t\treturn this.initialLength = array.length;\n\t}\n\t\n\tcleanup(){\n\t\tthis.idx = 0;\n\t\tthis.array = null;\n\t\tthis.changes.clear();\n\t\treturn this.dirty = false;\n\t}\n\t\n\tpush(item){\n\t\tif (this.initialLength == 0) {\n\t\t\tif (this.array.indexOf(item) < 0) {\n\t\t\t\tthis.changes.set(item,1);\n\t\t\t\tthis.array.push(item);\n\t\t\t\tthis.idx++;\n\t\t\t};\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet i = this.idx;\n\t\tlet toReplace = this.array[i];\n\t\t\n\t\t// this only works if things are supposed to go in an array once\n\t\tif (toReplace === item) {\n\t\t\t++this.idx;\n\t\t} else {\n\t\t\t// might be slower - not sure\n\t\t\tif (i > 0 && this.array[i - 1] === item) {\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tlet prevIndex = this.array.indexOf(item);\n\t\t\tlet changed = this.changes.get(item);\n\t\t\t\n\t\t\tif (prevIndex === -1) {\n\t\t\t\tthis.array.splice(i,0,item);\n\t\t\t\tthis.changes.set(item,1);\n\t\t\t\tthis.idx++;\n\t\t\t} else if (prevIndex < i) {\n\t\t\t\treturn;\n\t\t\t} else if (prevIndex === i + 1) {\n\t\t\t\t// if the last one is simply removed\n\t\t\t\tif (toReplace) {\n\t\t\t\t\tthis.changes.set(toReplace,-1);\n\t\t\t\t};\n\t\t\t\t// better to filter out value after? Splice is expensive\n\t\t\t\tthis.array.splice(i,1);\n\t\t\t\t++this.idx;\n\t\t\t} else {\n\t\t\t\tif (prevIndex > i) {\n\t\t\t\t\tthis.array.splice(prevIndex,1);\n\t\t\t\t};\n\t\t\t\tthis.array.splice(i,0,item);\n\t\t\t};\n\t\t\t\n\t\t\tif (changed == -1) {\n\t\t\t\tthis.changes.delete(item);\n\t\t\t};\n\t\t};\n\t\t\n\t\treturn;\n\t}\n\t\n\tend(){\n\t\tif (this.array.length >= this.idx) {\n\t\t\twhile (this.array.length > this.idx){\n\t\t\t\tthis.changes.set(this.array.pop(),-1);\n\t\t\t};\n\t\t};\n\t\treturn this.array;\n\t}\n\t\n\tpatch(){\n\t\treturn this.end();\n\t}\n\tstatic { register$(this,c$0,'ArrayPatcher',16) }\n};\n\nfunction getExtensions(obj){\n\tvar $1, $2;\n\tlet descriptors = Object.getOwnPropertyDescriptors(obj.prototype);\n\t((($1 = descriptors.name),delete descriptors.name, $1));\n\t((($2 = descriptors.constructor),delete descriptors.constructor, $2));\n\treturn descriptors;\n};\n\nfunction activateHooks(){\n\tif (!((ACTIVATED != true) ? ((ACTIVATED = true,true)) : false)) { return };\n\t\n\treturn hooks.on('inited',function(instance) {\n\t\tlet meta = instance[METAREF];\n\t\tif (meta) {\n\t\t\tlet istag = globalThis.Node && isa$(instance,globalThis.Node);\n\t\t\tlet obj = instance[OWNREF] ||= {};\n\t\t\tfor (let $3 = 0, $4 = Object.keys(meta), $5 = $4.length, k, v; $3 < $5; $3++){\n\t\t\t\tk = $4[$3];v = meta[k];let reaction = obj[k] = new Reaction(instance[k],instance,v);\n\t\t\t\tif (!(istag)) { reaction.call() };\n\t\t\t};\n\t\t\t\n\t\t\tif (istag) {\n\t\t\t\tlisten(instance,'mount',function() {\n\t\t\t\t\tfor (let $6 = 0, $7 = iter$__(Object.values(obj)), $8 = $7.length; $6 < $8; $6++) {\n\t\t\t\t\t\tlet item = $7[$6];\n\t\t\t\t\t\tif (isa$(item,Reaction)) { item.activate() };\n\t\t\t\t\t};\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlisten(instance,'unmount',function() {\n\t\t\t\t\tfor (let $9 = 0, $10 = iter$__(Object.values(obj)), $11 = $10.length; $9 < $11; $9++) {\n\t\t\t\t\t\tlet item = $10[$9];\n\t\t\t\t\t\tif (isa$(item,Reaction)) { item.deactivate() };\n\t\t\t\t\t};\n\t\t\t\t\treturn;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t};\n\t\t};\n\t\treturn;\n\t});\n};\n\nfunction getSchema(target,typ = METAREF){\n\tif (!(target.hasOwnProperty(typ))) {\n\t\ttarget[typ] = Object.assign({},target[typ] || {});\n\t};\n\treturn target[typ];\n};\n\nlet c$1 = Symbol();\nclass Context {\n\tconstructor(up,depth = 0){\n\t\tthis.depth = depth;\n\t\tthis.parent = up;\n\t\tthis.target = null;\n\t\tthis.spy = null;\n\t\tthis.patcher = new ArrayPatcher;\n\t}\n\t\n\t\n\tget activeΦ(){\n\t\treturn CTX == this;\n\t}\n\t\n\tget rootΦ(){\n\t\treturn this == ROOT;\n\t}\n\t\n\tget snapshot(){\n\t\tlet all = [];\n\t\tlet item = this[$child$];\n\t\twhile (item && item.target){\n\t\t\tall.push({\n\t\t\t\tdepth: item.depth,\n\t\t\t\ttarget: item.target,\n\t\t\t\tbeacon: item.beacon\n\t\t\t});\n\t\t\titem = item[$child$];\n\t\t};\n\t\treturn all;\n\t}\n\t\n\treset(item){\n\t\tthis.target = item;\n\t\tthis.beacon = item.beacon;\n\t\tlet s = this.spy = item[$$spy$];\n\t\tthis.tracking = s ? (((s.tracking ?? true))) : true;\n\t\tthis.patcher.reset(item.observing ||= []);// nah to the action\n\t\ts && s?.enter?.(this);\n\t\treturn this;\n\t}\n\t\n\tadd(ref,extra){\n\t\tif (this.tracking && ref && this.beacon) {\n\t\t\t// what if we are\n\t\t\tthis.patcher.push(ref);\n\t\t};\n\t\tif (this.spy) {\n\t\t\tthis.spy?.observed?.(this,ref,extra);\n\t\t};\n\t\treturn;\n\t}\n\t\n\treact(reaction){\n\t\tif (this.spy) {\n\t\t\tthis.spy?.react?.(this,reaction);\n\t\t};\n\t\treturn ROOT.reactions.add(reaction);\n\t}\n\t\n\tpush(item){\n\t\treturn rx.ctx = CTX = this.child.reset(item);\n\t}\n\t\n\tpop(){\n\t\tlet res = null;\n\t\tif (this.beacon) {\n\t\t\tres = this.patcher.end();\n\t\t\tlet diff = this.patcher.changes;\n\t\t\tlet changes = diff.size;\n\t\t\t\n\t\t\tif (changes) {\n\t\t\t\tfor (let [item,op] of iter$__(diff)){\n\t\t\t\t\tif (op === 1) {\n\t\t\t\t\t\titem.addSubscriber(this.beacon);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.removeSubscriber(this.beacon);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.spy) {\n\t\t\tthis.spy?.leave?.(this);\n\t\t};\n\t\t// should also clear patcher etc due to memory leaks?\n\t\tthis.patcher.cleanup();\n\t\tthis.target = this.beacon = null;\n\t\tCTX = this.parent;// call re-enter?\n\t\tif (CTX == ROOT) {\n\t\t\tROOT.flush();\n\t\t\trx.ctx = null;\n\t\t} else {\n\t\t\trx.ctx = CTX;\n\t\t};\n\t\treturn res;\n\t}\n\t\n\tget child(){\n\t\treturn this[$child$] ||= new Context(this,this.depth + 1);\n\t}\n\t\n\tget reactions(){\n\t\treturn this[$reactions$] ||= new Set;\n\t}\n\t\n\tflush(){\n\t\tif (!(this[$reactions$])) { return };\n\t\tlet items = this[$reactions$];\n\t\tthis[$reactions$] = null;\n\t\tfor (let reaction of iter$__(items)){\n\t\t\treaction.call();\n\t\t};\n\t\treturn;\n\t}\n\tstatic { register$(this,c$1,'Context',16) }\n};\n\nlet c$2 = Symbol();\nclass Root extends Context {\n\tadd(){\n\t\treturn true;\n\t}\n\tstatic { register$(this,c$2,'Root',0) }\n};\n\nlet CTX = ROOT = rx.root = new Root(null,0);\n\nlet REACT = function() {\n\treturn CTX.tracking = false;\n};\n\nlet GET = function(target,key,vsym,meta,bsym) {\n\tlet val = target[vsym];\n\tlet beacon = target[bsym];\n\t\n\tif (!(beacon)) {\n\t\tbeacon = target[bsym] = new Ref(meta,key,val);\n\t};\n\t\n\tCTX.add(beacon,target);\n\treturn val;\n};\n\nlet SET = function(target,key,vsym,value,meta,bsym) {\n\tlet prev = target[vsym];\n\t\n\tif (value != prev) {\n\t\ttarget[vsym] = value;\n\t\tlet beacon = target[bsym];\n\t\tif (beacon) { beacon.changed(0,value,prev) };\n\t};\n\t\n\treturn;\n};\n\nlet c$3 = Symbol();\nexport class Ref {\n\tconstructor(type,name,val){\n\t\tthis.id = NEXT_REF_ID++;\n\t\tthis.observer = null;\n\t\tthis.observers = null;\n\t\tthis.v = 0;\n\t\tthis.o = type || null;\n\t\t\n\t\tif (val && val[$$referenced$]) { val[$$referenced$](this) };\n\t\treturn this;\n\t}\n\t\n\t// the current version of the signal\n\tget $$v(){\n\t\treturn this.v;\n\t}\n\t\n\tchanged(level,newValue,oldValue){\n\t\tRUN_ID++;\n\t\tthis.v++;\n\t\t// mixing responsibilities with deep observers?\n\t\tif (oldValue && oldValue[$$dereferenced$]) { oldValue[$$dereferenced$](this,newValue) };\n\t\tif (newValue && newValue[$$referenced$]) { newValue[$$referenced$](this,oldValue) };\n\t\t\n\t\t// change is only called here?\n\t\tif (this.observer) { this.observer.$$invalidated(level + 1,this,newValue,oldValue) };\n\t\t\n\t\tif (this.observers) {\n\t\t\tfor (let obs of iter$__(this.observers)){\n\t\t\t\tobs.$$invalidated(level + 1,this,newValue,oldValue);\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (CTX == ROOT) {\n\t\t\tCTX.flush();\n\t\t};\n\t\treturn;\n\t}\n\t\n\tinvalidated(level,source){\n\t\tconsole.warn(`Ref.invalidated is deprecated - use $$invalidated`);\n\t\treturn this.$$invalidated(level,source);\n\t}\n\t\n\t$$invalidated(level,source){\n\t\tif (ATOMICS) {\n\t\t\tATOMICS.add(this);\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\tthis.v++;\n\t\t\n\t\tif (level > 30) {\n\t\t\tconsole.warn(\"Ref observer chain too deep\",this,source);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t\n\t\tif (this.observer) { this.observer.$$invalidated(level + 1,this) };\n\t\t\n\t\tif (this.observers) {\n\t\t\tfor (let obs of iter$__(this.observers)){\n\t\t\t\tobs.$$invalidated(level + 1,this);\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (level == 0 && CTX == ROOT) {\n\t\t\tCTX.flush();\n\t\t};\n\t\treturn true;\n\t}\n\t\n\taddSubscriber(item){\n\t\tif (!(this.observer)) {\n\t\t\tthis.observer = item;\n\t\t} else {\n\t\t\tthis.observers ||= new Set;\n\t\t\tthis.observers.add(item);\n\t\t};\n\t\treturn;\n\t}\n\t\n\tremoveSubscriber(item){\n\t\tif (this.observer == item) {\n\t\t\tthis.observer = null;\n\t\t};\n\t\t\n\t\tlet obs = this.observers;// should use sorted set? More efficient and faster than splice\n\t\tif (obs) {\n\t\t\tobs.delete(item);\n\t\t};\n\t\treturn;\n\t}\n\t\n\treportChanged(){\n\t\treturn this.changed(0);\n\t}\n\t\n\treportObserved(meta){\n\t\treturn CTX.add(this,meta);\n\t}\n\tstatic { register$(this,c$3,'Ref',16) }\n};\n\nexport function createAtom(name){\n\treturn new Ref(null,name,null);\n};\n\n/*\nArray\n*/\n\nlet c$4 = Symbol();\nexport class ObservableArray extends Array {\n\tpush(){\n\t\treturn CHANGED(this,super.push(...arguments));\n\t}\n\tpop(){\n\t\treturn CHANGED(this,super.pop(...arguments));\n\t}\n\tunshift(){\n\t\treturn CHANGED(this,super.unshift(...arguments));\n\t}\n\tshift(){\n\t\treturn CHANGED(this,super.shift(...arguments));\n\t}\n\tsplice(){\n\t\treturn CHANGED(this,super.splice(...arguments));\n\t}\n\tat(){\n\t\treturn OBSERVED(this,super.at(...arguments));\n\t}\n\tmap(){\n\t\treturn OBSERVED(this,super.map(...arguments));\n\t}\n\tflatMap(){\n\t\treturn OBSERVED(this,super.flatMap(...arguments));\n\t}\n\tflat(){\n\t\treturn OBSERVED(this,super.flat(...arguments));\n\t}\n\tfilter(){\n\t\treturn OBSERVED(this,super.filter(...arguments));\n\t}\n\tfind(){\n\t\treturn OBSERVED(this,super.find(...arguments));\n\t}\n\tslice(){\n\t\treturn OBSERVED(this,super.slice(...arguments));\n\t}\n\tsort(){\n\t\treturn OBSERVED(this,super.sort(...arguments));\n\t}\n\t\n\tget len(){\n\t\treturn OBSERVED(this,this.length);\n\t}\n\t\n\tset len(value){\n\t\tthis.length = value;\n\t\tCHANGED(this);\n\t}\n\t\n\ttoIterable(){\n\t\tif (TRACKING) { CTX.add(this[OWNREF]) };\n\t\treturn this;\n\t}\n\t\n\t[Symbol.iterator](){\n\t\treturn OBSERVED(this,super[Symbol.iterator](...arguments));\n\t}\n\tstatic { register$(this,c$4,'ObservableArray',8) }\n};\n\nconst ArrayExtensions = getExtensions(ObservableArray);\n\nlet c$5 = Symbol();\nclass ΩArray {\n\tget len(){\n\t\treturn this.length;\n\t}\n\t\n\tset len(value){\n\t\tthis.length = value;\n\t}\n\t\n\tget [$$reactive$](){\n\t\treturn REFERENCED(this,null,ArrayExtensions);\n\t}\n\t[$$referenced$](ref){\n\t\treturn REFERENCED(this,ref,ArrayExtensions);\n\t}\n\t[$$dereferenced$](ref){\n\t\treturn DEREFERENCED(this,ref);\n\t}\n\tstatic { register$(this,c$5,'Array',1,Array); }\n};\n\n/*\nSet\n*/\n\nconst Set_has = Set.prototype.has;\nlet c$6 = Symbol();\nclass ObservableSet extends Set {\n\thas(){\n\t\treturn OBSERVED(this,super.has(...arguments));\n\t}\n\tkeys(){\n\t\treturn OBSERVED(this,super.keys(...arguments));\n\t}\n\tvalues(){\n\t\treturn OBSERVED(this,super.values(...arguments));\n\t}\n\tentries(){\n\t\treturn OBSERVED(this,super.entries(...arguments));\n\t}\n\t\n\tadd(val){\n\t\treturn Set_has.call(this,val) ? this : CHANGED(this,super.add(...arguments));\n\t}\n\tdelete(val){\n\t\treturn Set_has.call(this,val) ? CHANGED(this,super.delete(...arguments)) : this;\n\t}\n\tclear(){\n\t\treturn this.size ? CHANGED(this,super.clear(...arguments)) : this;\n\t}\n\tstatic { register$(this,c$6,'ObservableSet',8) }\n};\n\nconst SetExtensions = getExtensions(ObservableSet);\n\nlet c$7 = Symbol();\nclass ΩSet {\n\tget [$$reactive$](){\n\t\treturn REFERENCED(this,null,SetExtensions);\n\t}\n\t[$$referenced$](ref){\n\t\treturn REFERENCED(this,ref,SetExtensions);\n\t}\n\t[$$dereferenced$](ref){\n\t\treturn DEREFERENCED(this,ref);\n\t}\n\tstatic { register$(this,c$7,'Set',1,Set); }\n};\n\n/*\nMap\n*/\n\nlet c$8 = Symbol();\nclass ObservableMap extends Map {\n\tget(){\n\t\treturn OBSERVED(this,super.get(...arguments));\n\t}\n\thas(){\n\t\treturn OBSERVED(this,super.has(...arguments));\n\t}\n\tkeys(){\n\t\treturn OBSERVED(this,super.keys(...arguments));\n\t}\n\tvalues(){\n\t\treturn OBSERVED(this,super.values(...arguments));\n\t}\n\tentries(){\n\t\treturn OBSERVED(this,super.entries(...arguments));\n\t}\n\t\n\tset(){\n\t\treturn CHANGED(this,super.set(...arguments));\n\t}\n\tclear(){\n\t\treturn CHANGED(this,super.clear(...arguments));\n\t}\n\tdelete(){\n\t\treturn CHANGED(this,super.delete(...arguments));\n\t}\n\tstatic { register$(this,c$8,'ObservableMap',8) }\n};\n\nconst MapExtensions = getExtensions(ObservableMap);\n\nlet c$9 = Symbol();\nclass ΩMap {\n\tget [$$reactive$](){\n\t\treturn REFERENCED(this,null,MapExtensions);\n\t}\n\t[$$referenced$](ref){\n\t\treturn REFERENCED(this,ref,MapExtensions);\n\t}\n\t[$$dereferenced$](ref){\n\t\treturn DEREFERENCED(this,ref);\n\t}\n\tstatic { register$(this,c$9,'Map',1,Map); }\n};\n\nlet c$10 = Symbol();\nclass PropertyType {\n\tconstructor(name,options = {}){\n\t\tvar self = this;\n\t\tthis.name = name;\n\t\tthis.options = options;\n\t\tconst vkey = this.key = VALUESYM(name);\n\t\tconst bkey = REFSYM(name);\n\t\t\n\t\tlet descriptor = this.descriptor = {\n\t\t\tenumerable: (options.enumerable ?? true),\n\t\t\tconfigurable: false,\n\t\t\tget: function() { return TRACKING ? GET(this,name,vkey,self,bkey) : this[vkey]; },\n\t\t\tset: function(value) {\n\t\t\t\treturn (TRACKING || !(!(this[bkey]))) ? SET(this,name,vkey,value,self,bkey) : ((this[vkey] = value));\n\t\t\t}\n\t\t};\n\t\t\n\t\tlet lazy = this.lazyDescriptor = {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tget: function() {\n\t\t\t\tif (TRACKING) {\n\t\t\t\t\tObject.defineProperty(this,name,descriptor);\n\t\t\t\t\treturn this[name];\n\t\t\t\t};\n\t\t\t\t// not if this is the prototype\n\t\t\t\treturn this[vkey];\n\t\t\t},\n\t\t\t\n\t\t\tset: function(value) {\n\t\t\t\tthis[vkey] = value;\n\t\t\t\tthis[bkey] = null;\n\t\t\t\treturn Object.defineProperty(this,name,descriptor);\n\t\t\t}\n\t\t};\n\t}\n\tstatic { register$(this,c$10,'PropertyType',16) }\n};\n\nlet c$11 = Symbol();\nclass RefIndex {\n\tconstructor($$ = null){\n\t\tthis[$__init__$]($$);\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $0;\n\t\tthis[$map$] = ($$ && ($0 = $$[$map$]) !== undefined) ? ($0) : (new Map);\n\t\t\n\t}\n\tfor(value){\n\t\tlet res = this[$map$].get(value);\n\t\tif (!(res)) { this[$map$].set(value,res = []) };\n\t\treturn res;\n\t}\n\t\n\tget(value){\n\t\tlet res = this.for(value);\n\t\tlet beacon = res[OWNREF];\n\t\tif (!(beacon)) { res[$$reactive$] };\n\t\tif (TRACKING) { OBSERVED(res) };\n\t\treturn res;\n\t}\n\t\n\tadd(key,member){\n\t\treturn this.for(key).push(member);\n\t}\n\t\n\tdelete(key,member){\n\t\tlet arr = this.for(key);\n\t\tlet idx = arr.indexOf(member);\n\t\tarr.splice(idx,1);\n\t\treturn;\n\t}\n\tstatic { register$(this,c$11,'RefIndex',16) }\n};\n\nlet c$12 = Symbol();\nclass RefType {\n\tconstructor(name,vkey){\n\t\tvar self = this;\n\t\tthis.name = name;\n\t\tthis.key = vkey;\n\t\tthis.index = new RefIndex;\n\t\t\n\t\tconst bkey = REFSYM(name);\n\t\t\n\t\tlet descriptor = this.descriptor = {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: function() { return TRACKING ? GET(this,name,vkey,self,bkey) : this[vkey]; },\n\t\t\tset: function(value) {\n\t\t\t\tlet prev = this[vkey];\n\t\t\t\t(TRACKING || !(!(this[bkey]))) ? SET(this,name,vkey,value,self,bkey) : ((this[vkey] = value));\n\t\t\t\tif (prev != value) {\n\t\t\t\t\tif (prev) { self.index.delete(prev,this) };\n\t\t\t\t\tif (value) { return self.index.add(value,this) };\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\t\n\t\tlet lazy = this.lazyDescriptor = {\n\t\t\tset: function(value) {\n\t\t\t\tthis[vkey] = value;\n\t\t\t\tif (value) { self.index.add(value,this) };\n\t\t\t\tObject.defineProperty(this,name,descriptor);\n\t\t\t\treturn this[bkey] = null;\n\t\t\t}\n\t\t};\n\t}\n\t\n\twhere(value){\n\t\treturn this.index.get(value);\n\t}\n\tstatic { register$(this,c$12,'RefType',16) }\n};\n\n// why not inherit from beacon?\n// why not store the value directly on this?\nlet c$13 = Symbol();\nclass Memo {\n\tconstructor(target,func,vkey,type){\n\t\tthis.observing = null;\n\t\tthis.observers = null;\n\t\tthis.flags = 68;\n\t\tthis.target = target;\n\t\tthis.func = func;\n\t\tthis.vkey = vkey;\n\t\tthis.type = type;\n\t\tthis.v = 0;\n\t\t// global.ops.push(self)\n\t}\n\t\n\tget beacon(){\n\t\treturn this;\n\t}\n\t\n\taddSubscriber(item){\n\t\tif (item == this) {\n\t\t\tconsole.warn(`@computed depends on itself`);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tif (!(this.observer)) {\n\t\t\tthis.observer = item;\n\t\t} else {\n\t\t\tthis.observers ||= [];\n\t\t\tthis.observers.push(item);\n\t\t};\n\t\treturn;\n\t}\n\t\n\tremoveSubscriber(item){\n\t\tif (this.observer == item) {\n\t\t\treturn this.observer = null;\n\t\t};\n\t\t\n\t\tlet obs = this.observers;\n\t\tlet idx = obs ? obs.indexOf(item) : -1;\n\t\tif (idx >= 0) {\n\t\t\tobs.splice(idx,1);\n\t\t};\n\t\treturn;\n\t}\n\t\n\t$$invalidated(level,source){\n\t\tthis.flags |= F.STALE | F.POSSIBLY_STALE;\n\t\t\n\t\tif (level > 40) {\n\t\t\tconsole.warn(\"Memo invalidated observer chain too deep\",this,source);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tif (this.observer) { this.observer.$$invalidated(level + 1,this) };\n\t\t\n\t\tif (!(this.observers)) { return };\n\t\tfor (let $12 = 0, $13 = iter$__(this.observers), $14 = $13.length; $12 < $14; $12++) {\n\t\t\t// these are never - they are always computeds\n\t\t\t\t\t\t// not clear that these are invalidated? only if this value has not changed\n\t\t\tlet observer = $13[$12];\n\t\t\tobserver.$$invalidated(level + 1,this);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tdeactivate(){\n\t\tif (this.observing) {\n\t\t\tfor (let $15 = 0, $16 = iter$__(this.observing), $17 = $16.length; $15 < $17; $15++) {\n\t\t\t\tlet item = $16[$15];\n\t\t\t\titem.removeSubscriber(this);\n\t\t\t};\n\t\t};\n\t\tthis.observing = null;\n\t\treturn this;\n\t}\n\t\n\tvalue(){\n\t\tif (TRACKING) { CTX.add(this) };\n\t\t\n\t\tif ((this.flags & F.POSSIBLY_STALE)==0) {\n\t\t\treturn this.target[this.vkey];\n\t\t};\n\t\t\n\t\tTRACKING++;\n\t\tthis.flags |= F.RUNNING;\n\t\tCTX.push(this);\n\t\tlet res = this.func.call(this.target);\n\t\tCTX.pop(this);\n\t\tlet prev = this.target[this.vkey];\n\t\tlet changed = false;\n\t\t\n\t\t// for array-likes see if they are identical\n\t\tif (res && prev && res.constructor === prev.constructor && (res instanceof Array)) {\n\t\t\tlet l = res.length;\n\t\t\tif (l != prev.length) {\n\t\t\t\tchanged = true;\n\t\t\t} else {\n\t\t\t\tlet i = 0;\n\t\t\t\twhile (i < l){\n\t\t\t\t\tif (res[i] != prev[i]) {\n\t\t\t\t\t\tchanged = true;break;\n\t\t\t\t\t};\n\t\t\t\t\ti++;\n\t\t\t\t};\n\t\t\t};\n\t\t} else {\n\t\t\tchanged = res !== prev;\n\t\t};\n\t\t\n\t\tthis.target[this.vkey] = res;\n\t\tthis.flags &= ~(F.STALE | F.POSSIBLY_STALE | F.RUNNING);\n\t\tif (changed) {\n\t\t\tthis.v++;\n\t\t};\n\t\t\n\t\tTRACKING--;\n\t\treturn res;\n\t}\n\tstatic { register$(this,c$13,'Memo',16) }\n};\n\nlet c$14 = Symbol();\nexport class ComputedType {\n\tconstructor(name,func){\n\t\tvar self = this;\n\t\tthis.name = name;\n\t\tconst bkey = REFSYM(name);\n\t\tconst vkey = VALUESYM(name);\n\t\t\n\t\t// could use weakmap for a bit nicer structure I guess.\n\t\tconst descriptor = this.descriptor = {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: false,\n\t\t\tget: function() { return this[bkey].value(); }\n\t\t};\n\t\t\n\t\tconst lazy = this.lazyDescriptor = {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tget: function() {\n\t\t\t\tlet wrapper = this[bkey] = new Memo(this,func,vkey,self.type);\n\t\t\t\tObject.defineProperty(this,name,descriptor);\n\t\t\t\treturn wrapper.value();\n\t\t\t}\n\t\t};\n\t}\n\tstatic { register$(this,c$14,'ComputedType',16) }\n};\n\nlet c$15 = Symbol();\nclass Reaction {\n\tget beacon(){\n\t\treturn this;\n\t}\n\t\n\tconstructor(cb,context,options = {}){\n\t\tthis.cb = cb;\n\t\tthis.context = context;\n\t\tthis.options = options;\n\t\tthis.flags = 0;\n\t\tthis.id = NEXT_REF_ID++;\n\t\tthis.cachedComputedVersions = new WeakMap;\n\t\tthis.checkComputedValues = new Set;\n\t\tthis.observing = [];\n\t\tthis.timeout = null;\n\t}\n\t\n\tget runningΦ(){\n\t\treturn this.flags & F.RUNNING;\n\t}\n\t\n\t$$invalidated(stack,source){\n\t\tif (source instanceof Memo) {\n\t\t\tthis.flags |= F.POSSIBLY_STALE;\n\t\t\tthis.checkComputedValues?.add?.(source);\n\t\t} else {\n\t\t\tthis.flags |= F.STALE;\n\t\t};\n\t\t\n\t\tif (this.observing) {\n\t\t\tCTX.react(this);\n\t\t};\n\t\t\n\t\treturn;\n\t}\n\t\n\tactivate(){\n\t\tthis.observing = [];\n\t\tthis.cachedComputedVersions = new WeakMap;\n\t\tthis.checkComputedValues = new Set;\n\t\tthis.call();\n\t\treturn this;\n\t}\n\t\n\tdeactivate(){\n\t\tif (this.timeout) { clearTimeout(this.timeout) };\n\t\tif (this.observing) {\n\t\t\tfor (let $18 = 0, $19 = iter$__(this.observing), $20 = $19.length; $18 < $20; $18++) {\n\t\t\t\tlet item = $19[$18];\n\t\t\t\titem.removeSubscriber(this);\n\t\t\t};\n\t\t};\n\t\tthis.observing = this.checkComputedValues = this.cachedComputedVersions = null;\n\t\treturn this;\n\t}\n\t\n\tcall(){\n\t\tvar self = this;\n\t\tif (TRACKING) {\n\t\t\t// only do this to detect infinite loops somehow?\n\t\t\tconsole.warn('should not call reaction inside an autorunning context?',ROOT.snapshot,this);\n\t\t\t// this shouldnt _always_ be the case though?\n\t\t\t// return\n\t\t};\n\t\t\n\t\tif (this.flags & F.POSSIBLY_STALE && (this.flags & F.STALE)==0) {\n\t\t\tlet stale = false;\n\t\t\tfor (let value of iter$__(this.checkComputedValues)){\n\t\t\t\tlet v0 = this.cachedComputedVersions.get(value);\n\t\t\t\tvalue.value();\n\t\t\t\tlet v1 = value.v;\n\t\t\t\tif (v0 != v1) {\n\t\t\t\t\tstale = true;break;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif (!(stale)) {\n\t\t\t\tthis.flags &= ~F.POSSIBLY_STALE;\n\t\t\t\tthis.checkComputedValues.clear();\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.options.delay) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tlet num = this.options.delay;\n\t\t\tif (typeof num != 'number') { num = 1000 };\n\t\t\tthis.timeout = setTimeout(function() { return self.run(); },num);\n\t\t\treturn;\n\t\t};\n\t\treturn this.run();\n\t}\n\t\n\trun(){\n\t\tTRACKING++;\n\t\tthis.flags |= F.RUNNING;\n\t\tlet ctx = CTX.push(this);\n\t\t// let stop\n\t\tlet res = this.cb.call(this.context,REACT);\n\t\tlet beacons = CTX.pop(this);\n\t\t\n\t\tthis.observing = beacons;\n\t\t\n\t\tthis.checkComputedValues.clear();\n\t\tfor (let $21 = 0, $22 = iter$__(beacons), $23 = $22.length; $21 < $23; $21++) {\n\t\t\tlet item = $22[$21];\n\t\t\tif (!((item instanceof Memo))) { continue; };\n\t\t\tthis.cachedComputedVersions.set(item,item.v);\n\t\t};\n\t\t\n\t\tthis.flags &= ~(F.RUNNING | F.STALE | F.POSSIBLY_STALE);\n\t\tTRACKING--;\n\t\t\n\t\tif (true && !(this.options.silent)) { commit() };\n\t\treturn res;\n\t}\n\t\n\tdispose(){\n\t\tthis.deactivate();\n\t\tthis.cb = this.context = this.options = null;\n\t\treturn this;\n\t}\n\tstatic { register$(this,c$15,'Reaction',16) }\n};\n\nlet c$16 = Symbol();\nclass Awaits extends Reaction {\n\tresolve(val){\n\t\tthis.deactivate();\n\t\treturn this.resolved = val;\n\t}\n\t\n\tthen(...params){\n\t\tvar self = this;\n\t\tif (this.resolved !== undefined) {\n\t\t\treturn Promise.resolve(this.resolved).then(...params);\n\t\t} else {\n\t\t\tthis[$promise$] ||= new Promise(function(_resolve) {\n\t\t\t\treturn self.resolve = function(val) {\n\t\t\t\t\tself.deactivate();\n\t\t\t\t\tself.resolved = val;\n\t\t\t\t\treturn _resolve(val);\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn this[$promise$].then(...params);\n\t\t};\n\t}\n\t\n\trun(){\n\t\tTRACKING++;\n\t\tthis.flags |= F.RUNNING;\n\t\tlet ctx = CTX.push(this);\n\t\t// let stop\n\t\tlet res = this.cb.call(this.context);\n\t\tlet beacons = CTX.pop(this);\n\t\t\n\t\tthis.observing = beacons;\n\t\t\n\t\tthis.checkComputedValues.clear();\n\t\tfor (let $24 = 0, $25 = iter$__(beacons), $26 = $25.length; $24 < $26; $24++) {\n\t\t\tlet item = $25[$24];\n\t\t\tif (!((item instanceof Memo))) { continue; };\n\t\t\tthis.cachedComputedVersions.set(item,item.v);\n\t\t};\n\t\t\n\t\tthis.flags &= ~(F.RUNNING | F.STALE | F.POSSIBLY_STALE);\n\t\tTRACKING--;\n\t\t\n\t\tif (res != false && res != undefined && res != null) {\n\t\t\tthis.resolve(res);\n\t\t\tif (true && !(this.options.silent)) { commit() };\n\t\t};\n\t\treturn res;\n\t}\n\tstatic { register$(this,c$16,'Awaits',0) }\n};\n\nlet c$17 = Symbol();\nexport class Action {\n\tconstructor(cb,scope){\n\t\tthis.scope = scope;\n\t\tthis.cb = cb;\n\t}\n\t\n\tget ctx(){\n\t\treturn CTX;\n\t}\n\t\n\trun(that = this.scope,args = [],track = false){\n\t\tCTX.push(this);\n\t\ttry {\n\t\t\t// are we tracking here\n\t\t\tif (track) { TRACKING ++ };\n\t\t\tlet res = this.cb.apply(that,args);\n\t\t\tif (track) { TRACKING -- };\n\t\t\tCTX.pop(this);\n\t\t\treturn res;\n\t\t} catch (e) {\n\t\t\tif (track) { TRACKING -- };\n\t\t\tCTX.pop(this);\n\t\t\tthrow e;\n\t\t};\n\t}\n\tstatic { register$(this,c$17,'Action',16) }\n};\n\nexport function autorun(cb,options = {}){\n\tlet reaction = new Reaction(cb,globalThis,options);\n\treaction.call();\n\treturn reaction;\n};\n\nexport function awaits(cb,options = {}){\n\tlet reaction = new Awaits(cb,globalThis,options);\n\treaction.call();\n\treturn reaction;\n};\n\nexport function observable(object){\n\treturn object[$$reactive$];\n};\n\nexport function atomic(cb){\n\tlet prev = ATOMICS;\n\tlet res;\n\tif (!(prev)) {\n\t\tlet all = ATOMICS = new Set;\n\t\t\n\t\ttry {\n\t\t\tres = cb();\n\t\t} catch (e) {\n\t\t\tATOMICS = null;\n\t\t\tfor (let beacon of iter$__(all)){\n\t\t\t\tbeacon.$$invalidated(1,all);\n\t\t\t};\n\t\t\tif (ROOT == CTX) { ROOT.flush() };\n\t\t\tthrow e;\n\t\t};\n\t\t\n\t\tATOMICS = null;\n\t\t\n\t\tfor (let beacon of iter$__(all)){\n\t\t\tbeacon.$$invalidated(1,all);\n\t\t};\n\t\tif (ROOT == CTX) { ROOT.flush() };\n\t\treturn res;\n\t} else {\n\t\treturn cb();\n\t\t\n\t};\n};\n\n/*\n\n*/\n\nexport function run(cb){\n\tlet action = new Action(cb,globalThis);\n\treturn action.run();\n};\n\nexport function spy(spy,blk,ctx = null){\n\tspy[$$spy$] ||= spy;\n\tCTX.push(spy);\n\ttry {\n\t\t// are we tracking here\n\t\tTRACKING++;\n\t\tlet res = ctx ? blk.call(ctx,spy) : blk(spy,ctx);\n\t\tTRACKING--;\n\t\tCTX.pop(spy);\n\t\treturn res;\n\t} catch (e) {\n\t\tTRACKING--;\n\t\tCTX.pop(spy);\n\t\tthrow e;\n\t};\n};\n\nexport function reportChanged(item){\n\tif (item && item[OWNREF]) {\n\t\titem[OWNREF].$$invalidated(0);\n\t};\n\treturn item;\n};\n\nexport function reportInvalidated(item){\n\tif (item && item[OWNREF]) {\n\t\titem[OWNREF].$$invalidated(0);\n\t};\n\treturn item;\n};\n\nexport function reportObserved(item,meta){\n\tif (item && item[OWNREF]) {\n\t\titem[OWNREF].reportObserved(meta);\n\t};\n\treturn item;\n};\n\nexport function createRef(params = F.OBJECT){\n\treturn new Ref;\n};\n\nexport function disposeObservables(item){\n\tlet symbols = Object.getOwnPropertySymbols(item);\n\tfor (let $27 = 0, $28 = iter$__(symbols), $29 = $28.length; $27 < $29; $27++) {\n\t\tlet sym = $28[$27];\n\t\tif (isa$(item[sym],Memo)) {\n\t\t\titem[sym].deactivate();\n\t\t};\n\t};\n\treturn item;\n};\n\n\n\nexport function getComputed(target,name){\n\treturn target[REFSYM(name)];\n};\n\nexport function αcomputed(target,name,desc){\n\tlet sym = METASYM(name);\n\tlet field = target[sym] = new ComputedType(name,desc.get);\n\treturn field.lazyDescriptor;\n};\n\nexport function αobservable(target,key,desc){\n\tlet sym = METASYM(key);\n\tlet vsym = VALUESYM(key);\n\tlet opts = this[0] || {};\n\tlet field = target[sym] = new PropertyType(key,opts);\n\t\n\tif (desc) {\n\t\tObject.defineProperty(target,vsym,Object.assign({},desc));\n\t\treturn field.lazyDescriptor;\n\t};\n\t\n\tObject.defineProperty(target,key,field.lazyDescriptor);\n\treturn null;\n};\n\n// @deprecated\nexport function αref(target,name,desc){\n\tlet sym = METASYM(name);\n\ttarget.constructor[name];\n\tlet field = target[sym] = new RefType(name,VALUESYM(name));\n\treturn field.lazyDescriptor;\n};\n\nexport function αautorun(target,key,desc){\n\tlet schema = getSchema(target);\n\tlet options = this[0] || {};\n\toptions.flags = F.AUTORUN;\n\tactivateHooks();\n\tschema[key] = options;\n\treturn desc;\n};\n\n/*\nMark methods as actions to delay any reaction caused by\nobservables changing during this method\n*/\n\nexport function αaction(target,key,desc){\n\tif (desc.value) {\n\t\tlet action = new Action(desc.value,null);\n\t\tdesc.value = function() { return action.run(this,arguments); };\n\t};\n\treturn desc;\n};\n\nexport {rx};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}