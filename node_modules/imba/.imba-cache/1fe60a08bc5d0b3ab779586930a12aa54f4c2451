{"id":"ee","warnings":[],"errors":[],"js":"import {register$} from 'imba/runtime';\nconst $__init__$ = Symbol.for('#__init__'), $getRenderContext$ = Symbol.for('#getRenderContext'), $getDynamicContext$ = Symbol.for('#getDynamicContext');\n\n/*body*/\n// imba$stdlib=1\n\nexport const renderContext = {\n\tcontext: null\n};\n\nlet c$0 = Symbol();\nclass Renderer {\n\tconstructor($$ = null){\n\t\tthis[$__init__$]($$);\n\t}\n\t[$__init__$]($$ = null,deep = true,fields = true){\n\t\tvar $0;\n\t\tthis.stack = ($$ && ($0 = $$.stack) !== undefined) ? ($0) : [];\n\t\t\n\t}\n\tpush(el){\n\t\treturn this.stack.push(el);\n\t}\n\t\n\tpop(el){\n\t\treturn this.stack.pop();\n\t}\n\tstatic { register$(this,c$0,'Renderer',16) }\n};\n\nexport const renderer = new Renderer;\n\nlet c$1 = Symbol();\nexport class RenderContext extends Map {\n\tconstructor(parent,sym = null){\n\t\tsuper();\n\t\tthis._ = parent;\n\t\tthis.sym = sym;\n\t}\n\t\n\tpop(){\n\t\treturn renderContext.context = null;\n\t}\n\t\n\t[$getRenderContext$](sym){\n\t\tlet out = this.get(sym);\n\t\tout || this.set(sym,out = new RenderContext(this._,sym));\n\t\treturn renderContext.context = out;\n\t\t\n\t\t// createRenderContext(self,sym)\n\t}\n\t[$getDynamicContext$](sym,key){\n\t\treturn this[$getRenderContext$](sym)[$getRenderContext$](key);\n\t}\n\t\n\trun(value){\n\t\tthis.value = value;\n\t\tif (renderContext.context == this) { renderContext.context = null };\n\t\treturn this.get(value);\n\t}\n\t\n\tcache(val){\n\t\tthis.set(this.value,val);\n\t\treturn val;\n\t}\n\tstatic { register$(this,c$1,'RenderContext',16) }\n};\n\nexport function createRenderContext(cache,key = Symbol(),up = cache){\n\treturn renderContext.context = cache[key] ||= new RenderContext(up,key);\n};\n\nexport function getRenderContext(){\n\tlet ctx = renderContext.context;\n\tlet res = ctx || new RenderContext(null);\n\tif (globalThis.DEBUG_IMBA) {\n\t\tif (!(ctx) && renderer.stack.length > 0) {\n\t\t\tconsole.trace(\"detected unmemoized nodes in\",renderer.stack.slice(0),\"see https://imba.io\",res);\n\t\t};\n\t};\n\t\n\tif (ctx) { renderContext.context = null };\n\treturn res;\n\t// {map:new Map}\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5pbWJhIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29udGV4dC5pbWJhIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaW1iYSRzdGRsaWI9MVxuXG5leHBvcnQgY29uc3QgcmVuZGVyQ29udGV4dCA9IHtcblx0Y29udGV4dDogbnVsbFxuXG59XG5cbmNsYXNzIFJlbmRlcmVyXG5cblx0c3RhY2sgPSBbXVxuXG5cdGRlZiBwdXNoIGVsXG5cdFx0c3RhY2sucHVzaChlbClcblxuXHRkZWYgcG9wIGVsXG5cdFx0c3RhY2sucG9wIVxuXG5leHBvcnQgY29uc3QgcmVuZGVyZXIgPSBuZXcgUmVuZGVyZXJcblxuZXhwb3J0IGNsYXNzIFJlbmRlckNvbnRleHQgPCBNYXBcblx0ZGVmIGNvbnN0cnVjdG9yIHBhcmVudCxzeW0gPSBudWxsXG5cdFx0c3VwZXIoKVxuXHRcdHNlbGYuXyA9IHBhcmVudFxuXHRcdHNlbGYuc3ltID0gc3ltXG5cblx0ZGVmIHBvcFxuXHRcdHJlbmRlckNvbnRleHQuY29udGV4dCA9IG51bGxcblxuXHRkZWYgI2dldFJlbmRlckNvbnRleHQgc3ltXG5cdFx0bGV0IG91dCA9IHNlbGYuZ2V0KHN5bSlcblx0XHRvdXQgfHwgc2VsZi5zZXQoc3ltLG91dCA9IG5ldyBSZW5kZXJDb250ZXh0KHNlbGYuXyxzeW0pKVxuXHRcdHJldHVybiByZW5kZXJDb250ZXh0LmNvbnRleHQgPSBvdXRcblxuXHRcdCMgY3JlYXRlUmVuZGVyQ29udGV4dChzZWxmLHN5bSlcblx0ZGVmICNnZXREeW5hbWljQ29udGV4dCBzeW0sIGtleVxuXHRcdCNnZXRSZW5kZXJDb250ZXh0KHN5bSkuI2dldFJlbmRlckNvbnRleHQoa2V5KVxuXG5cdGRlZiBydW4gdmFsdWVcblx0XHRzZWxmLnZhbHVlID0gdmFsdWVcblx0XHRyZW5kZXJDb250ZXh0LmNvbnRleHQgPSBudWxsIGlmIHJlbmRlckNvbnRleHQuY29udGV4dCA9PSBzZWxmXG5cdFx0cmV0dXJuIHNlbGYuZ2V0KHZhbHVlKVxuXG5cdGRlZiBjYWNoZSB2YWxcblx0XHRzZWxmLnNldChzZWxmLnZhbHVlLHZhbClcblx0XHRyZXR1cm4gdmFsXG5cbmV4cG9ydCBkZWYgY3JlYXRlUmVuZGVyQ29udGV4dCBjYWNoZSxrZXkgPSBTeW1ib2whLHVwID0gY2FjaGVcblx0cmV0dXJuIHJlbmRlckNvbnRleHQuY29udGV4dCA9IGNhY2hlW2tleV0gfHw9IG5ldyBSZW5kZXJDb250ZXh0KHVwLGtleSlcblxuZXhwb3J0IGRlZiBnZXRSZW5kZXJDb250ZXh0XG5cdGxldCBjdHggPSByZW5kZXJDb250ZXh0LmNvbnRleHRcblx0bGV0IHJlcyA9IGN0eCBvciBuZXcgUmVuZGVyQ29udGV4dChudWxsKVxuXHRpZiBnbG9iYWwuREVCVUdfSU1CQVxuXHRcdGlmICFjdHggYW5kIHJlbmRlcmVyLnN0YWNrLmxlbmd0aCA+IDBcblx0XHRcdGNvbnNvbGUudHJhY2UgXCJkZXRlY3RlZCB1bm1lbW9pemVkIG5vZGVzIGluXCIscmVuZGVyZXIuc3RhY2suc2xpY2UoMCksXCJzZWUgaHR0cHM6Ly9pbWJhLmlvXCIscmVzXG5cblx0cmVuZGVyQ29udGV4dC5jb250ZXh0ID0gbnVsbCBpZiBjdHhcblx0cmV0dXJuIHJlc1xuXHQjIHttYXA6bmV3IE1hcH0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsTUFBTSxDQUFPLE1BQUEsYUFBYSxHQUFHO0NBQzVCLE9BQU8sRUFBRSxJQUFJO0NBRWI7OztBQUVELEtBQUssQ0FBQyxRQUFRLEVBQUE7dUJBUGQ7O0VBQUE7a0RBQUE7O09BU0MsS0FBSyxtQkFBTCxLQUFLLENBQUEscUJBQUEsSUFBRyxFQUFFOztFQVRYO0NBV0ssSUFBSSxDQUFDLEVBQUUsQ0FBQTtFQUNWLE9BQUEsS0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztFQUFBOztDQUVYLEdBQUcsQ0FBQyxFQUFFLENBQUE7RUFDVCxPQUFBLEtBQUEsS0FBSyxDQUFDLEdBQUcsRUFBQztFQUFBOztBQUFB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","css":""}