{"id":"fi","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }\nimport {register$} from 'imba/runtime';\nconst $states$ = Symbol.for('#states');\n\n/*body*/\n// imba$stdlib=1\nimport {session} from '../storage';\n\nconst map = new WeakMap;\n\nlet c$0 = Symbol();\nexport class State {\n\tstatic from(router,raw){\n\t\tif (!(raw)) { return null };\n\t\treturn new this(router,raw);\n\t}\n\t\n\tconstructor(history,object,local = false){\n\t\tmap.set(this,history);\n\t\tthis.path = object.path;\n\t\tthis.data = object.data || {};\n\t\tthis.index = object.index;\n\t\tthis.type = object.type;\n\t\tthis.local = local;\n\t}\n\t\n\tget history(){\n\t\treturn map.get(this);\n\t}\n\t\n\tget next(){\n\t\treturn this.history.at(this.index + 1);\n\t}\n\t\n\tget prev(){\n\t\treturn this.history.at(this.index - 1);\n\t}\n\t\n\ttoJSON(){\n\t\treturn {path: this.path,data: this.data,index: this.index,type: this.type};\n\t}\n\t\n\tsave(){\n\t\tthis.history.cache[this.index] = this;\n\t\treturn this;\n\t}\n\t\n\ttoString(){\n\t\treturn (\"\" + (this.history.id) + \"|\" + this.index);\n\t}\n\tstatic { register$(this,c$0,'State',16) }\n};\n\nlet c$1 = Symbol();\nexport class History {\n\tconstructor(router){\n\t\tthis.router = router;\n\t\tthis.store = session(\"router\");\n\t\tthis[$states$] = [];\n\t\tthis.cache = {};\n\t\tthis.index = -1;\n\t\t\n\t\tlet curr = globalThis.history.state;\n\t\tlet idx;\n\t\tif (typeof curr == 'string') {\n\t\t\tlet m = curr.split('|');\n\t\t\tthis.id = parseInt(m[0]);\n\t\t\tthis.index = parseInt(m[1]);\n\t\t\tthis.cache = this.store(this.id);\n\t\t} else {\n\t\t\tthis.id = this.store.id = (this.store.id || 0) + 1;\n\t\t\tthis.cache = this.store(this.id);\n\t\t};\n\t\t\n\t\tif (this.index == -1) {\n\t\t\t// could break forward navigation for browser as well\n\t\t\tthis.replaceState({initial: true},null,router.path);\n\t\t};\n\t}\n\t\n\tget length(){\n\t\treturn this.cache.length;\n\t}\n\t\n\tget state(){\n\t\treturn this.at(this.index);\n\t}\n\t\n\tget states(){\n\t\tlet l = this.length;\n\t\tlet i = 0;\n\t\twhile (i < l){\n\t\t\tthis.at(i++);\n\t\t};\n\t\treturn this[$states$];\n\t}\n\t\n\tget currentStates(){\n\t\treturn this.states.slice(0,this.length);\n\t}\n\t\n\tget next(){\n\t\treturn this.state.next;\n\t}\n\t\n\tget prev(){\n\t\treturn this.state.prev;\n\t}\n\t\n\tslice(a,b = this.length){\n\t\tlet out = [];\n\t\twhile (a < b){\n\t\t\tout.push(this.at(a++));\n\t\t};\n\t\treturn out;\n\t}\n\t\n\tat(index){\n\t\tif (index >= this.length) { return };\n\t\treturn this[$states$][index] ||= State.from(this,this.cache[index]);\n\t}\n\t\n\tbuildState(data,url,significant = true){\n\t\tlet state = {\n\t\t\tdata: data,\n\t\t\tindex: this.index + 1,\n\t\t\tpath: url || this.router.path,\n\t\t\ttype: significant ? 'push' : 'replace'\n\t\t};\n\t\treturn new State(this,state,true);\n\t}\n\t\n\tpushState(state,title,url,significant = true){\n\t\tif (!(isa$(state,State))) {\n\t\t\tstate = this.buildState(state,url,significant);\n\t\t};\n\t\t\n\t\tthis.index = state.index;\n\t\tthis.cache[this.index] = state;\n\t\tthis[$states$][this.index] = state;\n\t\tthis[$states$].length = this.cache.length = Math.max(state.index + 1,0);\n\t\tglobalThis.history[significant ? 'pushState' : 'replaceState'](String(state),title || null,state.path);\n\t\treturn this;\n\t}\n\t\n\treplaceState(state,title,url){\n\t\treturn this.pushState(state,title,url,false);\n\t}\n\tstatic { register$(this,c$1,'History',16) }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}