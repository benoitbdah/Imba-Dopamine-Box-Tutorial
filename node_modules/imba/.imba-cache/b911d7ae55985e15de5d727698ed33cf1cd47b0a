{"id":"ce","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nimport {register$} from 'imba/runtime';\nconst $afterVisit$ = Symbol.for('#afterVisit'), $insertInto$ = Symbol.for('#insertInto'), $appendChild$ = Symbol.for('#appendChild'), $replaceWith$ = Symbol.for('#replaceWith'), $removeFrom$ = Symbol.for('#removeFrom'), $domFlags$ = Symbol.for('#domFlags'), $$parent$ = Symbol.for('##parent'), $end$ = Symbol.for('#end'), $removeChild$ = Symbol.for('#removeChild'), $insertChild$ = Symbol.for('#insertChild');\n\n/*body*/\n// imba$stdlib=1\nimport {createComment} from './core';\nimport {Fragment} from './fragment';\n\nlet c$0 = Symbol();\nclass IndexedTagFragment extends Fragment {\n\tconstructor(f,parent){\n\t\tsuper(...arguments);\n\t\tthis[$domFlags$] = f;\n\t\tthis[$$parent$] = parent;\n\t\t\n\t\tif (!(f & 256)) {\n\t\t\tthis[$end$] = createComment('list');\n\t\t\t// #end.node = self\n\t\t};\n\t\t\n\t\tthis.$ = this.childNodes;\n\t\tthis.length = 0;\n\t\t\n\t\tif (parent) {\n\t\t\tparent[$appendChild$](this);\n\t\t};\n\t}\n\t\n\thasChildNodes(){\n\t\tif (this.length == 0) { return false };\n\t\treturn true;\n\t}\n\t\n\t[$afterVisit$](len){\n\t\tlet from = this.length;\n\t\tthis.length = len;\n\t\t\n\t\tif (from == len) { return };\n\t\tlet par = this.parentNode;\n\t\tif (!(par)) { return };\n\t\t\n\t\tlet array = this.childNodes;\n\t\tlet end = this[$end$];\n\t\t\n\t\tif (from > len) {\n\t\t\twhile (from > len){\n\t\t\t\tpar[$removeChild$](array[--from]);\n\t\t\t};\n\t\t} else if (len > from) {\n\t\t\twhile (len > from){\n\t\t\t\tpar[$insertChild$](array[from++],end);\n\t\t\t};\n\t\t};\n\t\tthis.length = len;\n\t\treturn;\n\t}\n\t\n\t[$insertInto$](parent,before){\n\t\tthis.parentNode = parent;\n\t\t\n\t\t// if parent isa Node\n\t\t// FIXME need to work with non-dom elements as well\n\t\tif (this[$end$]) {\n\t\t\tthis[$end$][$insertInto$](parent,before);\n\t\t};\n\t\t\n\t\tbefore = this[$end$];\n\t\t\n\t\tfor (let i = 0, $1 = iter$__(this.childNodes), $2 = $1.length; i < $2; i++) {\n\t\t\tlet item = $1[i];\n\t\t\tif (i == this.length) { break; };\n\t\t\t// log 'insert child',parent,item,before\n\t\t\titem[$insertInto$](parent,before);\n\t\t\t// log 'insert child',parent,item,before,parent.innerHTML\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$appendChild$](item){\n\t\t// this should be a noop\n\t\t\t\t// log 'list #appendChild',item\n\t\treturn;\n\t}\n\t\n\t[$replaceWith$](rel,parent){\n\t\tlet res = rel[$insertInto$](parent,this[$end$]);\n\t\tthis[$removeFrom$](parent);\n\t\treturn res;\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\t// log '#removeFrom',parent\n\t\tlet i = this.length;\n\t\twhile (i > 0){\n\t\t\tlet el = this.childNodes[--i];\n\t\t\tel[$removeFrom$](parent);\n\t\t\t// parent.#removeChild(el)\n\t\t};\n\t\tif (this[$end$]) { parent.removeChild(this[$end$]) };\n\t\tthis.parentNode = null;\n\t\treturn;\n\t}\n\tstatic { register$(this,c$0,'IndexedTagFragment',16) }\n};\n\nexport function createIndexedList(bitflags,parent){\n\treturn new IndexedTagFragment(bitflags,parent);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlZC1saXN0LmltYmEiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleGVkLWxpc3QuaW1iYSJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGltYmEkc3RkbGliPTFcbmltcG9ydCB7Y3JlYXRlQ29tbWVudH0gZnJvbSAnLi9jb3JlJ1xuaW1wb3J0IHtGcmFnbWVudH0gZnJvbSAnLi9mcmFnbWVudCdcblxuY2xhc3MgSW5kZXhlZFRhZ0ZyYWdtZW50IDwgRnJhZ21lbnRcblxuXHRkZWYgY29uc3RydWN0b3IgZiwgcGFyZW50XG5cdFx0c3VwZXJcblx0XHQjZG9tRmxhZ3MgPSBmXG5cdFx0IyNwYXJlbnQgPSBwYXJlbnRcblxuXHRcdHVubGVzcyBmICYgJFRBR19MQVNUX0NISUxEJFxuXHRcdFx0I2VuZCA9IGNyZWF0ZUNvbW1lbnQoJ2xpc3QnKVxuXHRcdFx0IyAjZW5kLm5vZGUgPSBzZWxmXG5cblx0XHRzZWxmLiQgPSBjaGlsZE5vZGVzXG5cdFx0c2VsZi5sZW5ndGggPSAwXG5cblx0XHRpZiBwYXJlbnRcblx0XHRcdHBhcmVudC4jYXBwZW5kQ2hpbGQoc2VsZilcblxuXHRkZWYgaGFzQ2hpbGROb2Rlc1xuXHRcdHJldHVybiBmYWxzZSBpZiBsZW5ndGggPT0gMFxuXHRcdHJldHVybiB0cnVlXG5cblx0ZGVmICNhZnRlclZpc2l0IGxlblxuXHRcdGxldCBmcm9tID0gc2VsZi5sZW5ndGhcblx0XHRzZWxmLmxlbmd0aCA9IGxlblxuXG5cdFx0cmV0dXJuIGlmIGZyb20gPT0gbGVuXG5cdFx0bGV0IHBhciA9IHBhcmVudE5vZGVcblx0XHRyZXR1cm4gaWYgIXBhclxuXG5cdFx0bGV0IGFycmF5ID0gc2VsZi5jaGlsZE5vZGVzXG5cdFx0bGV0IGVuZCA9ICNlbmRcblxuXHRcdGlmIGZyb20gPiBsZW5cblx0XHRcdHdoaWxlIGZyb20gPiBsZW5cblx0XHRcdFx0cGFyLiNyZW1vdmVDaGlsZChhcnJheVstLWZyb21dKVxuXHRcdGVsaWYgbGVuID4gZnJvbVxuXHRcdFx0d2hpbGUgbGVuID4gZnJvbVxuXHRcdFx0XHRwYXIuI2luc2VydENoaWxkKGFycmF5W2Zyb20rK10sZW5kKVxuXHRcdHNlbGYubGVuZ3RoID0gbGVuXG5cdFx0cmV0dXJuXG5cblx0ZGVmICNpbnNlcnRJbnRvIHBhcmVudCwgYmVmb3JlXG5cdFx0cGFyZW50Tm9kZSA9IHBhcmVudFxuXG5cdFx0IyBpZiBwYXJlbnQgaXNhIE5vZGVcblx0XHQjIEZJWE1FIG5lZWQgdG8gd29yayB3aXRoIG5vbi1kb20gZWxlbWVudHMgYXMgd2VsbFxuXHRcdGlmICNlbmRcblx0XHRcdCNlbmQuI2luc2VydEludG8ocGFyZW50LGJlZm9yZSlcblxuXHRcdGJlZm9yZSA9ICNlbmRcblxuXHRcdGZvciBpdGVtLGkgaW4gY2hpbGROb2Rlc1xuXHRcdFx0YnJlYWsgaWYgaSA9PSBzZWxmLmxlbmd0aFxuXHRcdFx0IyBsb2cgJ2luc2VydCBjaGlsZCcscGFyZW50LGl0ZW0sYmVmb3JlXG5cdFx0XHRpdGVtLiNpbnNlcnRJbnRvKHBhcmVudCxiZWZvcmUpXG5cdFx0XHQjIGxvZyAnaW5zZXJ0IGNoaWxkJyxwYXJlbnQsaXRlbSxiZWZvcmUscGFyZW50LmlubmVySFRNTFxuXHRcdHJldHVybiBzZWxmXG5cblx0ZGVmICNhcHBlbmRDaGlsZCBpdGVtXG5cdFx0IyB0aGlzIHNob3VsZCBiZSBhIG5vb3Bcblx0XHQjIGxvZyAnbGlzdCAjYXBwZW5kQ2hpbGQnLGl0ZW1cblx0XHRyZXR1cm5cblxuXHRkZWYgI3JlcGxhY2VXaXRoIHJlbCwgcGFyZW50XG5cdFx0bGV0IHJlcyA9IHJlbC4jaW5zZXJ0SW50byhwYXJlbnQsI2VuZClcblx0XHQjcmVtb3ZlRnJvbShwYXJlbnQpXG5cdFx0cmV0dXJuIHJlc1xuXG5cdGRlZiAjcmVtb3ZlRnJvbSBwYXJlbnRcblx0XHQjIGxvZyAnI3JlbW92ZUZyb20nLHBhcmVudFxuXHRcdGxldCBpID0gbGVuZ3RoXG5cdFx0d2hpbGUgaSA+IDBcblx0XHRcdGxldCBlbCA9IGNoaWxkTm9kZXNbLS1pXVxuXHRcdFx0ZWwuI3JlbW92ZUZyb20ocGFyZW50KVxuXHRcdFx0IyBwYXJlbnQuI3JlbW92ZUNoaWxkKGVsKVxuXHRcdHBhcmVudC5yZW1vdmVDaGlsZCgjZW5kKSBpZiAjZW5kXG5cdFx0cGFyZW50Tm9kZSA9IG51bGxcblx0XHRyZXR1cm5cblxuZXhwb3J0IGRlZiBjcmVhdGVJbmRleGVkTGlzdCBiaXRmbGFncywgcGFyZW50XG5cdHJldHVybiBuZXcgSW5kZXhlZFRhZ0ZyYWdtZW50KGJpdGZsYWdzLHBhcmVudClcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxNQUFNLEVBQUUsYUFBYSxPQUFPLFFBQVE7QUFDcEMsTUFBTSxFQUFFLFFBQVEsT0FBTyxZQUFZOzs7QUFFbkMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE9BQUMsQ0FBQyxRQUFRLEVBQUE7Q0FFOUIsV0FBVyxDQUFDLENBQUMsQ0FBRSxNQUFNLENBQUE7RUFDeEIsbUJBQUs7RUFDTCxnQkFBUyxHQUFHLENBQUM7RUFDYixlQUFRLEdBQUcsTUFBTTs7RUFFakIsRUFBTSxFQUFDLEVBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFnQixHQUFBO0dBQzFCLFdBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDOztHQUNWOztFQUVuQixJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUEsVUFBVTtFQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7O0VBRWYsRUFBRSxFQUFDLE1BQU0sRUFBQTtHQUNSLE1BQU0sZUFBYSxDQUFDLElBQUksQ0FBQztHQUFBO0VBQUE7O0NBRXZCLGFBQWEsRUFBQTtFQUNILEVBQUUsRUFBQyxLQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUEzQixFQUFBLE1BQU0sQ0FBQyxLQUFLO0VBQ1osTUFBTSxDQUFDLElBQUk7RUFBQTs7Z0JBRUksR0FBRyxDQUFBO0VBQ2QsSUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU07RUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHOztFQUVWLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBckIsRUFBQSxNQUFNO0VBQ0YsSUFBQSxHQUFHLEdBQUcsS0FBQSxVQUFVO0VBQ2IsRUFBRSxFQUFDLEVBQUMsR0FBRyxDQUFBLEVBQWQsRUFBQSxNQUFNOztFQUVGLElBQUEsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVO0VBQ3ZCLElBQUEsR0FBRyxHQUFHLFdBQUk7O0VBRWQsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFBO1VBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7SUFDZixHQUFHLGVBQWEsQ0FBQyxLQUFLLENBQUEsRUFBRyxJQUFJLENBQUMsQ0FBQztJQUFBO0dBQUEsTUFDakMsRUFBQSxFQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFBO1VBQ1IsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFDZixHQUFHLGVBQWEsQ0FBQyxLQUFLLENBQUEsSUFBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFBQTtHQUFBO0VBQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRztFQUNqQixNQUFNO0VBQUE7O2dCQUVTLE1BQU0sQ0FBRSxNQUFNLENBQUE7RUFDN0IsS0FBQSxVQUFVLEdBQUcsTUFBTTs7OztFQUluQixFQUFFLEVBQUMsV0FBSSxFQUFBO0dBQ04sV0FBSSxjQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztHQUFBOztFQUVoQyxNQUFNLEdBQUcsV0FBSTs7RUFFYixHQUFHLDBCQUFXLEtBQUEsVUFBVSxnQ0FBQTtPQUFwQixJQUFJO0dBQ0QsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU07O0dBRXpCLElBQUksY0FBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7O0dBQ3lCO0VBQ3pELE1BQU0sQ0FBQyxJQUFJO0VBQUE7O2lCQUVLLElBQUksQ0FBQTs7O0VBR3BCLE1BQU07RUFBQTs7aUJBRVUsR0FBRyxDQUFFLE1BQU0sQ0FBQTtFQUN2QixJQUFBLEdBQUcsR0FBRyxHQUFHLGNBQVksQ0FBQyxNQUFNLENBQUMsV0FBSSxDQUFDO0VBQ3RDLGtCQUFXLENBQUMsTUFBTSxDQUFDO0VBQ25CLE1BQU0sQ0FBQyxHQUFHO0VBQUE7O2dCQUVLLE1BQU0sQ0FBQTs7RUFFakIsSUFBQSxDQUFDLEdBQUcsS0FBQSxNQUFNO1NBQ1IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDTixJQUFBLEVBQUUsR0FBRyxLQUFBLFVBQVUsQ0FBQSxFQUFHLENBQUMsQ0FBQztHQUN4QixFQUFFLGNBQVksQ0FBQyxNQUFNLENBQUM7O0dBQ0c7RUFDRCxFQUFFLEVBQUMsV0FBSSxFQUFoQyxFQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBSSxDQUFDLEVBQUE7RUFDeEIsS0FBQSxVQUFVLEdBQUcsSUFBSTtFQUNqQixNQUFNO0VBQUE7O0FBQUEsQ0FBQTs7QUFFUixNQUFNLENBQUMsUUFBRyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBRSxNQUFNLENBQUE7Q0FDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0NBQUE7QUFDL0M7In0=","css":""}