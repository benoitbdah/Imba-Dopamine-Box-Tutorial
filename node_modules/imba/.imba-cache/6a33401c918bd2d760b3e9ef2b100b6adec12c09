{"id":"ci","warnings":[],"errors":[],"js":"// @ts-ignore\nfunction isa$(a,b){ return typeof b === \"string\" ? (typeof a === b) : b[Symbol.hasInstance]?.(a) }\nimport {register$} from 'imba/runtime';\nconst $capture$ = Symbol.for('#capture'), $step$ = Symbol.for('#step'), $cancel$ = Symbol.for('#cancel'), $reframe$ = Symbol.for('#reframe'), $mods$ = Symbol.for('#mods'), $dx$ = Symbol.for('#dx'), $dy$ = Symbol.for('#dy'), $context$ = Symbol.for('#context'), $locked$ = Symbol.for('#locked'), $teardown$ = Symbol.for('#teardown'), $x$ = Symbol.for('#x'), $y$ = Symbol.for('#y'), $pinTarget$ = Symbol.for('#pinTarget');\n\n/*body*/\n// imba$imbaPath=global\n// imba$stdlib=1\n\nimport {Event,Element} from '../dom/core';\nimport {listen,once,emit,unlisten} from '../utils';\n\nimport * as helpers from './helpers';\n\nexport function use_events_touch(){\n\tglobalThis.imba.uses_events_touch = true;\n\treturn true;\n};\n\nlet iosMoveIframeFix = null;\n\nlet c$0 = Symbol();\nexport class Touch {\n\tconstructor(e,handler,el){\n\t\tthis.phase = 'init';\n\t\tthis.events = [];\n\t\tthis.originalEvent = e;\n\t\tthis.handler = handler;\n\t\tthis.target = this.currentTarget = el;\n\t\tthis[$mods$] = {};\n\t}\n\t\n\tset event(value){\n\t\tthis.events.push(value);\n\t}\n\t\n\tget ctrlKey(){\n\t\treturn this.originalEvent.ctrlKey;\n\t}\n\tget altKey(){\n\t\treturn this.originalEvent.altKey;\n\t}\n\tget shiftKey(){\n\t\treturn this.originalEvent.shiftKey;\n\t}\n\tget metaKey(){\n\t\treturn this.originalEvent.metaKey;\n\t}\n\tget isPrimary(){\n\t\treturn this.originalEvent.isPrimary;\n\t}\n\tget pointerType(){\n\t\treturn this.originalEvent.pointerType;\n\t}\n\t\n\tget start(){\n\t\treturn this.originalEvent;\n\t}\n\t\n\tget originalTarget(){\n\t\treturn this.originalEvent.target;\n\t}\n\t\n\tget event(){\n\t\treturn this.events[this.events.length - 1];\n\t}\n\t\n\tget elapsed(){\n\t\treturn this.event.timeStamp - this.events[0].timeStamp;\n\t}\n\t\n\tget type(){\n\t\treturn this.event.type;\n\t}\n\tget pointerId(){\n\t\treturn this.originalEvent.pointerId;\n\t}\n\tget pressure(){\n\t\treturn this.event.pressure;\n\t}\n\tget clientX(){\n\t\treturn this.event.clientX;\n\t}\n\tget clientY(){\n\t\treturn this.event.clientY;\n\t}\n\tget offsetX(){\n\t\treturn this.event.offsetX;\n\t}\n\tget offsetY(){\n\t\treturn this.event.offsetY;\n\t}\n\tget activeΦ(){\n\t\treturn this.phase != 'ended';\n\t}\n\tget endedΦ(){\n\t\treturn this.phase == 'ended';\n\t}\n\t\n\tget dx(){\n\t\treturn (this[$dx$] == undefined) ? (this.event.x - this.start.x) : this[$dx$];\n\t}\n\t\n\tget dy(){\n\t\treturn (this[$dy$] == undefined) ? (this.event.y - this.start.y) : this[$dy$];\n\t}\n\t\n\t// Amount of movement since initial pointerdown\n\tget dr(){\n\t\treturn Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n\t}\n\t\n\tstopImmediatePropagation(){\n\t\tthis.cancelBubble = true;\n\t\tthis.event.stopImmediatePropagation();\n\t\treturn this;\n\t}\n\t\n\tstopPropagation(){\n\t\tthis.cancelBubble = true;\n\t\tthis.event.stopPropagation();\n\t\treturn this;\n\t}\n\t\n\tpreventDefault(){\n\t\tthis.defaultPrevented = true;\n\t\treturn this.event.preventDefault();\n\t}\n\t\n\temit(name,...params){\n\t\treturn emit(this,name,params);\n\t}\n\ton(name,...params){\n\t\treturn listen(this,name,...params);\n\t}\n\tonce(name,...params){\n\t\treturn once(this,name,...params);\n\t}\n\tun(name,...params){\n\t\treturn unlisten(this,name,...params);\n\t}\n\t\n\tαflag(name,sel){\n\t\tconst {element: element} = this[$context$];\n\t\tconst ts = Date.now();\n\t\tlet el = (isa$(sel,Element)) ? sel : ((sel ? element.closest(sel) : element));\n\t\t\n\t\tif ((this[$step$].setup != true) ? ((this[$step$].setup = true,true)) : false) {\n\t\t\tel.flags.incr(name);\n\t\t\tonce(this,'end',function() {\n\t\t\t\treturn el.flags.decr(name);\n\t\t\t});\n\t\t};\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαlock(){\n\t\tthis[$capture$]();\n\t\treturn true;\n\t}\n\t\n\t[$capture$](){\n\t\tif ((this[$locked$] != true) ? ((this[$locked$] = true,true)) : false) {\n\t\t\treturn this[$context$].element.setPointerCapture(this.pointerId);\n\t\t};\n\t}\n\t\n\tget [$step$](){\n\t\treturn this[$mods$][this[$context$].step] ||= {};\n\t}\n\t\n\t[$cancel$](){\n\t\treturn this[$teardown$]();\n\t}\n\t\n\tαmoved(a,b){\n\t\tlet o = this[$step$];\n\t\tconst {element: element,state: state,event: event} = this[$context$];\n\t\t\n\t\tif (!(o.setup)) {\n\t\t\tlet th = a || 4;\n\t\t\tif (typeof a == 'string' && a.match(/^(up|down|left|right|x|y)$/)) {\n\t\t\t\to.dir = a;\n\t\t\t\tth = b || 4;\n\t\t\t};\n\t\t\t\n\t\t\tif (typeof b == 'string' && b.match(/^(up|down|left|right|x|y)$/)) {\n\t\t\t\to.dir = b;\n\t\t\t};\n\t\t\t\n\t\t\to.setup = true;\n\t\t\tlet [tv,tu] = helpers.parseDimension(th);\n\t\t\to.threshold = tv;\n\t\t\to.sy = tv;\n\t\t\to.x0 = this.x;\n\t\t\to.y0 = this.y;\n\t\t\to.dir ||= 'dist';\n\t\t\to.x = o.left = o.right = o.y = o.up = o.down = o.dist = 0;\n\t\t\tif ((tu && tu != 'px')) {\n\t\t\t\tconsole.warn('only px threshold allowed in @touch.moved');\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (o.active) {\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\tif (o.cancelled) {\n\t\t\treturn false;\n\t\t};\n\t\t\n\t\tlet th = o.threshold;\n\t\tlet dx = this.x - o.x0;\n\t\tlet dy = this.y - o.y0;\n\t\t\n\t\to.x = Math.max(o.x,Math.abs(dx));\n\t\to.y = Math.max(o.y,Math.abs(dy));\n\t\to.left = Math.max(o.left,-dx);\n\t\to.right = Math.max(o.right,dx);\n\t\to.up = Math.max(o.up,-dy);\n\t\to.down = Math.max(o.down,dy);\n\t\to.dist = Math.max(o.dist,Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tlet val = o[o.dir];\n\t\t\n\t\tif (val > th && val >= o.x && val >= o.y) {\n\t\t\to.active = true;\n\t\t\tlet pinned = state.pinTarget;\n\t\t\telement.flags.incr('@move');\n\t\t\tif (pinned) { pinned.flags.incr('@move') };\n\t\t\tthis.preventDefault();\n\t\t\t\n\t\t\tonce(this,'end',function() {\n\t\t\t\tif (pinned) { pinned.flags.decr('@move') };\n\t\t\t\treturn element.flags.decr('@move');\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (o.x > th || o.y > th) {\n\t\t\to.cancelled = true;\n\t\t\t// #cancel!\n\t\t\treturn false;\n\t\t};\n\t\t\n\t\treturn false;\n\t}\n\t\n\tαhold(time = 250){\n\t\tvar self = this;\n\t\tlet o = this[$step$];\n\t\tlet el = this[$context$].element;\n\t\t\n\t\tif (o.cancelled) { return false };\n\t\t\n\t\tif (o.setup && !(o.active)) {\n\t\t\tlet x = this.clientX;\n\t\t\tlet y = this.clientY;\n\t\t\t\n\t\t\tlet dx = x - o.x;\n\t\t\tlet dy = y - o.y;\n\t\t\tlet dr = Math.sqrt(dx * dx + dy * dy);\n\t\t\t// cancel\n\t\t\tif (dr > 5 && !(o.cancelled)) {\n\t\t\t\tclearTimeout(o.timeout);\n\t\t\t\to.cancelled = true;\n\t\t\t\t// #cancel!\n\t\t\t};\n\t\t};\n\t\t\n\t\tif ((o.setup != true) ? ((o.setup = true,true)) : false) {\n\t\t\to.active = false;\n\t\t\to.x = this.clientX;\n\t\t\to.y = this.clientY;\n\t\t\t\n\t\t\tlet resolve;\n\t\t\t\n\t\t\to.timeout = setTimeout(function() {\n\t\t\t\to.active = true;\n\t\t\t\tself.preventDefault();\n\t\t\t\tel.flags.incr(\"@hold\");\n\t\t\t\tif (resolve) { resolve(true) };\n\t\t\t\treturn resolve = null;\n\t\t\t},time);\n\t\t\t\n\t\t\tonce(this,'end',function() {\n\t\t\t\tif (o.active) {\n\t\t\t\t\tel.flags.decr(\"@hold\");\n\t\t\t\t};\n\t\t\t\tclearTimeout(o.timeout);\n\t\t\t\tif (resolve) { resolve(false) };\n\t\t\t\treturn resolve = null;\n\t\t\t});\n\t\t\t\n\t\t\treturn new Promise(function(_0) { return resolve = _0; });\n\t\t};\n\t\t\n\t\treturn o.active;\n\t}\n\t\n\tαsync(item,xalias = 'x',yalias = 'y'){\n\t\tlet o = this[$step$];\n\t\t\n\t\tif ((o.setup != true) ? ((o.setup = true,true)) : false) {\n\t\t\to.x = item[xalias] || 0;\n\t\t\to.y = item[yalias] || 0;\n\t\t\to.tx = this.x;\n\t\t\to.ty = this.y;\n\t\t} else {\n\t\t\tif (xalias) { item[xalias] = o.x + (this.x - o.tx) };\n\t\t\tif (yalias) { item[yalias] = o.y + (this.y - o.ty) };\n\t\t};\n\t\t\n\t\tthis[$context$].commit = true;\n\t\treturn true;\n\t}\n\t\n\tαapply(item,xalias = 'x',yalias = 'y'){\n\t\tif (xalias) { item[xalias] = this.x };\n\t\tif (yalias) { item[yalias] = this.y };\n\t\tthis[$context$].commit = true;\n\t\treturn true;\n\t}\n\t\n\tαcss(xalias = 'x',yalias = 'y'){\n\t\tlet o = this[$step$];\n\t\tif ((o.setup != true) ? ((o.setup = true,true)) : false) {\n\t\t\to.el = this[$context$].element;\n\t\t\to.x = o.el[$x$] || 0;\n\t\t\to.y = o.el[$y$] || 0;\n\t\t\to.tx = this.x;\n\t\t\to.ty = this.y;\n\t\t} else {\n\t\t\tlet x = o.el[$x$] = o.x + (this.x - o.tx);\n\t\t\tlet y = o.el[$y$] = o.y + (this.y - o.ty);\n\t\t\t\n\t\t\tif (xalias) { o.el.style.setProperty(\"--x\",x + 'px') };\n\t\t\tif (yalias) { o.el.style.setProperty(\"--y\",y + 'px') };\n\t\t};\n\t\treturn true;\n\t}\n\t\n\tαend(){\n\t\treturn this.phase == 'ended';\n\t}\n\t\n\tαshift(){\n\t\treturn !(!(this.shiftKey));\n\t}\n\t\n\tαalt(){\n\t\treturn !(!(this.altKey));\n\t}\n\t\n\tαctrl(){\n\t\treturn !(!(this.ctrlKey));\n\t}\n\t\n\tαmeta(){\n\t\treturn !(!(this.metaKey));\n\t}\n\t\n\tαprimary(){\n\t\treturn !(!(this.isPrimary)) && (this.pointerType != 'mouse' || this.originalEvent.button == 0);\n\t}\n\t\n\tαmouse(){\n\t\treturn this.pointerType == 'mouse';\n\t}\n\t\n\tαpen(){\n\t\treturn this.pointerType == 'pen';\n\t}\n\t\n\tαtouch(){\n\t\treturn this.pointerType == 'touch';\n\t}\n\t\n\tαpressure(threshold = 0.5){\n\t\treturn this.pressure >= threshold;\n\t}\n\t\n\tαlog(...params){\n\t\tconsole.info(...params);\n\t\treturn true;\n\t}\n\t\n\tαleft(){\n\t\treturn this.originalEvent.button == 0;\n\t}\n\t\n\tαmiddle(){\n\t\treturn this.originalEvent.button == 1;\n\t}\n\t\n\tαright(){\n\t\treturn this.originalEvent.button == 2;\n\t}\n\t\n\tαround(sx = 1,sy = sx){\n\t\tthis.x = helpers.round(this.x,sx);\n\t\tthis.y = helpers.round(this.y,sy);\n\t\treturn true;\n\t}\n\t\n\t[$reframe$](...params){\n\t\tlet o = this[$step$];\n\t\t\n\t\tif ((o.setup != true) ? ((o.setup = true,true)) : false) {\n\t\t\tlet el = this.target;\n\t\t\tlet len = params.length;\n\t\t\tlet box = params[0];\n\t\t\tlet min = 0;\n\t\t\tlet max = '100%';\n\t\t\tlet snap = 0;\n\t\t\tlet typ = typeof box;\n\t\t\t\n\t\t\tif (typ == 'number' || (typ == 'string' && (/^([-+]?\\d[\\d\\.]*)(%|\\w+)$/).test(box)) || isa$(box,Array)) {\n\t\t\t\tbox = null;\n\t\t\t} else if (typ == 'string') {\n\t\t\t\tif (box == 'this' || box == '') {\n\t\t\t\t\tbox = el;\n\t\t\t\t} else if (box == 'up') {\n\t\t\t\t\tbox = el.parentNode;\n\t\t\t\t} else if (box == 'op') {\n\t\t\t\t\tbox = el.offsetParent;\n\t\t\t\t} else {\n\t\t\t\t\tbox = el.closest(box) || el.querySelector(box);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif (box == null) {\n\t\t\t\tlen++;\n\t\t\t\tparams.unshift(box = el);\n\t\t\t};\n\t\t\t\n\t\t\tif (len == 2) {\n\t\t\t\tsnap = params[1];\n\t\t\t} else if (len > 2) {\n\t\t\t\t[min,max,snap = 0] = params.slice(1);\n\t\t\t};\n\t\t\t\n\t\t\tlet rect = box.getBoundingClientRect();\n\t\t\tif (!(isa$(min,Array))) { min = [min,min] };\n\t\t\tif (!(isa$(max,Array))) { max = [max,max] };\n\t\t\tif (!(isa$(snap,Array))) { snap = [snap,snap] };\n\t\t\t\n\t\t\to.rect = rect;\n\t\t\to.x = helpers.createScale(rect.left,rect.right,min[0],max[0],snap[0]);\n\t\t\to.y = helpers.createScale(rect.top,rect.bottom,min[1],max[1],snap[1]);\n\t\t\tthis.x0 = this.x = o.x(this.x,o.clamp);\n\t\t\tthis.y0 = this.y = o.y(this.y,o.clamp);\n\t\t} else {\n\t\t\tlet x = this.x = o.x(this.x,o.clamp);\n\t\t\tlet y = this.y = o.y(this.y,o.clamp);\n\t\t\tthis[$dx$] = x - this.x0;\n\t\t\tthis[$dy$] = y - this.y0;\n\t\t};\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαfit(...params){\n\t\tthis[$step$].clamp = true;\n\t\treturn this[$reframe$](...params);\n\t}\n\t\n\tαreframe(...params){\n\t\treturn this[$reframe$](...params);\n\t}\n\t\n\t/*\n\t\tAllow pinning the touch to a certain point in an element, so that\n\t\tall future x,y values are relative to this pinned point.\n\t\tYou can include relative anchors for x and y\n\t\n\t\tMake x,y relative to the center of the parent:\n\t\t\t<box.target> <div.handle @touch.pin('.target',0.5,0.5)>\n\t\n\t\t(targetElement,anchorX?, anchorY?)\n\t\t*/\n\t\n\tαpin(...params){\n\t\tlet o = this[$step$];\n\t\t\n\t\t// TODO warn if pin comes after reframe\n\t\t\n\t\tif ((o.setup != true) ? ((o.setup = true,true)) : false) {\n\t\t\tlet box = helpers.toElement(params[0],this.target);\n\t\t\t\n\t\t\tif (!(isa$(box,Element))) {\n\t\t\t\tparams.unshift(box = this.target);\n\t\t\t};\n\t\t\t\n\t\t\tlet ax = params[1] || 0;\n\t\t\tlet ay = params[2] ??= ax;\n\t\t\tlet rect = box.getBoundingClientRect();\n\t\t\t\n\t\t\to.x = this.clientX - (rect.left + rect.width * ax);\n\t\t\to.y = this.clientY - (rect.top + rect.height * ay);\n\t\t\t\n\t\t\tif (box) {\n\t\t\t\tthis[$pinTarget$] = box;\n\t\t\t\tbox.flags.incr('_touch_');\n\t\t\t\tonce(this,'end',function() { return box.flags.decr('_touch_'); });\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis.x -= o.x;\n\t\tthis.y -= o.y;\n\t\treturn true;\n\t}\n\tstatic { register$(this,c$0,'Touch',16) }\n};\n\nlet c$1 = Symbol();\nclass ΩElement {\n\ton$touch(mods,context,handler,o){\n\t\thandler.type = 'touch';\n\t\tthis.addEventListener('pointerdown',handler,{passive: false});\n\t\tif (helpers.navigator.iosΦ && globalThis.parent != globalThis) {\n\t\t\tif ((iosMoveIframeFix != true) ? ((iosMoveIframeFix = true,true)) : false) {\n\t\t\t\tglobalThis.parent.postMessage('setupTouchFix');\n\t\t\t};\n\t\t};\n\t\t\n\t\treturn handler;\n\t}\n\tstatic { register$(this,c$1,'Element',1,Element); }\n};\n\nif (true && globalThis.parent == globalThis && helpers.navigator.iosΦ) {\n\tlet fix = function(e) {\n\t\tif (e.data == 'setupTouchFix') {\n\t\t\tglobalThis.addEventListener('touchmove',function() { return false; },{passive: false});\n\t\t\treturn globalThis.removeEventListener('message',fix);\n\t\t};\n\t};\n\tglobalThis.addEventListener('message',fix);\n};\n\nEvent.touch$handle = function (){\n\tlet e = this.event;\n\tlet el = this.element;\n\tlet id = this.state.pointerId;\n\tlet m = this.modifiers;\n\tlet handler = this.handler;\n\tlet ios = helpers.navigator.iosΦ;\n\t\n\tthis.current = this.state;\n\t\n\tif (id != undefined) {\n\t\treturn id == e.pointerId;\n\t};\n\t\n\t// reject the touch before creation for certain modifiers\n\t// TODO should allow specifying pen OR mouse etc\n\t// FIXME these will not work with negated modifiers\n\tif (m.ctrl && !(e.ctrlKey)) { return };\n\tif (m.alt && !(e.altKey)) { return };\n\tif (m.meta && !(e.metaKey)) { return };\n\tif (m.shift && !(e.shiftKey)) { return };\n\tif (m.if && !(!(m.if[0])) == false) { return };\n\tif (m.self && e.target != el) { return };\n\tif (m.primary && !(e.isPrimary)) { return };\n\tif (m.pen && e.pointerType != 'pen') { return };\n\tif (m.mouse && e.pointerType != 'mouse') { return };\n\tif (m.touch && e.pointerType != 'touch') { return };\n\tif (m.sel && !(e.target.matches(String(m.sel[0])))) { return };\n\t\n\tlet t = this.state = handler.state = this.current = new Touch(e,handler,el);\n\tid = t.pointerId;\n\t\n\tlet canceller = function(e) {\n\t\te.preventDefault();\n\t\treturn false;\n\t};\n\t\n\tlet teardown = null;\n\tlet sym = Symbol();\n\t\n\tlet onclick = function(e) {\n\t\tlet tx = t.clientX;\n\t\tlet ty = t.clientY;\n\t\tlet ex = e.clientX;\n\t\tlet ey = e.clientY;\n\t\t\n\t\tif ((t[$locked$] || t.defaultPrevented) && ((e.pointerId == t.pointerId) || (tx == ex && ty == ey))) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t};\n\t\t\n\t\tif (onclick) {\n\t\t\tglobalThis.removeEventListener('click',onclick,{capture: true});\n\t\t\tonclick = null;\n\t\t};\n\t\treturn;\n\t};\n\t\n\tlet ontouch = function(e) {\n\t\tif (t.type == 'touchmove' && e.changedTouches[0].identifier != id) {\n\t\t\treturn;\n\t\t};\n\t\tif (t.defaultPrevented || t[$locked$]) {\n\t\t\treturn e.preventDefault();\n\t\t};\n\t};\n\t\n\tlet listener = function(e) {\n\t\tlet typ = e.type;\n\t\tlet ph = t.phase;\n\t\tif (e.pointerId && t.pointerId != e.pointerId) { return };\n\t\t\n\t\tif (e[sym]) {\n\t\t\treturn;\n\t\t};\n\t\t\n\t\te[sym] = true;\n\t\t\n\t\tlet end = typ == 'pointerup' || typ == 'pointercancel';\n\t\t\n\t\t// if the pressure is suddenly 0 it indicates there has been a\n\t\t// pointerup event not captured by the browser\n\t\tif (e.pressure == 0 && e.pointerType == 'mouse' && typ == 'pointermove' && t.originalEvent.pressure > 0) {\n\t\t\treturn teardown(e);\n\t\t};\n\t\t\n\t\tif (typ == 'pointercancel') {\n\t\t\tt.x = t.clientX;\n\t\t\tt.y = t.clientY;\n\t\t} else {\n\t\t\tt.x = e.clientX;\n\t\t\tt.y = e.clientY;\n\t\t};\n\t\t\n\t\tt.event = e;\n\t\t\n\t\tif (end) {\n\t\t\tt.phase = 'ended';\n\t\t};\n\t\t\n\t\ttry {\n\t\t\thandler.handleEvent(t);\n\t\t} catch (e) { };\n\t\t\n\t\tif (ph == 'init' && !(end)) {\n\t\t\tt.phase = 'active';\n\t\t};\n\t\t\n\t\tif (end && teardown) {\n\t\t\treturn teardown(e);\n\t\t};\n\t};\n\t\n\tlet disposed = false;\n\t\n\tteardown = function(e) {\n\t\tif (disposed) { return };\n\t\tdisposed = true;\n\t\tel.flags.decr('_touch_');\n\t\t\n\t\tif (t.phase != 'ended') {\n\t\t\tt.phase = 'ended';\n\t\t\tt.x = t.clientX;\n\t\t\tt.y = t.clientY;\n\t\t\thandler.handleEvent(t);\n\t\t};\n\t\t\n\t\tt.emit('end');\n\t\t\n\t\tif (!(m.passive)) {\n\t\t\tif ((--handler.prevents) == 0) {\n\t\t\t\tel.style.removeProperty('touch-action');\n\t\t\t};\n\t\t};\n\t\t\n\t\thandler.state = {};\n\t\t\n\t\tglobalThis.removeEventListener('pointermove',listener,{passive: !(!(m.passive))});\n\t\tglobalThis.removeEventListener('pointerup',listener);\n\t\tglobalThis.removeEventListener('pointercancel',listener);\n\t\t\n\t\tsetTimeout(function() {\n\t\t\tif (onclick) {\n\t\t\t\tglobalThis.removeEventListener('click',onclick,{capture: true});\n\t\t\t\tonclick = null;\n\t\t\t};\n\t\t\t\n\t\t\tif (ios && ontouch) {\n\t\t\t\tglobalThis.removeEventListener('touchend',ontouch);\n\t\t\t\tglobalThis.removeEventListener('touchmove',ontouch,{passive: false});\n\t\t\t\treturn ontouch = null;\n\t\t\t};\n\t\t},100);\n\t\t\n\t\tif (!(m.passive)) {\n\t\t\treturn globalThis.document.removeEventListener('selectstart',canceller,{capture: true});\n\t\t};\n\t};\n\t\n\tt[$teardown$] = teardown;\n\t\n\tif (!(m.passive)) {\n\t\thandler.prevents ||= 0;\n\t\thandler.prevents++;\n\t\tel.style.setProperty('touch-action','none');\n\t\tel.offsetWidth;\n\t};\n\t\n\tel.flags.incr('_touch_');\n\tglobalThis.addEventListener('pointermove',listener,{passive: !(!(m.passive))});\n\tglobalThis.addEventListener('pointerup',listener);\n\tglobalThis.addEventListener('pointercancel',listener);\n\tglobalThis.addEventListener('click',onclick,{capture: true});\n\t\n\tif (ios && !(m.passive)) {\n\t\tglobalThis.addEventListener('touchend',ontouch);\n\t\tglobalThis.addEventListener('touchmove',ontouch,{passive: false});\n\t};\n\t\n\tif (!(m.passive)) {\n\t\tglobalThis.document.addEventListener('selectstart',canceller,{capture: true});\n\t};\n\t\n\tlistener(e);\n\treturn false;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}